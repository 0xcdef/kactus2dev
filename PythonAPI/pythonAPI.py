# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pythonAPI
else:
    import _pythonAPI

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pythonAPI.delete_SwigPyIterator

    def value(self):
        return _pythonAPI.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pythonAPI.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pythonAPI.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pythonAPI.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pythonAPI.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pythonAPI.SwigPyIterator_copy(self)

    def next(self):
        return _pythonAPI.SwigPyIterator_next(self)

    def __next__(self):
        return _pythonAPI.SwigPyIterator___next__(self)

    def previous(self):
        return _pythonAPI.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pythonAPI.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pythonAPI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pythonAPI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pythonAPI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pythonAPI.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pythonAPI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pythonAPI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pythonAPI:
_pythonAPI.SwigPyIterator_swigregister(SwigPyIterator)

class QString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromStdString(s):
        return _pythonAPI.QString_fromStdString(s)

    def toStdString(self):
        return _pythonAPI.QString_toStdString(self)

    def size(self):
        return _pythonAPI.QString_size(self)

    def count(self):
        return _pythonAPI.QString_count(self)

    def length(self):
        return _pythonAPI.QString_length(self)

    def isEmpty(self):
        return _pythonAPI.QString_isEmpty(self)

    def __init__(self):
        _pythonAPI.QString_swiginit(self, _pythonAPI.new_QString())
    __swig_destroy__ = _pythonAPI.delete_QString

# Register QString in _pythonAPI:
_pythonAPI.QString_swigregister(QString)

def QString_fromStdString(s):
    return _pythonAPI.QString_fromStdString(s)

class NameGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pythonAPI.NameGroup_swiginit(self, _pythonAPI.new_NameGroup(*args))
    __swig_destroy__ = _pythonAPI.delete_NameGroup

    def name(self):
        return _pythonAPI.NameGroup_name(self)

    def displayName(self):
        return _pythonAPI.NameGroup_displayName(self)

    def description(self):
        return _pythonAPI.NameGroup_description(self)

# Register NameGroup in _pythonAPI:
_pythonAPI.NameGroup_swigregister(NameGroup)

class stringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pythonAPI.stringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pythonAPI.stringVector___nonzero__(self)

    def __bool__(self):
        return _pythonAPI.stringVector___bool__(self)

    def __len__(self):
        return _pythonAPI.stringVector___len__(self)

    def __getslice__(self, i, j):
        return _pythonAPI.stringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pythonAPI.stringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pythonAPI.stringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pythonAPI.stringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pythonAPI.stringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pythonAPI.stringVector___setitem__(self, *args)

    def pop(self):
        return _pythonAPI.stringVector_pop(self)

    def append(self, x):
        return _pythonAPI.stringVector_append(self, x)

    def empty(self):
        return _pythonAPI.stringVector_empty(self)

    def size(self):
        return _pythonAPI.stringVector_size(self)

    def swap(self, v):
        return _pythonAPI.stringVector_swap(self, v)

    def begin(self):
        return _pythonAPI.stringVector_begin(self)

    def end(self):
        return _pythonAPI.stringVector_end(self)

    def rbegin(self):
        return _pythonAPI.stringVector_rbegin(self)

    def rend(self):
        return _pythonAPI.stringVector_rend(self)

    def clear(self):
        return _pythonAPI.stringVector_clear(self)

    def get_allocator(self):
        return _pythonAPI.stringVector_get_allocator(self)

    def pop_back(self):
        return _pythonAPI.stringVector_pop_back(self)

    def erase(self, *args):
        return _pythonAPI.stringVector_erase(self, *args)

    def __init__(self, *args):
        _pythonAPI.stringVector_swiginit(self, _pythonAPI.new_stringVector(*args))

    def push_back(self, x):
        return _pythonAPI.stringVector_push_back(self, x)

    def front(self):
        return _pythonAPI.stringVector_front(self)

    def back(self):
        return _pythonAPI.stringVector_back(self)

    def assign(self, n, x):
        return _pythonAPI.stringVector_assign(self, n, x)

    def resize(self, *args):
        return _pythonAPI.stringVector_resize(self, *args)

    def insert(self, *args):
        return _pythonAPI.stringVector_insert(self, *args)

    def reserve(self, n):
        return _pythonAPI.stringVector_reserve(self, n)

    def capacity(self):
        return _pythonAPI.stringVector_capacity(self)
    __swig_destroy__ = _pythonAPI.delete_stringVector

# Register stringVector in _pythonAPI:
_pythonAPI.stringVector_swigregister(stringVector)

class fieldInterfaceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pythonAPI.fieldInterfaceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pythonAPI.fieldInterfaceVector___nonzero__(self)

    def __bool__(self):
        return _pythonAPI.fieldInterfaceVector___bool__(self)

    def __len__(self):
        return _pythonAPI.fieldInterfaceVector___len__(self)

    def __getslice__(self, i, j):
        return _pythonAPI.fieldInterfaceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pythonAPI.fieldInterfaceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pythonAPI.fieldInterfaceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pythonAPI.fieldInterfaceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pythonAPI.fieldInterfaceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pythonAPI.fieldInterfaceVector___setitem__(self, *args)

    def pop(self):
        return _pythonAPI.fieldInterfaceVector_pop(self)

    def append(self, x):
        return _pythonAPI.fieldInterfaceVector_append(self, x)

    def empty(self):
        return _pythonAPI.fieldInterfaceVector_empty(self)

    def size(self):
        return _pythonAPI.fieldInterfaceVector_size(self)

    def swap(self, v):
        return _pythonAPI.fieldInterfaceVector_swap(self, v)

    def begin(self):
        return _pythonAPI.fieldInterfaceVector_begin(self)

    def end(self):
        return _pythonAPI.fieldInterfaceVector_end(self)

    def rbegin(self):
        return _pythonAPI.fieldInterfaceVector_rbegin(self)

    def rend(self):
        return _pythonAPI.fieldInterfaceVector_rend(self)

    def clear(self):
        return _pythonAPI.fieldInterfaceVector_clear(self)

    def get_allocator(self):
        return _pythonAPI.fieldInterfaceVector_get_allocator(self)

    def pop_back(self):
        return _pythonAPI.fieldInterfaceVector_pop_back(self)

    def erase(self, *args):
        return _pythonAPI.fieldInterfaceVector_erase(self, *args)

    def __init__(self, *args):
        _pythonAPI.fieldInterfaceVector_swiginit(self, _pythonAPI.new_fieldInterfaceVector(*args))

    def push_back(self, x):
        return _pythonAPI.fieldInterfaceVector_push_back(self, x)

    def front(self):
        return _pythonAPI.fieldInterfaceVector_front(self)

    def back(self):
        return _pythonAPI.fieldInterfaceVector_back(self)

    def assign(self, n, x):
        return _pythonAPI.fieldInterfaceVector_assign(self, n, x)

    def resize(self, *args):
        return _pythonAPI.fieldInterfaceVector_resize(self, *args)

    def insert(self, *args):
        return _pythonAPI.fieldInterfaceVector_insert(self, *args)

    def reserve(self, n):
        return _pythonAPI.fieldInterfaceVector_reserve(self, n)

    def capacity(self):
        return _pythonAPI.fieldInterfaceVector_capacity(self)
    __swig_destroy__ = _pythonAPI.delete_fieldInterfaceVector

# Register fieldInterfaceVector in _pythonAPI:
_pythonAPI.fieldInterfaceVector_swigregister(fieldInterfaceVector)

class PythonAPI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pythonAPI.PythonAPI_swiginit(self, _pythonAPI.new_PythonAPI())
    __swig_destroy__ = _pythonAPI.delete_PythonAPI

    def setupLibrary(self, settingsFile):
        return _pythonAPI.PythonAPI_setupLibrary(self, settingsFile)

    def getFileCount(self):
        return _pythonAPI.PythonAPI_getFileCount(self)

    def listVLNVs(self, *args):
        return _pythonAPI.PythonAPI_listVLNVs(self, *args)

    def listComponentVLNVs(self):
        return _pythonAPI.PythonAPI_listComponentVLNVs(self)

    def openComponent(self, componentVLNV):
        return _pythonAPI.PythonAPI_openComponent(self, componentVLNV)

    def closeOpenComponent(self):
        return _pythonAPI.PythonAPI_closeOpenComponent(self)

    def getComponentName(self):
        return _pythonAPI.PythonAPI_getComponentName(self)

    def getComponentDescription(self):
        return _pythonAPI.PythonAPI_getComponentDescription(self)

    def saveComponent(self):
        return _pythonAPI.PythonAPI_saveComponent(self)

    def getPortsInterface(self):
        return _pythonAPI.PythonAPI_getPortsInterface(self)

    def getComponentParameterInterface(self):
        return _pythonAPI.PythonAPI_getComponentParameterInterface(self)

    def getFieldInterfaces(self):
        return _pythonAPI.PythonAPI_getFieldInterfaces(self)

# Register PythonAPI in _pythonAPI:
_pythonAPI.PythonAPI_swigregister(PythonAPI)

class ParameterizableInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pythonAPI.delete_ParameterizableInterface

    def setExpressionParser(self, parser):
        return _pythonAPI.ParameterizableInterface_setExpressionParser(self, parser)

    def setExpressionFormatter(self, formatter):
        return _pythonAPI.ParameterizableInterface_setExpressionFormatter(self, formatter)

    def getItemIndex(self, itemName):
        return _pythonAPI.ParameterizableInterface_getItemIndex(self, itemName)

    def getIndexedItemName(self, itemIndex):
        return _pythonAPI.ParameterizableInterface_getIndexedItemName(self, itemIndex)

    def itemCount(self):
        return _pythonAPI.ParameterizableInterface_itemCount(self)

    def getItemNames(self):
        return _pythonAPI.ParameterizableInterface_getItemNames(self)

    def setName(self, currentName, newName):
        return _pythonAPI.ParameterizableInterface_setName(self, currentName, newName)

    def getDescription(self, itemName):
        return _pythonAPI.ParameterizableInterface_getDescription(self, itemName)

    def setDescription(self, itemName, newDescription):
        return _pythonAPI.ParameterizableInterface_setDescription(self, itemName, newDescription)

    def getAllReferencesToIdInItem(self, itemName, valueID):
        return _pythonAPI.ParameterizableInterface_getAllReferencesToIdInItem(self, itemName, valueID)

    def validateItems(self):
        return _pythonAPI.ParameterizableInterface_validateItems(self)

    def itemHasValidName(self, itemName):
        return _pythonAPI.ParameterizableInterface_itemHasValidName(self, itemName)

# Register ParameterizableInterface in _pythonAPI:
_pythonAPI.ParameterizableInterface_swigregister(ParameterizableInterface)

class PortsInterface(ParameterizableInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pythonAPI.PortsInterface_swiginit(self, _pythonAPI.new_PortsInterface())
    __swig_destroy__ = _pythonAPI.delete_PortsInterface

    def setPorts(self, component):
        return _pythonAPI.PortsInterface_setPorts(self, component)

    def setValidator(self, validator):
        return _pythonAPI.PortsInterface_setValidator(self, validator)

    def getItemIndex(self, itemName):
        return _pythonAPI.PortsInterface_getItemIndex(self, itemName)

    def getIndexedItemName(self, itemIndex):
        return _pythonAPI.PortsInterface_getIndexedItemName(self, itemIndex)

    def itemCount(self):
        return _pythonAPI.PortsInterface_itemCount(self)

    def getItemNames(self):
        return _pythonAPI.PortsInterface_getItemNames(self)

    def setName(self, currentName, newName):
        return _pythonAPI.PortsInterface_setName(self, currentName, newName)

    def getDescription(self, itemName):
        return _pythonAPI.PortsInterface_getDescription(self, itemName)

    def setDescription(self, itemName, newDescription):
        return _pythonAPI.PortsInterface_setDescription(self, itemName, newDescription)

    def getAllReferencesToIdInItem(self, itemName, valueID):
        return _pythonAPI.PortsInterface_getAllReferencesToIdInItem(self, itemName, valueID)

    def validateItems(self):
        return _pythonAPI.PortsInterface_validateItems(self)

    def itemHasValidName(self, itemName):
        return _pythonAPI.PortsInterface_itemHasValidName(self, itemName)

    def getTypeName(self, portName):
        return _pythonAPI.PortsInterface_getTypeName(self, portName)

    def setTypeName(self, portName, newType):
        return _pythonAPI.PortsInterface_setTypeName(self, portName, newType)

    def getArrayLeftValue(self, portName, baseNumber=0):
        return _pythonAPI.PortsInterface_getArrayLeftValue(self, portName, baseNumber)

    def getArrayLeftFormattedExpression(self, portName):
        return _pythonAPI.PortsInterface_getArrayLeftFormattedExpression(self, portName)

    def getArrayLeftExpression(self, portName):
        return _pythonAPI.PortsInterface_getArrayLeftExpression(self, portName)

    def setArrayLeft(self, portName, newArrayLeft):
        return _pythonAPI.PortsInterface_setArrayLeft(self, portName, newArrayLeft)

    def getArrayRightValue(self, portName, baseNumber=0):
        return _pythonAPI.PortsInterface_getArrayRightValue(self, portName, baseNumber)

    def getArrayRightFormattedExpression(self, portName):
        return _pythonAPI.PortsInterface_getArrayRightFormattedExpression(self, portName)

    def getArrayRightExpression(self, portName):
        return _pythonAPI.PortsInterface_getArrayRightExpression(self, portName)

    def setArrayRight(self, portName, newArrayRight):
        return _pythonAPI.PortsInterface_setArrayRight(self, portName, newArrayRight)

    def getTags(self, portName):
        return _pythonAPI.PortsInterface_getTags(self, portName)

    def setTags(self, portName, tagList):
        return _pythonAPI.PortsInterface_setTags(self, portName, tagList)

    def isAdHoc(self, portName):
        return _pythonAPI.PortsInterface_isAdHoc(self, portName)

    def setAdHoc(self, portName, newAdHocVisibility):
        return _pythonAPI.PortsInterface_setAdHoc(self, portName, newAdHocVisibility)

    def getDirection(self, portName):
        return _pythonAPI.PortsInterface_getDirection(self, portName)

    def setDirection(self, portName, newDirection):
        return _pythonAPI.PortsInterface_setDirection(self, portName, newDirection)

    def getLeftBoundValue(self, portName, baseNumber=0):
        return _pythonAPI.PortsInterface_getLeftBoundValue(self, portName, baseNumber)

    def getLeftBoundFormattedExpression(self, portName):
        return _pythonAPI.PortsInterface_getLeftBoundFormattedExpression(self, portName)

    def getLeftBoundExpression(self, portName):
        return _pythonAPI.PortsInterface_getLeftBoundExpression(self, portName)

    def setLeftBound(self, portName, newLeftBound):
        return _pythonAPI.PortsInterface_setLeftBound(self, portName, newLeftBound)

    def getRightBoundValue(self, portName, baseNumber=0):
        return _pythonAPI.PortsInterface_getRightBoundValue(self, portName, baseNumber)

    def getRightBoundFormattedExpression(self, portName):
        return _pythonAPI.PortsInterface_getRightBoundFormattedExpression(self, portName)

    def getRightBoundExpression(self, portName):
        return _pythonAPI.PortsInterface_getRightBoundExpression(self, portName)

    def setRightBound(self, portName, newRightBound):
        return _pythonAPI.PortsInterface_setRightBound(self, portName, newRightBound)

    def hasExpressionInLeftOrRightBound(self, portName):
        return _pythonAPI.PortsInterface_hasExpressionInLeftOrRightBound(self, portName)

    def getWidth(self, portName):
        return _pythonAPI.PortsInterface_getWidth(self, portName)

    def setWidth(self, portName, newWidth):
        return _pythonAPI.PortsInterface_setWidth(self, portName, newWidth)

    def getDefaultValue(self, portName, baseNumber=0):
        return _pythonAPI.PortsInterface_getDefaultValue(self, portName, baseNumber)

    def getDefaultValueFormattedExpression(self, portName):
        return _pythonAPI.PortsInterface_getDefaultValueFormattedExpression(self, portName)

    def getDefaultValueExpression(self, portName):
        return _pythonAPI.PortsInterface_getDefaultValueExpression(self, portName)

    def setDefaultValue(self, portName, newDefaultValue):
        return _pythonAPI.PortsInterface_setDefaultValue(self, portName, newDefaultValue)

    def getBusWidthValue(self, portName, baseNumber=0):
        return _pythonAPI.PortsInterface_getBusWidthValue(self, portName, baseNumber)

    def getBusWidthFormattedExpression(self, portName):
        return _pythonAPI.PortsInterface_getBusWidthFormattedExpression(self, portName)

    def getBusWidthExpression(self, portName):
        return _pythonAPI.PortsInterface_getBusWidthExpression(self, portName)

    def setBusWidth(self, portName, newBusWidth):
        return _pythonAPI.PortsInterface_setBusWidth(self, portName, newBusWidth)

    def getInitiative(self, portName):
        return _pythonAPI.PortsInterface_getInitiative(self, portName)

    def setInitiative(self, portName, newInitiative):
        return _pythonAPI.PortsInterface_setInitiative(self, portName, newInitiative)

    def getKind(self, portName):
        return _pythonAPI.PortsInterface_getKind(self, portName)

    def setKind(self, portName, newKind):
        return _pythonAPI.PortsInterface_setKind(self, portName, newKind)

    def getProtocolType(self, portName):
        return _pythonAPI.PortsInterface_getProtocolType(self, portName)

    def setProtocolType(self, portName, newProtocolType):
        return _pythonAPI.PortsInterface_setProtocolType(self, portName, newProtocolType)

    def getMaxConnectionsValue(self, portName, baseNumber=0):
        return _pythonAPI.PortsInterface_getMaxConnectionsValue(self, portName, baseNumber)

    def getMaxConnectionsFormattedExpression(self, portName):
        return _pythonAPI.PortsInterface_getMaxConnectionsFormattedExpression(self, portName)

    def getMaxConnectionsExpression(self, portName):
        return _pythonAPI.PortsInterface_getMaxConnectionsExpression(self, portName)

    def setMaxConnections(self, portName, newMaxConnections):
        return _pythonAPI.PortsInterface_setMaxConnections(self, portName, newMaxConnections)

    def getMinConnectionsValue(self, portName, baseNumber=0):
        return _pythonAPI.PortsInterface_getMinConnectionsValue(self, portName, baseNumber)

    def getMinConnectionsFormattedExpression(self, portName):
        return _pythonAPI.PortsInterface_getMinConnectionsFormattedExpression(self, portName)

    def getMinConnectionsExpression(self, portName):
        return _pythonAPI.PortsInterface_getMinConnectionsExpression(self, portName)

    def setMinConnections(self, portName, newMinConnections):
        return _pythonAPI.PortsInterface_setMinConnections(self, portName, newMinConnections)

    def addWirePort(self, *args):
        return _pythonAPI.PortsInterface_addWirePort(self, *args)

    def addTransactionalPort(self, *args):
        return _pythonAPI.PortsInterface_addTransactionalPort(self, *args)

    def removePort(self, portName):
        return _pythonAPI.PortsInterface_removePort(self, portName)

    def portLeftArrayValueIsValid(self, portName):
        return _pythonAPI.PortsInterface_portLeftArrayValueIsValid(self, portName)

    def portRightArrayValueIsValid(self, portName):
        return _pythonAPI.PortsInterface_portRightArrayValueIsValid(self, portName)

    def portHasValidTypes(self, portName):
        return _pythonAPI.PortsInterface_portHasValidTypes(self, portName)

    def portIsWire(self, portName):
        return _pythonAPI.PortsInterface_portIsWire(self, portName)

    def portHasValidLeftBound(self, portName):
        return _pythonAPI.PortsInterface_portHasValidLeftBound(self, portName)

    def portHasValidRightBound(self, portName):
        return _pythonAPI.PortsInterface_portHasValidRightBound(self, portName)

    def portHasValidDefaultValue(self, portName):
        return _pythonAPI.PortsInterface_portHasValidDefaultValue(self, portName)

    def portIsTransactional(self, portName):
        return _pythonAPI.PortsInterface_portIsTransactional(self, portName)

    def portHasValidBusWidth(self, portName):
        return _pythonAPI.PortsInterface_portHasValidBusWidth(self, portName)

    def portHasValidInitiative(self, portName):
        return _pythonAPI.PortsInterface_portHasValidInitiative(self, portName)

    def portHasValidKind(self, portName):
        return _pythonAPI.PortsInterface_portHasValidKind(self, portName)

    def portHasValidProtocol(self, portName):
        return _pythonAPI.PortsInterface_portHasValidProtocol(self, portName)

    def portHasValidMaxConnections(self, portName):
        return _pythonAPI.PortsInterface_portHasValidMaxConnections(self, portName)

    def portHasValidMinConnections(self, portName):
        return _pythonAPI.PortsInterface_portHasValidMinConnections(self, portName)

# Register PortsInterface in _pythonAPI:
_pythonAPI.PortsInterface_swigregister(PortsInterface)

class ParametersInterface(ParameterizableInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pythonAPI.ParametersInterface_swiginit(self, _pythonAPI.new_ParametersInterface())
    __swig_destroy__ = _pythonAPI.delete_ParametersInterface

    def setParameters(self, newParameters):
        return _pythonAPI.ParametersInterface_setParameters(self, newParameters)

    def setModuleParameters(self, newParameters):
        return _pythonAPI.ParametersInterface_setModuleParameters(self, newParameters)

    def setChoices(self, newChoices):
        return _pythonAPI.ParametersInterface_setChoices(self, newChoices)

    def setValidator(self, validator):
        return _pythonAPI.ParametersInterface_setValidator(self, validator)

    def getItemIndex(self, itemName):
        return _pythonAPI.ParametersInterface_getItemIndex(self, itemName)

    def getIndexedItemName(self, itemIndex):
        return _pythonAPI.ParametersInterface_getIndexedItemName(self, itemIndex)

    def itemCount(self):
        return _pythonAPI.ParametersInterface_itemCount(self)

    def getItemNames(self):
        return _pythonAPI.ParametersInterface_getItemNames(self)

    def setName(self, currentName, newName):
        return _pythonAPI.ParametersInterface_setName(self, currentName, newName)

    def getDescription(self, itemName):
        return _pythonAPI.ParametersInterface_getDescription(self, itemName)

    def setDescription(self, itemName, newDescription):
        return _pythonAPI.ParametersInterface_setDescription(self, itemName, newDescription)

    def getAllReferencesToIdInItem(self, itemName, valueID):
        return _pythonAPI.ParametersInterface_getAllReferencesToIdInItem(self, itemName, valueID)

    def validateItems(self):
        return _pythonAPI.ParametersInterface_validateItems(self)

    def itemHasValidName(self, itemName):
        return _pythonAPI.ParametersInterface_itemHasValidName(self, itemName)

    def getDisplayName(self, parameterName):
        return _pythonAPI.ParametersInterface_getDisplayName(self, parameterName)

    def setDisplayName(self, parameterName, newDisplayName):
        return _pythonAPI.ParametersInterface_setDisplayName(self, parameterName, newDisplayName)

    def getType(self, parameterName):
        return _pythonAPI.ParametersInterface_getType(self, parameterName)

    def setType(self, parameterName, newType):
        return _pythonAPI.ParametersInterface_setType(self, parameterName, newType)

    def getBitWidthLeftValue(self, parameterName, baseNumber=0):
        return _pythonAPI.ParametersInterface_getBitWidthLeftValue(self, parameterName, baseNumber)

    def getBitWidthLeftFormattedExpression(self, parameterName):
        return _pythonAPI.ParametersInterface_getBitWidthLeftFormattedExpression(self, parameterName)

    def getBitWidthLeftExpression(self, parameterName):
        return _pythonAPI.ParametersInterface_getBitWidthLeftExpression(self, parameterName)

    def setBitWidthLeft(self, parameterName, newBitWidthLeft):
        return _pythonAPI.ParametersInterface_setBitWidthLeft(self, parameterName, newBitWidthLeft)

    def getBitWidthRightValue(self, parameterName, baseNumber=0):
        return _pythonAPI.ParametersInterface_getBitWidthRightValue(self, parameterName, baseNumber)

    def getBitWidthRightFormattedExpression(self, parameterName):
        return _pythonAPI.ParametersInterface_getBitWidthRightFormattedExpression(self, parameterName)

    def getBitWidthRightExpression(self, parameterName):
        return _pythonAPI.ParametersInterface_getBitWidthRightExpression(self, parameterName)

    def setBitWidthRight(self, parameterName, newBitWidthRight):
        return _pythonAPI.ParametersInterface_setBitWidthRight(self, parameterName, newBitWidthRight)

    def getMinimum(self, parameterName):
        return _pythonAPI.ParametersInterface_getMinimum(self, parameterName)

    def setMinimum(self, parameterName, newMinimum):
        return _pythonAPI.ParametersInterface_setMinimum(self, parameterName, newMinimum)

    def getMaximum(self, parameterName):
        return _pythonAPI.ParametersInterface_getMaximum(self, parameterName)

    def setMaximum(self, parameterName, newMaximum):
        return _pythonAPI.ParametersInterface_setMaximum(self, parameterName, newMaximum)

    def getChoice(self, parameterName):
        return _pythonAPI.ParametersInterface_getChoice(self, parameterName)

    def setChoice(self, parameterName, newChoice):
        return _pythonAPI.ParametersInterface_setChoice(self, parameterName, newChoice)

    def getValue(self, parameterName, baseNumber=0):
        return _pythonAPI.ParametersInterface_getValue(self, parameterName, baseNumber)

    def getValueFormattedExpression(self, parameterName):
        return _pythonAPI.ParametersInterface_getValueFormattedExpression(self, parameterName)

    def getValueExpression(self, parameterName):
        return _pythonAPI.ParametersInterface_getValueExpression(self, parameterName)

    def setValue(self, parameterName, newValue):
        return _pythonAPI.ParametersInterface_setValue(self, parameterName, newValue)

    def getResolve(self, parameterName):
        return _pythonAPI.ParametersInterface_getResolve(self, parameterName)

    def setResolve(self, parameterName, newResolve):
        return _pythonAPI.ParametersInterface_setResolve(self, parameterName, newResolve)

    def getArrayLeftValue(self, parameterName, baseNumber=0):
        return _pythonAPI.ParametersInterface_getArrayLeftValue(self, parameterName, baseNumber)

    def getArrayLeftFormattedExpression(self, parameterName):
        return _pythonAPI.ParametersInterface_getArrayLeftFormattedExpression(self, parameterName)

    def getArrayLeftExpression(self, parameterName):
        return _pythonAPI.ParametersInterface_getArrayLeftExpression(self, parameterName)

    def setArrayLeft(self, parameterName, newArrayLeft):
        return _pythonAPI.ParametersInterface_setArrayLeft(self, parameterName, newArrayLeft)

    def getArrayRightValue(self, parameterName, baseNumber=0):
        return _pythonAPI.ParametersInterface_getArrayRightValue(self, parameterName, baseNumber)

    def getArrayRightFormattedExpression(self, parameterName):
        return _pythonAPI.ParametersInterface_getArrayRightFormattedExpression(self, parameterName)

    def getArrayRightExpression(self, parameterName):
        return _pythonAPI.ParametersInterface_getArrayRightExpression(self, parameterName)

    def setArrayRight(self, parameterName, newArrayRight):
        return _pythonAPI.ParametersInterface_setArrayRight(self, parameterName, newArrayRight)

    def getID(self, parameterName):
        return _pythonAPI.ParametersInterface_getID(self, parameterName)

    def setID(self, parameterName, newID):
        return _pythonAPI.ParametersInterface_setID(self, parameterName, newID)

    def getUsageCount(self, parameterName):
        return _pythonAPI.ParametersInterface_getUsageCount(self, parameterName)

    def setUsageCount(self, parameterName, newUsageCount):
        return _pythonAPI.ParametersInterface_setUsageCount(self, parameterName, newUsageCount)

    def getDataType(self, parameterName):
        return _pythonAPI.ParametersInterface_getDataType(self, parameterName)

    def setDataType(self, parameterName, newDataType):
        return _pythonAPI.ParametersInterface_setDataType(self, parameterName, newDataType)

    def getUsageType(self, parameterName):
        return _pythonAPI.ParametersInterface_getUsageType(self, parameterName)

    def setUsageType(self, parameterName, newUsageType):
        return _pythonAPI.ParametersInterface_setUsageType(self, parameterName, newUsageType)

    def increaseUsageCount(self, parameterName):
        return _pythonAPI.ParametersInterface_increaseUsageCount(self, parameterName)

    def reduceUsageCount(self, parameterName):
        return _pythonAPI.ParametersInterface_reduceUsageCount(self, parameterName)

    def addParameter(self, *args):
        return _pythonAPI.ParametersInterface_addParameter(self, *args)

    def addModuleParameter(self, *args):
        return _pythonAPI.ParametersInterface_addModuleParameter(self, *args)

    def removeParameter(self, parameterName):
        return _pythonAPI.ParametersInterface_removeParameter(self, parameterName)

    def removeModuleParameter(self, parameterName):
        return _pythonAPI.ParametersInterface_removeModuleParameter(self, parameterName)

    def hasValidType(self, parameterName):
        return _pythonAPI.ParametersInterface_hasValidType(self, parameterName)

    def hasValidBitWidth(self, parameterName):
        return _pythonAPI.ParametersInterface_hasValidBitWidth(self, parameterName)

    def hasValidMinimum(self, parameterName):
        return _pythonAPI.ParametersInterface_hasValidMinimum(self, parameterName)

    def hasValidMaximum(self, parameterName):
        return _pythonAPI.ParametersInterface_hasValidMaximum(self, parameterName)

    def hasValidChoice(self, parameterName):
        return _pythonAPI.ParametersInterface_hasValidChoice(self, parameterName)

    def hasValidValue(self, parameterName):
        return _pythonAPI.ParametersInterface_hasValidValue(self, parameterName)

    def hasValidResolve(self, parameterName):
        return _pythonAPI.ParametersInterface_hasValidResolve(self, parameterName)

    def hasValidArrayValues(self, parameterName):
        return _pythonAPI.ParametersInterface_hasValidArrayValues(self, parameterName)

# Register ParametersInterface in _pythonAPI:
_pythonAPI.ParametersInterface_swigregister(ParametersInterface)

class FieldInterface(ParameterizableInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pythonAPI.FieldInterface_swiginit(self, _pythonAPI.new_FieldInterface())
    __swig_destroy__ = _pythonAPI.delete_FieldInterface

    def setFields(self, newFields):
        return _pythonAPI.FieldInterface_setFields(self, newFields)

    def setValidator(self, validator):
        return _pythonAPI.FieldInterface_setValidator(self, validator)

    def getItemIndex(self, itemName):
        return _pythonAPI.FieldInterface_getItemIndex(self, itemName)

    def getIndexedItemName(self, itemIndex):
        return _pythonAPI.FieldInterface_getIndexedItemName(self, itemIndex)

    def itemCount(self):
        return _pythonAPI.FieldInterface_itemCount(self)

    def getItemNames(self):
        return _pythonAPI.FieldInterface_getItemNames(self)

    def setName(self, currentName, newName):
        return _pythonAPI.FieldInterface_setName(self, currentName, newName)

    def getDescription(self, itemName):
        return _pythonAPI.FieldInterface_getDescription(self, itemName)

    def setDescription(self, itemName, newDescription):
        return _pythonAPI.FieldInterface_setDescription(self, itemName, newDescription)

    def getOffsetValue(self, fieldName, baseNumber=0):
        return _pythonAPI.FieldInterface_getOffsetValue(self, fieldName, baseNumber)

    def getOffsetFormattedExpression(self, fieldName):
        return _pythonAPI.FieldInterface_getOffsetFormattedExpression(self, fieldName)

    def getOffsetExpression(self, fieldName):
        return _pythonAPI.FieldInterface_getOffsetExpression(self, fieldName)

    def setOffset(self, fieldName, newOffset):
        return _pythonAPI.FieldInterface_setOffset(self, fieldName, newOffset)

    def getWidthValue(self, fieldName, baseNumber=0):
        return _pythonAPI.FieldInterface_getWidthValue(self, fieldName, baseNumber)

    def getWidthFormattedExpression(self, fieldName):
        return _pythonAPI.FieldInterface_getWidthFormattedExpression(self, fieldName)

    def getWidthExpression(self, fieldName):
        return _pythonAPI.FieldInterface_getWidthExpression(self, fieldName)

    def setWidth(self, fieldName, newWidth):
        return _pythonAPI.FieldInterface_setWidth(self, fieldName, newWidth)

    def getResets(self, fieldName):
        return _pythonAPI.FieldInterface_getResets(self, fieldName)

    def getResetsToolTip(self, fieldName):
        return _pythonAPI.FieldInterface_getResetsToolTip(self, fieldName)

    def getVolatile(self, fieldName):
        return _pythonAPI.FieldInterface_getVolatile(self, fieldName)

    def setVolatile(self, fieldName, newVolatile):
        return _pythonAPI.FieldInterface_setVolatile(self, fieldName, newVolatile)

    def getAccess(self, fieldName):
        return _pythonAPI.FieldInterface_getAccess(self, fieldName)

    def setAccess(self, fieldName, newAccess):
        return _pythonAPI.FieldInterface_setAccess(self, fieldName, newAccess)

    def getModifiedWrite(self, fieldName):
        return _pythonAPI.FieldInterface_getModifiedWrite(self, fieldName)

    def setModifiedWrite(self, fieldName, newModifiedWrite):
        return _pythonAPI.FieldInterface_setModifiedWrite(self, fieldName, newModifiedWrite)

    def getReadAction(self, fieldName):
        return _pythonAPI.FieldInterface_getReadAction(self, fieldName)

    def setReadAction(self, fieldName, newReadAction):
        return _pythonAPI.FieldInterface_setReadAction(self, fieldName, newReadAction)

    def getTestableValue(self, fieldName):
        return _pythonAPI.FieldInterface_getTestableValue(self, fieldName)

    def getTestableBool(self, fieldName):
        return _pythonAPI.FieldInterface_getTestableBool(self, fieldName)

    def setTestable(self, fieldName, newTestable):
        return _pythonAPI.FieldInterface_setTestable(self, fieldName, newTestable)

    def getTestConstraint(self, fieldName):
        return _pythonAPI.FieldInterface_getTestConstraint(self, fieldName)

    def setTestConstraint(self, fieldName, newTestConstraint):
        return _pythonAPI.FieldInterface_setTestConstraint(self, fieldName, newTestConstraint)

    def getIsPresentValue(self, fieldName, baseNumber=0):
        return _pythonAPI.FieldInterface_getIsPresentValue(self, fieldName, baseNumber)

    def getIsPresentFormattedExpression(self, fieldName):
        return _pythonAPI.FieldInterface_getIsPresentFormattedExpression(self, fieldName)

    def getIsPresentExpression(self, fieldName):
        return _pythonAPI.FieldInterface_getIsPresentExpression(self, fieldName)

    def setIsPresent(self, fieldName, newIsPresent):
        return _pythonAPI.FieldInterface_setIsPresent(self, fieldName, newIsPresent)

    def getAllReferencesToIdInItem(self, itemName, valueID):
        return _pythonAPI.FieldInterface_getAllReferencesToIdInItem(self, itemName, valueID)

    def validateItems(self):
        return _pythonAPI.FieldInterface_validateItems(self)

    def itemHasValidName(self, itemName):
        return _pythonAPI.FieldInterface_itemHasValidName(self, itemName)

    def hasValidOffset(self, fieldName):
        return _pythonAPI.FieldInterface_hasValidOffset(self, fieldName)

    def hasValidWidth(self, fieldName):
        return _pythonAPI.FieldInterface_hasValidWidth(self, fieldName)

    def hasValidResets(self, fieldName):
        return _pythonAPI.FieldInterface_hasValidResets(self, fieldName)

    def hasValidIsPresent(self, fieldName):
        return _pythonAPI.FieldInterface_hasValidIsPresent(self, fieldName)

    def hasValidAccess(self, fieldName):
        return _pythonAPI.FieldInterface_hasValidAccess(self, fieldName)

    def addField(self, *args):
        return _pythonAPI.FieldInterface_addField(self, *args)

    def removeField(self, fieldName):
        return _pythonAPI.FieldInterface_removeField(self, fieldName)

    def copyRows(self, selectedRows):
        return _pythonAPI.FieldInterface_copyRows(self, selectedRows)

    def pasteRows(self):
        return _pythonAPI.FieldInterface_pasteRows(self)

    def getPasteRowCount(self):
        return _pythonAPI.FieldInterface_getPasteRowCount(self)

    def getExpressionsInSelectedFields(self, fieldNames):
        return _pythonAPI.FieldInterface_getExpressionsInSelectedFields(self, fieldNames)

# Register FieldInterface in _pythonAPI:
_pythonAPI.FieldInterface_swigregister(FieldInterface)



