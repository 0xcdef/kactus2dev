# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pythonAPI
else:
    import _pythonAPI

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _pythonAPI.SWIG_PyInstanceMethod_New
_swig_new_static_method = _pythonAPI.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pythonAPI.delete_SwigPyIterator
    value = _swig_new_instance_method(_pythonAPI.SwigPyIterator_value)
    incr = _swig_new_instance_method(_pythonAPI.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_pythonAPI.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_pythonAPI.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_pythonAPI.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_pythonAPI.SwigPyIterator_copy)
    next = _swig_new_instance_method(_pythonAPI.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_pythonAPI.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_pythonAPI.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_pythonAPI.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_pythonAPI.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_pythonAPI.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_pythonAPI.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_pythonAPI.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_pythonAPI.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_pythonAPI.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pythonAPI:
_pythonAPI.SwigPyIterator_swigregister(SwigPyIterator)

class QString(object):
    r"""Proxy of C++ QString class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fromStdString = _swig_new_static_method(_pythonAPI.QString_fromStdString)
    toStdString = _swig_new_instance_method(_pythonAPI.QString_toStdString)
    size = _swig_new_instance_method(_pythonAPI.QString_size)
    count = _swig_new_instance_method(_pythonAPI.QString_count)
    length = _swig_new_instance_method(_pythonAPI.QString_length)
    isEmpty = _swig_new_instance_method(_pythonAPI.QString_isEmpty)

    def __init__(self):
        r"""__init__(QString self) -> QString"""
        _pythonAPI.QString_swiginit(self, _pythonAPI.new_QString())
    __swig_destroy__ = _pythonAPI.delete_QString

# Register QString in _pythonAPI:
_pythonAPI.QString_swigregister(QString)
QString_fromStdString = _pythonAPI.QString_fromStdString

class NameGroup(object):
    r"""Proxy of C++ NameGroup class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(NameGroup self) -> NameGroup
        __init__(NameGroup self, QString name, QString displayName=QString(), QString description=QString()) -> NameGroup

        Parameters
        ----------
        name: QString const &
        displayName: QString const &
        description: QString const &

        __init__(NameGroup self, NameGroup other) -> NameGroup

        Parameters
        ----------
        other: NameGroup const &

        """
        _pythonAPI.NameGroup_swiginit(self, _pythonAPI.new_NameGroup(*args))
    __swig_destroy__ = _pythonAPI.delete_NameGroup
    name = _swig_new_instance_method(_pythonAPI.NameGroup_name)
    displayName = _swig_new_instance_method(_pythonAPI.NameGroup_displayName)
    description = _swig_new_instance_method(_pythonAPI.NameGroup_description)

# Register NameGroup in _pythonAPI:
_pythonAPI.NameGroup_swigregister(NameGroup)

class stringVector(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_pythonAPI.stringVector_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_pythonAPI.stringVector___nonzero__)
    __bool__ = _swig_new_instance_method(_pythonAPI.stringVector___bool__)
    __len__ = _swig_new_instance_method(_pythonAPI.stringVector___len__)
    __getslice__ = _swig_new_instance_method(_pythonAPI.stringVector___getslice__)
    __setslice__ = _swig_new_instance_method(_pythonAPI.stringVector___setslice__)
    __delslice__ = _swig_new_instance_method(_pythonAPI.stringVector___delslice__)
    __delitem__ = _swig_new_instance_method(_pythonAPI.stringVector___delitem__)
    __getitem__ = _swig_new_instance_method(_pythonAPI.stringVector___getitem__)
    __setitem__ = _swig_new_instance_method(_pythonAPI.stringVector___setitem__)
    pop = _swig_new_instance_method(_pythonAPI.stringVector_pop)
    append = _swig_new_instance_method(_pythonAPI.stringVector_append)
    empty = _swig_new_instance_method(_pythonAPI.stringVector_empty)
    size = _swig_new_instance_method(_pythonAPI.stringVector_size)
    swap = _swig_new_instance_method(_pythonAPI.stringVector_swap)
    begin = _swig_new_instance_method(_pythonAPI.stringVector_begin)
    end = _swig_new_instance_method(_pythonAPI.stringVector_end)
    rbegin = _swig_new_instance_method(_pythonAPI.stringVector_rbegin)
    rend = _swig_new_instance_method(_pythonAPI.stringVector_rend)
    clear = _swig_new_instance_method(_pythonAPI.stringVector_clear)
    get_allocator = _swig_new_instance_method(_pythonAPI.stringVector_get_allocator)
    pop_back = _swig_new_instance_method(_pythonAPI.stringVector_pop_back)
    erase = _swig_new_instance_method(_pythonAPI.stringVector_erase)

    def __init__(self, *args):
        r"""
        __init__(stringVector self) -> stringVector
        __init__(stringVector self, stringVector other) -> stringVector

        Parameters
        ----------
        other: std::vector< std::string > const &

        __init__(stringVector self, std::vector< std::string >::size_type size) -> stringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(stringVector self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> stringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        _pythonAPI.stringVector_swiginit(self, _pythonAPI.new_stringVector(*args))
    push_back = _swig_new_instance_method(_pythonAPI.stringVector_push_back)
    front = _swig_new_instance_method(_pythonAPI.stringVector_front)
    back = _swig_new_instance_method(_pythonAPI.stringVector_back)
    assign = _swig_new_instance_method(_pythonAPI.stringVector_assign)
    resize = _swig_new_instance_method(_pythonAPI.stringVector_resize)
    insert = _swig_new_instance_method(_pythonAPI.stringVector_insert)
    reserve = _swig_new_instance_method(_pythonAPI.stringVector_reserve)
    capacity = _swig_new_instance_method(_pythonAPI.stringVector_capacity)
    __swig_destroy__ = _pythonAPI.delete_stringVector

# Register stringVector in _pythonAPI:
_pythonAPI.stringVector_swigregister(stringVector)

class PythonAPI(object):
    r"""Proxy of C++ PythonAPI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PythonAPI self) -> PythonAPI"""
        _pythonAPI.PythonAPI_swiginit(self, _pythonAPI.new_PythonAPI())
    __swig_destroy__ = _pythonAPI.delete_PythonAPI
    getVersion = _swig_new_instance_method(_pythonAPI.PythonAPI_getVersion)
    getLibraryPaths = _swig_new_instance_method(_pythonAPI.PythonAPI_getLibraryPaths)
    setLibraryPaths = _swig_new_instance_method(_pythonAPI.PythonAPI_setLibraryPaths)
    getDefaultLibraryPath = _swig_new_instance_method(_pythonAPI.PythonAPI_getDefaultLibraryPath)
    setDefaultLibraryPath = _swig_new_instance_method(_pythonAPI.PythonAPI_setDefaultLibraryPath)
    importFile = _swig_new_instance_method(_pythonAPI.PythonAPI_importFile)
    generate = _swig_new_instance_method(_pythonAPI.PythonAPI_generate)
    getFileCount = _swig_new_instance_method(_pythonAPI.PythonAPI_getFileCount)
    listVLNVs = _swig_new_instance_method(_pythonAPI.PythonAPI_listVLNVs)
    listComponentVLNVs = _swig_new_instance_method(_pythonAPI.PythonAPI_listComponentVLNVs)
    openComponent = _swig_new_instance_method(_pythonAPI.PythonAPI_openComponent)
    closeOpenComponent = _swig_new_instance_method(_pythonAPI.PythonAPI_closeOpenComponent)
    getComponentName = _swig_new_instance_method(_pythonAPI.PythonAPI_getComponentName)
    getComponentDescription = _swig_new_instance_method(_pythonAPI.PythonAPI_getComponentDescription)
    saveComponent = _swig_new_instance_method(_pythonAPI.PythonAPI_saveComponent)
    getPortsInterface = _swig_new_instance_method(_pythonAPI.PythonAPI_getPortsInterface)
    getComponentParameterInterface = _swig_new_instance_method(_pythonAPI.PythonAPI_getComponentParameterInterface)
    getMapInterface = _swig_new_instance_method(_pythonAPI.PythonAPI_getMapInterface)
    setBlocksForInterface = _swig_new_instance_method(_pythonAPI.PythonAPI_setBlocksForInterface)
    setRegistersForInterface = _swig_new_instance_method(_pythonAPI.PythonAPI_setRegistersForInterface)
    setFieldsForInterface = _swig_new_instance_method(_pythonAPI.PythonAPI_setFieldsForInterface)
    setResetsForInterface = _swig_new_instance_method(_pythonAPI.PythonAPI_setResetsForInterface)

# Register PythonAPI in _pythonAPI:
_pythonAPI.PythonAPI_swigregister(PythonAPI)

class CommonInterface(object):
    r"""Proxy of C++ CommonInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pythonAPI.delete_CommonInterface
    getItemNames = _swig_new_instance_method(_pythonAPI.CommonInterface_getItemNames)
    itemCount = _swig_new_instance_method(_pythonAPI.CommonInterface_itemCount)
    validateItems = _swig_new_instance_method(_pythonAPI.CommonInterface_validateItems)

# Register CommonInterface in _pythonAPI:
_pythonAPI.CommonInterface_swigregister(CommonInterface)

class NameGroupInterface(CommonInterface):
    r"""Proxy of C++ NameGroupInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pythonAPI.delete_NameGroupInterface
    getItemIndex = _swig_new_instance_method(_pythonAPI.NameGroupInterface_getItemIndex)
    getIndexedItemName = _swig_new_instance_method(_pythonAPI.NameGroupInterface_getIndexedItemName)
    setName = _swig_new_instance_method(_pythonAPI.NameGroupInterface_setName)
    getDescription = _swig_new_instance_method(_pythonAPI.NameGroupInterface_getDescription)
    setDescription = _swig_new_instance_method(_pythonAPI.NameGroupInterface_setDescription)
    itemHasValidName = _swig_new_instance_method(_pythonAPI.NameGroupInterface_itemHasValidName)

# Register NameGroupInterface in _pythonAPI:
_pythonAPI.NameGroupInterface_swigregister(NameGroupInterface)

class ParameterizableInterface(object):
    r"""Proxy of C++ ParameterizableInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pythonAPI.delete_ParameterizableInterface
    getAllReferencesToIdInItem = _swig_new_instance_method(_pythonAPI.ParameterizableInterface_getAllReferencesToIdInItem)

# Register ParameterizableInterface in _pythonAPI:
_pythonAPI.ParameterizableInterface_swigregister(ParameterizableInterface)

class MasterPortInterface(NameGroupInterface):
    r"""Proxy of C++ MasterPortInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pythonAPI.delete_MasterPortInterface
    addWirePort = _swig_new_instance_method(_pythonAPI.MasterPortInterface_addWirePort)
    addTransactionalPort = _swig_new_instance_method(_pythonAPI.MasterPortInterface_addTransactionalPort)
    portIsWire = _swig_new_instance_method(_pythonAPI.MasterPortInterface_portIsWire)
    portIsTransactional = _swig_new_instance_method(_pythonAPI.MasterPortInterface_portIsTransactional)
    getIconPathForMissingPort = _swig_new_instance_method(_pythonAPI.MasterPortInterface_getIconPathForMissingPort)
    getIconPathForDirection = _swig_new_instance_method(_pythonAPI.MasterPortInterface_getIconPathForDirection)
    getIconPathForInitiative = _swig_new_instance_method(_pythonAPI.MasterPortInterface_getIconPathForInitiative)

# Register MasterPortInterface in _pythonAPI:
_pythonAPI.MasterPortInterface_swigregister(MasterPortInterface)

class PortsInterface(ParameterizableInterface, MasterPortInterface):
    r"""Proxy of C++ PortsInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, validator, expressionParser, expressionFormatter):
        r"""
        __init__(PortsInterface self, QSharedPointer< PortValidator > validator, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter) -> PortsInterface

        Parameters
        ----------
        validator: QSharedPointer< PortValidator >
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >

        """
        _pythonAPI.PortsInterface_swiginit(self, _pythonAPI.new_PortsInterface(validator, expressionParser, expressionFormatter))
    __swig_destroy__ = _pythonAPI.delete_PortsInterface
    setPorts = _swig_new_instance_method(_pythonAPI.PortsInterface_setPorts)
    portExists = _swig_new_instance_method(_pythonAPI.PortsInterface_portExists)
    getTypeName = _swig_new_instance_method(_pythonAPI.PortsInterface_getTypeName)
    setTypeName = _swig_new_instance_method(_pythonAPI.PortsInterface_setTypeName)
    getArrayLeftValue = _swig_new_instance_method(_pythonAPI.PortsInterface_getArrayLeftValue)
    getArrayLeftFormattedExpression = _swig_new_instance_method(_pythonAPI.PortsInterface_getArrayLeftFormattedExpression)
    getArrayLeftExpression = _swig_new_instance_method(_pythonAPI.PortsInterface_getArrayLeftExpression)
    setArrayLeft = _swig_new_instance_method(_pythonAPI.PortsInterface_setArrayLeft)
    getArrayRightValue = _swig_new_instance_method(_pythonAPI.PortsInterface_getArrayRightValue)
    getArrayRightFormattedExpression = _swig_new_instance_method(_pythonAPI.PortsInterface_getArrayRightFormattedExpression)
    getArrayRightExpression = _swig_new_instance_method(_pythonAPI.PortsInterface_getArrayRightExpression)
    setArrayRight = _swig_new_instance_method(_pythonAPI.PortsInterface_setArrayRight)
    getTags = _swig_new_instance_method(_pythonAPI.PortsInterface_getTags)
    setTags = _swig_new_instance_method(_pythonAPI.PortsInterface_setTags)
    isAdHoc = _swig_new_instance_method(_pythonAPI.PortsInterface_isAdHoc)
    setAdHoc = _swig_new_instance_method(_pythonAPI.PortsInterface_setAdHoc)
    getDirection = _swig_new_instance_method(_pythonAPI.PortsInterface_getDirection)
    getDirectionType = _swig_new_instance_method(_pythonAPI.PortsInterface_getDirectionType)
    setDirection = _swig_new_instance_method(_pythonAPI.PortsInterface_setDirection)
    getLeftBoundValue = _swig_new_instance_method(_pythonAPI.PortsInterface_getLeftBoundValue)
    getLeftBoundFormattedExpression = _swig_new_instance_method(_pythonAPI.PortsInterface_getLeftBoundFormattedExpression)
    getLeftBoundExpression = _swig_new_instance_method(_pythonAPI.PortsInterface_getLeftBoundExpression)
    setLeftBound = _swig_new_instance_method(_pythonAPI.PortsInterface_setLeftBound)
    getRightBoundValue = _swig_new_instance_method(_pythonAPI.PortsInterface_getRightBoundValue)
    getRightBoundFormattedExpression = _swig_new_instance_method(_pythonAPI.PortsInterface_getRightBoundFormattedExpression)
    getRightBoundExpression = _swig_new_instance_method(_pythonAPI.PortsInterface_getRightBoundExpression)
    setRightBound = _swig_new_instance_method(_pythonAPI.PortsInterface_setRightBound)
    hasExpressionInLeftOrRightBound = _swig_new_instance_method(_pythonAPI.PortsInterface_hasExpressionInLeftOrRightBound)
    getWidth = _swig_new_instance_method(_pythonAPI.PortsInterface_getWidth)
    setWidth = _swig_new_instance_method(_pythonAPI.PortsInterface_setWidth)
    getDefaultValue = _swig_new_instance_method(_pythonAPI.PortsInterface_getDefaultValue)
    getDefaultValueFormattedExpression = _swig_new_instance_method(_pythonAPI.PortsInterface_getDefaultValueFormattedExpression)
    getDefaultValueExpression = _swig_new_instance_method(_pythonAPI.PortsInterface_getDefaultValueExpression)
    setDefaultValue = _swig_new_instance_method(_pythonAPI.PortsInterface_setDefaultValue)
    getBusWidthValue = _swig_new_instance_method(_pythonAPI.PortsInterface_getBusWidthValue)
    getBusWidthFormattedExpression = _swig_new_instance_method(_pythonAPI.PortsInterface_getBusWidthFormattedExpression)
    getBusWidthExpression = _swig_new_instance_method(_pythonAPI.PortsInterface_getBusWidthExpression)
    setBusWidth = _swig_new_instance_method(_pythonAPI.PortsInterface_setBusWidth)
    getInitiative = _swig_new_instance_method(_pythonAPI.PortsInterface_getInitiative)
    setInitiative = _swig_new_instance_method(_pythonAPI.PortsInterface_setInitiative)
    getKind = _swig_new_instance_method(_pythonAPI.PortsInterface_getKind)
    setKind = _swig_new_instance_method(_pythonAPI.PortsInterface_setKind)
    getProtocolType = _swig_new_instance_method(_pythonAPI.PortsInterface_getProtocolType)
    setProtocolType = _swig_new_instance_method(_pythonAPI.PortsInterface_setProtocolType)
    getMaxConnectionsValue = _swig_new_instance_method(_pythonAPI.PortsInterface_getMaxConnectionsValue)
    getMaxConnectionsFormattedExpression = _swig_new_instance_method(_pythonAPI.PortsInterface_getMaxConnectionsFormattedExpression)
    getMaxConnectionsExpression = _swig_new_instance_method(_pythonAPI.PortsInterface_getMaxConnectionsExpression)
    setMaxConnections = _swig_new_instance_method(_pythonAPI.PortsInterface_setMaxConnections)
    getMinConnectionsValue = _swig_new_instance_method(_pythonAPI.PortsInterface_getMinConnectionsValue)
    getMinConnectionsFormattedExpression = _swig_new_instance_method(_pythonAPI.PortsInterface_getMinConnectionsFormattedExpression)
    getMinConnectionsExpression = _swig_new_instance_method(_pythonAPI.PortsInterface_getMinConnectionsExpression)
    setMinConnections = _swig_new_instance_method(_pythonAPI.PortsInterface_setMinConnections)
    addWirePort = _swig_new_instance_method(_pythonAPI.PortsInterface_addWirePort)
    addTransactionalPort = _swig_new_instance_method(_pythonAPI.PortsInterface_addTransactionalPort)
    removePort = _swig_new_instance_method(_pythonAPI.PortsInterface_removePort)
    portLeftArrayValueIsValid = _swig_new_instance_method(_pythonAPI.PortsInterface_portLeftArrayValueIsValid)
    portRightArrayValueIsValid = _swig_new_instance_method(_pythonAPI.PortsInterface_portRightArrayValueIsValid)
    portHasValidTypes = _swig_new_instance_method(_pythonAPI.PortsInterface_portHasValidTypes)
    portHasValidLeftBound = _swig_new_instance_method(_pythonAPI.PortsInterface_portHasValidLeftBound)
    portHasValidRightBound = _swig_new_instance_method(_pythonAPI.PortsInterface_portHasValidRightBound)
    portHasValidDefaultValue = _swig_new_instance_method(_pythonAPI.PortsInterface_portHasValidDefaultValue)
    portHasValidBusWidth = _swig_new_instance_method(_pythonAPI.PortsInterface_portHasValidBusWidth)
    portHasValidInitiative = _swig_new_instance_method(_pythonAPI.PortsInterface_portHasValidInitiative)
    portHasValidKind = _swig_new_instance_method(_pythonAPI.PortsInterface_portHasValidKind)
    portHasValidProtocol = _swig_new_instance_method(_pythonAPI.PortsInterface_portHasValidProtocol)
    portHasValidMaxConnections = _swig_new_instance_method(_pythonAPI.PortsInterface_portHasValidMaxConnections)
    portHasValidMinConnections = _swig_new_instance_method(_pythonAPI.PortsInterface_portHasValidMinConnections)
    getIconPathForPort = _swig_new_instance_method(_pythonAPI.PortsInterface_getIconPathForPort)
    getPort = _swig_new_instance_method(_pythonAPI.PortsInterface_getPort)

# Register PortsInterface in _pythonAPI:
_pythonAPI.PortsInterface_swigregister(PortsInterface)

class AbstractParameterInterface(ParameterizableInterface, NameGroupInterface):
    r"""Proxy of C++ AbstractParameterInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pythonAPI.delete_AbstractParameterInterface
    setChoices = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_setChoices)
    getExpressionsInSelectedItems = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getExpressionsInSelectedItems)
    getDisplayName = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getDisplayName)
    setDisplayName = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_setDisplayName)
    getType = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getType)
    setType = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_setType)
    getBitWidthLeftValue = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getBitWidthLeftValue)
    getBitWidthLeftFormattedExpression = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getBitWidthLeftFormattedExpression)
    getBitWidthLeftExpression = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getBitWidthLeftExpression)
    setBitWidthLeft = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_setBitWidthLeft)
    getBitWidthRightValue = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getBitWidthRightValue)
    getBitWidthRightFormattedExpression = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getBitWidthRightFormattedExpression)
    getBitWidthRightExpression = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getBitWidthRightExpression)
    setBitWidthRight = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_setBitWidthRight)
    getMinimum = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getMinimum)
    setMinimum = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_setMinimum)
    getMaximum = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getMaximum)
    setMaximum = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_setMaximum)
    getChoice = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getChoice)
    setChoice = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_setChoice)
    getValue = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getValue)
    getValueFormattedExpression = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getValueFormattedExpression)
    getValueExpression = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getValueExpression)
    setValue = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_setValue)
    getResolve = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getResolve)
    setResolve = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_setResolve)
    getArrayLeftValue = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getArrayLeftValue)
    getArrayLeftFormattedExpression = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getArrayLeftFormattedExpression)
    getArrayLeftExpression = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getArrayLeftExpression)
    setArrayLeft = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_setArrayLeft)
    getArrayRightValue = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getArrayRightValue)
    getArrayRightFormattedExpression = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getArrayRightFormattedExpression)
    getArrayRightExpression = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getArrayRightExpression)
    setArrayRight = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_setArrayRight)
    getID = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getID)
    setID = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_setID)
    getUsageCount = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_getUsageCount)
    setUsageCount = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_setUsageCount)
    increaseUsageCount = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_increaseUsageCount)
    reduceUsageCount = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_reduceUsageCount)
    hasValidType = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_hasValidType)
    hasValidBitWidth = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_hasValidBitWidth)
    hasValidMinimum = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_hasValidMinimum)
    hasValidMaximum = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_hasValidMaximum)
    hasValidChoice = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_hasValidChoice)
    hasValidValue = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_hasValidValue)
    hasValidResolve = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_hasValidResolve)
    hasValidArrayValues = _swig_new_instance_method(_pythonAPI.AbstractParameterInterface_hasValidArrayValues)

# Register AbstractParameterInterface in _pythonAPI:
_pythonAPI.AbstractParameterInterface_swigregister(AbstractParameterInterface)

class ParametersInterface(AbstractParameterInterface):
    r"""Proxy of C++ ParametersInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, validator, expressionParser, expressionFormatter):
        r"""
        __init__(ParametersInterface self, QSharedPointer< ParameterValidator > validator, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter) -> ParametersInterface

        Parameters
        ----------
        validator: QSharedPointer< ParameterValidator >
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >

        """
        _pythonAPI.ParametersInterface_swiginit(self, _pythonAPI.new_ParametersInterface(validator, expressionParser, expressionFormatter))
    __swig_destroy__ = _pythonAPI.delete_ParametersInterface
    setParameters = _swig_new_instance_method(_pythonAPI.ParametersInterface_setParameters)
    addParameter = _swig_new_instance_method(_pythonAPI.ParametersInterface_addParameter)
    removeParameter = _swig_new_instance_method(_pythonAPI.ParametersInterface_removeParameter)

# Register ParametersInterface in _pythonAPI:
_pythonAPI.ParametersInterface_swigregister(ParametersInterface)

class MemoryMapInterface(ParameterizableInterface, NameGroupInterface):
    r"""Proxy of C++ MemoryMapInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mapValidator, expressionParser, expressionFormatter, subInterface):
        r"""
        __init__(MemoryMapInterface self, QSharedPointer< MemoryMapValidator > mapValidator, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter, AddressBlockInterface subInterface) -> MemoryMapInterface

        Parameters
        ----------
        mapValidator: QSharedPointer< MemoryMapValidator >
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >
        subInterface: AddressBlockInterface *

        """
        _pythonAPI.MemoryMapInterface_swiginit(self, _pythonAPI.new_MemoryMapInterface(mapValidator, expressionParser, expressionFormatter, subInterface))
    __swig_destroy__ = _pythonAPI.delete_MemoryMapInterface
    setMemoryMaps = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_setMemoryMaps)
    getMemoryRemapIndex = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_getMemoryRemapIndex)
    getIndexedRemapName = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_getIndexedRemapName)
    remapCount = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_remapCount)
    getRemapNames = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_getRemapNames)
    setRemapName = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_setRemapName)
    getRemapDescription = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_getRemapDescription)
    setRemapDescription = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_setRemapDescription)
    getIsPresentValue = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_getIsPresentValue)
    getIsPresentFormattedExpression = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_getIsPresentFormattedExpression)
    getIsPresentExpression = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_getIsPresentExpression)
    setIsPresent = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_setIsPresent)
    getRemapState = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_getRemapState)
    setRemapState = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_setRemapState)
    getAddressUnitBits = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_getAddressUnitBits)
    setAddressUnitBits = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_setAddressUnitBits)
    getInterfaceBinding = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_getInterfaceBinding)
    getAssociatedSlaveInterfaces = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_getAssociatedSlaveInterfaces)
    getMapExpressions = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_getMapExpressions)
    getAllReferencesToIdInRemapItem = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_getAllReferencesToIdInRemapItem)
    remapHasValidName = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_remapHasValidName)
    remapHasValidRemapState = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_remapHasValidRemapState)
    itemHasValidIsPresent = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_itemHasValidIsPresent)
    memoryMapHasValidAddressUnitBits = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_memoryMapHasValidAddressUnitBits)
    addMemoryMap = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_addMemoryMap)
    addMemoryRemap = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_addMemoryRemap)
    removeMap = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_removeMap)
    removeRemap = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_removeRemap)
    copyRows = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_copyRows)
    pasteMemoryMaps = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_pasteMemoryMaps)
    pasteMemoryRemaps = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_pasteMemoryRemaps)
    getSubInterface = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_getSubInterface)
    getMapPointer = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_getMapPointer)
    getRemapPointer = _swig_new_instance_method(_pythonAPI.MemoryMapInterface_getRemapPointer)

# Register MemoryMapInterface in _pythonAPI:
_pythonAPI.MemoryMapInterface_swigregister(MemoryMapInterface)

class AddressBlockInterface(ParameterizableInterface, NameGroupInterface):
    r"""Proxy of C++ AddressBlockInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, blockValidator, expressionParser, expressionFormatter, subInterface):
        r"""
        __init__(AddressBlockInterface self, QSharedPointer< AddressBlockValidator > blockValidator, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter, RegisterInterface subInterface) -> AddressBlockInterface

        Parameters
        ----------
        blockValidator: QSharedPointer< AddressBlockValidator >
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >
        subInterface: RegisterInterface *

        """
        _pythonAPI.AddressBlockInterface_swiginit(self, _pythonAPI.new_AddressBlockInterface(blockValidator, expressionParser, expressionFormatter, subInterface))
    __swig_destroy__ = _pythonAPI.delete_AddressBlockInterface
    setAddressBlocks = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_setAddressBlocks)
    getBaseAddressValue = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getBaseAddressValue)
    getBaseAddressFormattedExpression = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getBaseAddressFormattedExpression)
    getBaseAddressExpression = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getBaseAddressExpression)
    setBaseAddress = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_setBaseAddress)
    getIsPresentValue = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getIsPresentValue)
    getIsPresentFormattedExpression = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getIsPresentFormattedExpression)
    getIsPresentExpression = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getIsPresentExpression)
    setIsPresent = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_setIsPresent)
    getRangeValue = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getRangeValue)
    getRangeFormattedExpression = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getRangeFormattedExpression)
    getRangeExpression = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getRangeExpression)
    setRange = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_setRange)
    getWidthValue = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getWidthValue)
    getWidthFormattedExpression = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getWidthFormattedExpression)
    getWidthExpression = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getWidthExpression)
    setWidth = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_setWidth)
    getUsageString = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getUsageString)
    getUsage = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getUsage)
    setUsage = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_setUsage)
    getAccessString = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getAccessString)
    getAccess = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getAccess)
    setAccess = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_setAccess)
    getVolatile = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getVolatile)
    setVolatile = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_setVolatile)
    hasValidBaseAddress = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_hasValidBaseAddress)
    hasValidRange = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_hasValidRange)
    hasValidWidth = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_hasValidWidth)
    hasValidIsPresent = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_hasValidIsPresent)
    hasValidUsage = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_hasValidUsage)
    addBlock = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_addBlock)
    removeBlock = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_removeBlock)
    copyRows = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_copyRows)
    pasteRows = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_pasteRows)
    getPasteRowCount = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getPasteRowCount)
    getExpressionsInSelectedItems = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getExpressionsInSelectedItems)
    setAddressUnitBits = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_setAddressUnitBits)
    getSubInterface = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_getSubInterface)
    hasRegisters = _swig_new_instance_method(_pythonAPI.AddressBlockInterface_hasRegisters)

# Register AddressBlockInterface in _pythonAPI:
_pythonAPI.AddressBlockInterface_swigregister(AddressBlockInterface)

class RegisterInterface(ParameterizableInterface, NameGroupInterface):
    r"""Proxy of C++ RegisterInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, validator, expressionParser, expressionFormatter, subInterface):
        r"""
        __init__(RegisterInterface self, QSharedPointer< RegisterValidator > validator, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter, FieldInterface subInterface) -> RegisterInterface

        Parameters
        ----------
        validator: QSharedPointer< RegisterValidator >
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >
        subInterface: FieldInterface *

        """
        _pythonAPI.RegisterInterface_swiginit(self, _pythonAPI.new_RegisterInterface(validator, expressionParser, expressionFormatter, subInterface))
    __swig_destroy__ = _pythonAPI.delete_RegisterInterface
    setRegisters = _swig_new_instance_method(_pythonAPI.RegisterInterface_setRegisters)
    registerDataCount = _swig_new_instance_method(_pythonAPI.RegisterInterface_registerDataCount)
    indexInRegisterData = _swig_new_instance_method(_pythonAPI.RegisterInterface_indexInRegisterData)
    getOffsetValue = _swig_new_instance_method(_pythonAPI.RegisterInterface_getOffsetValue)
    getOffsetFormattedExpression = _swig_new_instance_method(_pythonAPI.RegisterInterface_getOffsetFormattedExpression)
    getOffsetExpression = _swig_new_instance_method(_pythonAPI.RegisterInterface_getOffsetExpression)
    setOffset = _swig_new_instance_method(_pythonAPI.RegisterInterface_setOffset)
    getDimensionValue = _swig_new_instance_method(_pythonAPI.RegisterInterface_getDimensionValue)
    getDimensionFormattedExpression = _swig_new_instance_method(_pythonAPI.RegisterInterface_getDimensionFormattedExpression)
    getDimensionExpression = _swig_new_instance_method(_pythonAPI.RegisterInterface_getDimensionExpression)
    setDimension = _swig_new_instance_method(_pythonAPI.RegisterInterface_setDimension)
    getIsPresentValue = _swig_new_instance_method(_pythonAPI.RegisterInterface_getIsPresentValue)
    getIsPresentFormattedExpression = _swig_new_instance_method(_pythonAPI.RegisterInterface_getIsPresentFormattedExpression)
    getIsPresentExpression = _swig_new_instance_method(_pythonAPI.RegisterInterface_getIsPresentExpression)
    setIsPresent = _swig_new_instance_method(_pythonAPI.RegisterInterface_setIsPresent)
    getSizeValue = _swig_new_instance_method(_pythonAPI.RegisterInterface_getSizeValue)
    getSizeFormattedExpression = _swig_new_instance_method(_pythonAPI.RegisterInterface_getSizeFormattedExpression)
    getSizeExpression = _swig_new_instance_method(_pythonAPI.RegisterInterface_getSizeExpression)
    setSize = _swig_new_instance_method(_pythonAPI.RegisterInterface_setSize)
    getVolatile = _swig_new_instance_method(_pythonAPI.RegisterInterface_getVolatile)
    setVolatile = _swig_new_instance_method(_pythonAPI.RegisterInterface_setVolatile)
    getAccessString = _swig_new_instance_method(_pythonAPI.RegisterInterface_getAccessString)
    getAccess = _swig_new_instance_method(_pythonAPI.RegisterInterface_getAccess)
    setAccess = _swig_new_instance_method(_pythonAPI.RegisterInterface_setAccess)
    hasValidDimension = _swig_new_instance_method(_pythonAPI.RegisterInterface_hasValidDimension)
    hasValidOffset = _swig_new_instance_method(_pythonAPI.RegisterInterface_hasValidOffset)
    hasValidIsPresent = _swig_new_instance_method(_pythonAPI.RegisterInterface_hasValidIsPresent)
    hasValidSize = _swig_new_instance_method(_pythonAPI.RegisterInterface_hasValidSize)
    addRegister = _swig_new_instance_method(_pythonAPI.RegisterInterface_addRegister)
    removeRegister = _swig_new_instance_method(_pythonAPI.RegisterInterface_removeRegister)
    copyRows = _swig_new_instance_method(_pythonAPI.RegisterInterface_copyRows)
    pasteRows = _swig_new_instance_method(_pythonAPI.RegisterInterface_pasteRows)
    getPasteRowCount = _swig_new_instance_method(_pythonAPI.RegisterInterface_getPasteRowCount)
    getExpressionsInSelectedRegisters = _swig_new_instance_method(_pythonAPI.RegisterInterface_getExpressionsInSelectedRegisters)
    setAddressUnitBits = _swig_new_instance_method(_pythonAPI.RegisterInterface_setAddressUnitBits)
    getSubInterface = _swig_new_instance_method(_pythonAPI.RegisterInterface_getSubInterface)

# Register RegisterInterface in _pythonAPI:
_pythonAPI.RegisterInterface_swigregister(RegisterInterface)

class FieldInterface(ParameterizableInterface, NameGroupInterface):
    r"""Proxy of C++ FieldInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, validator, expressionParser, expressionFormatter, subInterface):
        r"""
        __init__(FieldInterface self, QSharedPointer< FieldValidator > validator, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter, ResetInterface subInterface) -> FieldInterface

        Parameters
        ----------
        validator: QSharedPointer< FieldValidator >
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >
        subInterface: ResetInterface *

        """
        _pythonAPI.FieldInterface_swiginit(self, _pythonAPI.new_FieldInterface(validator, expressionParser, expressionFormatter, subInterface))
    __swig_destroy__ = _pythonAPI.delete_FieldInterface
    setFields = _swig_new_instance_method(_pythonAPI.FieldInterface_setFields)
    getOffsetValue = _swig_new_instance_method(_pythonAPI.FieldInterface_getOffsetValue)
    getOffsetFormattedExpression = _swig_new_instance_method(_pythonAPI.FieldInterface_getOffsetFormattedExpression)
    getOffsetExpression = _swig_new_instance_method(_pythonAPI.FieldInterface_getOffsetExpression)
    setOffset = _swig_new_instance_method(_pythonAPI.FieldInterface_setOffset)
    getWidthValue = _swig_new_instance_method(_pythonAPI.FieldInterface_getWidthValue)
    getWidthFormattedExpression = _swig_new_instance_method(_pythonAPI.FieldInterface_getWidthFormattedExpression)
    getWidthExpression = _swig_new_instance_method(_pythonAPI.FieldInterface_getWidthExpression)
    setWidth = _swig_new_instance_method(_pythonAPI.FieldInterface_setWidth)
    getResets = _swig_new_instance_method(_pythonAPI.FieldInterface_getResets)
    getResetsToolTip = _swig_new_instance_method(_pythonAPI.FieldInterface_getResetsToolTip)
    getVolatile = _swig_new_instance_method(_pythonAPI.FieldInterface_getVolatile)
    setVolatile = _swig_new_instance_method(_pythonAPI.FieldInterface_setVolatile)
    getAccessString = _swig_new_instance_method(_pythonAPI.FieldInterface_getAccessString)
    getAccessType = _swig_new_instance_method(_pythonAPI.FieldInterface_getAccessType)
    setAccess = _swig_new_instance_method(_pythonAPI.FieldInterface_setAccess)
    getModifiedWriteString = _swig_new_instance_method(_pythonAPI.FieldInterface_getModifiedWriteString)
    getModifiedWriteValue = _swig_new_instance_method(_pythonAPI.FieldInterface_getModifiedWriteValue)
    setModifiedWrite = _swig_new_instance_method(_pythonAPI.FieldInterface_setModifiedWrite)
    getReadActionString = _swig_new_instance_method(_pythonAPI.FieldInterface_getReadActionString)
    getReadAction = _swig_new_instance_method(_pythonAPI.FieldInterface_getReadAction)
    setReadAction = _swig_new_instance_method(_pythonAPI.FieldInterface_setReadAction)
    getTestableValue = _swig_new_instance_method(_pythonAPI.FieldInterface_getTestableValue)
    getTestableBool = _swig_new_instance_method(_pythonAPI.FieldInterface_getTestableBool)
    setTestable = _swig_new_instance_method(_pythonAPI.FieldInterface_setTestable)
    getTestConstraintString = _swig_new_instance_method(_pythonAPI.FieldInterface_getTestConstraintString)
    getTestConstraint = _swig_new_instance_method(_pythonAPI.FieldInterface_getTestConstraint)
    setTestConstraint = _swig_new_instance_method(_pythonAPI.FieldInterface_setTestConstraint)
    getIsPresentValue = _swig_new_instance_method(_pythonAPI.FieldInterface_getIsPresentValue)
    getIsPresentFormattedExpression = _swig_new_instance_method(_pythonAPI.FieldInterface_getIsPresentFormattedExpression)
    getIsPresentExpression = _swig_new_instance_method(_pythonAPI.FieldInterface_getIsPresentExpression)
    setIsPresent = _swig_new_instance_method(_pythonAPI.FieldInterface_setIsPresent)
    hasValidOffset = _swig_new_instance_method(_pythonAPI.FieldInterface_hasValidOffset)
    hasValidWidth = _swig_new_instance_method(_pythonAPI.FieldInterface_hasValidWidth)
    hasValidResets = _swig_new_instance_method(_pythonAPI.FieldInterface_hasValidResets)
    hasValidIsPresent = _swig_new_instance_method(_pythonAPI.FieldInterface_hasValidIsPresent)
    hasValidAccess = _swig_new_instance_method(_pythonAPI.FieldInterface_hasValidAccess)
    addField = _swig_new_instance_method(_pythonAPI.FieldInterface_addField)
    removeField = _swig_new_instance_method(_pythonAPI.FieldInterface_removeField)
    copyRows = _swig_new_instance_method(_pythonAPI.FieldInterface_copyRows)
    pasteRows = _swig_new_instance_method(_pythonAPI.FieldInterface_pasteRows)
    getPasteRowCount = _swig_new_instance_method(_pythonAPI.FieldInterface_getPasteRowCount)
    getExpressionsInSelectedFields = _swig_new_instance_method(_pythonAPI.FieldInterface_getExpressionsInSelectedFields)
    getSubInterface = _swig_new_instance_method(_pythonAPI.FieldInterface_getSubInterface)
    hasWriteConstraint = _swig_new_instance_method(_pythonAPI.FieldInterface_hasWriteConstraint)
    getWriteConstraint = _swig_new_instance_method(_pythonAPI.FieldInterface_getWriteConstraint)
    setWriteConstraint = _swig_new_instance_method(_pythonAPI.FieldInterface_setWriteConstraint)
    getWriteConstraintMinimumValue = _swig_new_instance_method(_pythonAPI.FieldInterface_getWriteConstraintMinimumValue)
    getWriteConstraintMinimumFormattedExpression = _swig_new_instance_method(_pythonAPI.FieldInterface_getWriteConstraintMinimumFormattedExpression)
    getWriteConstraintMinimumExpression = _swig_new_instance_method(_pythonAPI.FieldInterface_getWriteConstraintMinimumExpression)
    setWriteConstraintMinimum = _swig_new_instance_method(_pythonAPI.FieldInterface_setWriteConstraintMinimum)
    getWriteConstraintMaximumValue = _swig_new_instance_method(_pythonAPI.FieldInterface_getWriteConstraintMaximumValue)
    getWriteConstraintMaximumFormattedExpression = _swig_new_instance_method(_pythonAPI.FieldInterface_getWriteConstraintMaximumFormattedExpression)
    getWriteConstraintMaximumExpression = _swig_new_instance_method(_pythonAPI.FieldInterface_getWriteConstraintMaximumExpression)
    setWriteConstraintMaximum = _swig_new_instance_method(_pythonAPI.FieldInterface_setWriteConstraintMaximum)
    getReservedValue = _swig_new_instance_method(_pythonAPI.FieldInterface_getReservedValue)
    getReservedFormattedExpression = _swig_new_instance_method(_pythonAPI.FieldInterface_getReservedFormattedExpression)
    getReservedExpression = _swig_new_instance_method(_pythonAPI.FieldInterface_getReservedExpression)
    setReserved = _swig_new_instance_method(_pythonAPI.FieldInterface_setReserved)
    getID = _swig_new_instance_method(_pythonAPI.FieldInterface_getID)
    setID = _swig_new_instance_method(_pythonAPI.FieldInterface_setID)

# Register FieldInterface in _pythonAPI:
_pythonAPI.FieldInterface_swigregister(FieldInterface)

class ResetInterface(ParameterizableInterface, CommonInterface):
    r"""Proxy of C++ ResetInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, validator, expressionParser, expressionFormatter):
        r"""
        __init__(ResetInterface self, QSharedPointer< FieldValidator > validator, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter) -> ResetInterface

        Parameters
        ----------
        validator: QSharedPointer< FieldValidator >
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >

        """
        _pythonAPI.ResetInterface_swiginit(self, _pythonAPI.new_ResetInterface(validator, expressionParser, expressionFormatter))
    __swig_destroy__ = _pythonAPI.delete_ResetInterface
    setResets = _swig_new_instance_method(_pythonAPI.ResetInterface_setResets)
    getResetTypeReference = _swig_new_instance_method(_pythonAPI.ResetInterface_getResetTypeReference)
    setResetTypeReference = _swig_new_instance_method(_pythonAPI.ResetInterface_setResetTypeReference)
    getResetValue = _swig_new_instance_method(_pythonAPI.ResetInterface_getResetValue)
    getResetValueFormattedExpression = _swig_new_instance_method(_pythonAPI.ResetInterface_getResetValueFormattedExpression)
    getResetValueExpression = _swig_new_instance_method(_pythonAPI.ResetInterface_getResetValueExpression)
    setResetValue = _swig_new_instance_method(_pythonAPI.ResetInterface_setResetValue)
    getResetMaskValue = _swig_new_instance_method(_pythonAPI.ResetInterface_getResetMaskValue)
    getResetMaskFormattedExpression = _swig_new_instance_method(_pythonAPI.ResetInterface_getResetMaskFormattedExpression)
    getResetMaskExpression = _swig_new_instance_method(_pythonAPI.ResetInterface_getResetMaskExpression)
    setResetMask = _swig_new_instance_method(_pythonAPI.ResetInterface_setResetMask)
    hasValidResetType = _swig_new_instance_method(_pythonAPI.ResetInterface_hasValidResetType)
    hasValidResetValue = _swig_new_instance_method(_pythonAPI.ResetInterface_hasValidResetValue)
    hasValidResetMask = _swig_new_instance_method(_pythonAPI.ResetInterface_hasValidResetMask)
    addReset = _swig_new_instance_method(_pythonAPI.ResetInterface_addReset)
    removeReset = _swig_new_instance_method(_pythonAPI.ResetInterface_removeReset)

# Register ResetInterface in _pythonAPI:
_pythonAPI.ResetInterface_swigregister(ResetInterface)



