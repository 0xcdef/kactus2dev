#include "HtmlWriter.h"

#include <IPXACTmodels/Component/Component.h>
#include <IPXACTmodels/Component/MemoryMap.h>
#include <IPXACTmodels/Component/AddressBlock.h>
#include <IPXACTmodels/Component/Register.h>
#include <IPXACTmodels/Component/Field.h>

#include <KactusAPI/include/ExpressionFormatter.h>

#include <QDateTime>
#include <QSettings>
#include <QStringLiteral>

namespace HTML
{
    const QString SPACE("&nbsp;");

    const QString INDENT("&nbsp;&nbsp;&nbsp;");

    const QString TABLE("<table frame=\"box\" rules=\"all\" border=\"1\" cellPadding=\"3\" title=\"");

    const QString DOCTYPE("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" "
        "\"http://www.w3.org/TR/html4/strict.dtd\">");

    const QString ENCODING("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">");

    const QString VALID_W3C_STRICT("\t\t<p>\n"
        "\t\t\t<a href=\"https://validator.w3.org/#validate_by_upload\">\n"
        "\t\t\t<img src=\"http://www.w3.org/Icons/valid-html401\""
        "alt=\"Valid HTML 4.01 Strict\" height=\"31\"""width=\"88\">\n"
        "\t\t\t</a>\n"
        "\t\t</p>");
}

HtmlWriter::HtmlWriter(QSharedPointer<Component> component, ExpressionFormatter* formatter) :
    component_(component),
    componentNumber_(0),
    expressionFormatter_(formatter)
{
    vlnvString_ = component_->getVlnv().toString();
}

HtmlWriter::~HtmlWriter()
{
}

void HtmlWriter::writeHeader(QTextStream& stream)
{
    QSettings settings;
    
    // write the top of the html document
    stream << HTML::DOCTYPE << Qt::endl;
    stream << "<html>" << Qt::endl;
    stream << "\t<head>" << Qt::endl;
    stream << "\t" << HTML::ENCODING << Qt::endl;
    stream << "\t\t<title>Kactus2 generated documentation for component " <<
        component_->getVlnv().getName() << " " << component_->getVlnv().getVersion() << "</title>" << Qt::endl;
    stream << "\t</head>" << Qt::endl;
    stream << "\t<body>" << Qt::endl;
    stream << "\t\t<h6>This document was generated by Kactus2 on " <<
        QDateTime::currentDateTime().toString("dd.MM.yyyy hh:mm:ss") << " by user " <<
        settings.value("General/Username").toString() << "</h6>" << Qt::endl;
}

void HtmlWriter::writeKactusAttributes(QTextStream& stream, int subHeaderNumber)
{
    writeSubHeader(subHeaderNumber, stream, "Kactus2 attributes", "attributes");

    stream << "\t\t<p>" << Qt::endl;
    stream << "\t\t\t<strong>" << HTML::INDENT << "Product hierarchy: </strong>" <<
        KactusAttribute::hierarchyToString(component_->getHierarchy()) << "<br>" << Qt::endl;

    stream << "\t\t\t<strong>" << HTML::INDENT << "Component implementation: </strong>" <<
        KactusAttribute::implementationToString(component_->getImplementation()) << "<br>" << Qt::endl;

    stream << "\t\t\t<strong>" << HTML::INDENT << "Component firmness: </strong>" <<
        KactusAttribute::firmnessToString(component_->getFirmness()) << "<br>" << Qt::endl;

    stream << "\t\t</p>" << Qt::endl;
}

void HtmlWriter::writeTableOfContents(QTextStream& stream)
{
    QString vlnvHeader = "\t\t" + HTML::INDENT + "<a href=\"#" + component_->getVlnv().toString();

    stream << "\t\t<a href=\"#" << component_->getVlnv().toString() << "\">" << componentNumber_ << ". Component" <<
        HTML::SPACE << component_->getVlnv().toString(" - ") << "</a><br>" << Qt::endl;

    // subHeader is running number that counts the number of sub headers for component
    int subHeader = 1;

    // component always has kactus parameters
    stream << vlnvHeader << ".kts_params\">" << componentNumber_ << "." << subHeader << ". Kactus2 attributes</a><br>" <<
        Qt::endl;
    ++subHeader;

    if (component_->hasParameters())
    {
        stream << vlnvHeader << ".parameters\">" << componentNumber_ << "." << subHeader <<
            ". General parameters</a><br>" << Qt::endl;
        ++subHeader;
    }

    if (!component_->getMemoryMaps()->isEmpty())
    {
        stream << vlnvHeader << ".memoryMaps\">" << componentNumber_ << "." << subHeader << ". Memory maps</a><br>" <<
            Qt::endl;
        ++subHeader;
    }

    if (component_->hasPorts())
    {
        stream << vlnvHeader << ".ports\">" << componentNumber_ << "." << subHeader << ". Ports</a><br>" << Qt::endl;
        ++subHeader;
    }

    if (component_->hasInterfaces())
    {
        stream << vlnvHeader << ".interfaces\">" << componentNumber_ << "." << subHeader << ". Bus interfaces</a><br>" <<
            Qt::endl;
        ++subHeader;
    }

    if (component_->hasFileSets())
    {
        stream << vlnvHeader << ".fileSets\">" << componentNumber_ << "." << subHeader << ". File sets</a><br>" << Qt::endl;
        ++subHeader;
    }

    if (component_->hasViews())
    {
        stream << vlnvHeader << ".views\">" << componentNumber_ << "." << subHeader << ". Views</a><br>" << Qt::endl;
    }
}

void HtmlWriter::writeParameters(QTextStream& stream, int subHeaderNumber)
{
    QStringList headers({
        QStringLiteral("Name"),
        QStringLiteral("Type"),
        QStringLiteral("Value"),
        QStringLiteral("Resolve"),
        QStringLiteral("Bit vector left"),
        QStringLiteral("Bit vector right"),
        QStringLiteral("Array left"),
        QStringLiteral("Array right"),
        QStringLiteral("Description")
    });

    writeSubHeader(subHeaderNumber, stream, "General parameters", "parameters");

    // Write table element
    stream << indent(3) << HTML::TABLE << "List of parameters defined for the component\">" << Qt::endl;

    // Write header row
    writeTableHeader(stream, headers, 4);

    // Write parameters
    for (auto const& parameter : *component_->getParameters())
    {
        QStringList paramFields(QStringList()
            << parameter->name()
            << parameter->getType()
            << expressionFormatter_->formatReferringExpression(parameter->getValue())
            << parameter->getValueResolve()
            << expressionFormatter_->formatReferringExpression(parameter->getVectorLeft())
            << expressionFormatter_->formatReferringExpression(parameter->getVectorRight())
            << expressionFormatter_->formatReferringExpression(parameter->getArrayLeft())
            << expressionFormatter_->formatReferringExpression(parameter->getArrayRight())
            << parameter->description()
        );

        writeTableRow(stream, paramFields, 4);
    }

    stream << indent(3) << "</table>" << Qt::endl;
}

void HtmlWriter::writeSubHeader(unsigned int subHeaderNumber, QTextStream& stream, 
    QString const& headerText, QString const& headerId)
{
    stream << "\t\t<h2><a id=\"" << component_->getVlnv().toString() << "." << headerId << "\">" <<
        componentNumber_ << "." << subHeaderNumber << " " << headerText << "</a></h2>" << Qt::endl;
}

void HtmlWriter::writeMemoryMaps(QTextStream& stream, int subHeaderNumber)
{
    if (component_->getMemoryMaps()->isEmpty())
    {
        return;
    }

    writeSubHeader(subHeaderNumber, stream, "Memory maps", "memoryMaps");

    const QList<QSharedPointer<MemoryMap> > componentMemoryMaps = *component_->getMemoryMaps().data();
    int memoryMapNumber = 1;

    for (auto const& memoryMap : componentMemoryMaps)
    {
        stream << indent(3) << "<h3><a id=\"" << component_->getVlnv().toString() << ".memoryMap." <<
            memoryMap->name() << "\">" << componentNumber_ << "." << subHeaderNumber << "." << memoryMapNumber <<
            " " << memoryMap->name() << "</a></h3>" << Qt::endl;

        stream << indent(3) << "<p>" << Qt::endl;

        if (!memoryMap->description().isEmpty())
        {
            stream << indent(3) << HTML::INDENT << "<strong>Description:</strong> " <<
                memoryMap->description() << "<br>" << Qt::endl;
        }
        
        stream << indent(3) << HTML::INDENT << "<strong>Address unit bits (AUB):</strong> " <<
            memoryMap->getAddressUnitBits() << "<br>" << Qt::endl;

        stream << indent(3) << "</p>" << Qt::endl;

        QList <QSharedPointer <AddressBlock> > addressBlocks = getMemoryMapAddressBlocks(memoryMap);
        writeAddressBlocks(stream, addressBlocks, subHeaderNumber, memoryMapNumber);

        ++memoryMapNumber;
    }
}

void HtmlWriter::writeAddressBlocks(QTextStream& stream, QList<QSharedPointer<AddressBlock>> addressBlocks,
    int subHeaderNumber, int memoryMapNumber)
{
    if (addressBlocks.isEmpty())
    {
        return;
    }

    int addressBlockNumber = 1;

    for (auto const& addressBlock : addressBlocks)
    {
        // header
        stream << indent (3) << "<h3><a id=\"" << component_->getVlnv().toString() << ".addressBlock." <<
            addressBlock->name() << "\">" << componentNumber_ << "." << subHeaderNumber << "." <<
            memoryMapNumber << "." << addressBlockNumber << " " << addressBlock->name() <<
            "</a></h3>" << Qt::endl;

        if (!addressBlock->description().isEmpty())
        {
            stream << indent(3) << "<p>" << Qt::endl;
            stream << indent(3) << HTML::INDENT << "<strong>Description:</strong> " <<
                addressBlock->description() << "<br>" << Qt::endl;
            stream << indent(3) << "</p>" << Qt::endl;
        }

        QStringList headers(QStringList()
            << QStringLiteral("Usage")
            << QStringLiteral("Base address [AUB]")
            << QStringLiteral("Range [AUB]")
            << QStringLiteral("Width [AUB]")
            << QStringLiteral("Access")
            << QStringLiteral("Volatile")
        );

        QStringList addressBlockTableCells(QStringList()
            << General::usage2Str(addressBlock->getUsage())
            << expressionFormatter_->formatReferringExpression(addressBlock->getBaseAddress())
            << expressionFormatter_->formatReferringExpression(addressBlock->getRange())
            << expressionFormatter_->formatReferringExpression(addressBlock->getWidth())
            << AccessTypes::access2Str(addressBlock->getAccess())
            << addressBlock->getVolatile()
        );

        QString title = "List of values in " + addressBlock->name() + ".";

        // Table with title
        stream << indent (3) << HTML::TABLE << title << "\">" << Qt::endl;
        
        // Address block table headers
        writeTableHeader(stream, headers, 4);

        // Address block table body
        writeTableRow(stream, addressBlockTableCells, 4);

        stream << indent(3) << "</table>" << Qt::endl;

        QList <QSharedPointer <Register> > registers = getAddressBlockRegisters(addressBlock);
        writeRegisters(stream, registers, subHeaderNumber, memoryMapNumber, addressBlockNumber);

        ++addressBlockNumber;
    }
}

void HtmlWriter::writeRegisters(QTextStream& stream, QList<QSharedPointer<Register>> registers,
    int subHeaderNumber, int memoryMapNumber, int addressBlockNumber)
{
    if (registers.isEmpty())
    {
        return;
    }

    int registerNumber = 1;

    for (auto const& currentRegister : registers)
    {
        // Register heading
        stream << indent(3) << "<h3><a id=\"" << component_->getVlnv().toString() << ".register." <<
            currentRegister->name() << "\">" << componentNumber_ << "." << subHeaderNumber << "." <<
            memoryMapNumber << "." << addressBlockNumber << "." << registerNumber << " " <<
            currentRegister->name() << "</a></h3>" << Qt::endl;

        if (!currentRegister->description().isEmpty())
        {
            stream << indent(3) << "<p>" << Qt::endl;
            stream << indent(3) << HTML::INDENT << "<strong>Description:</strong> " <<
                currentRegister->description() << "<br>" << Qt::endl;
            stream << indent(3) << "</p>" << Qt::endl;
        }

        QStringList registerTableHeaders(QStringList()
            << QStringLiteral("Offset [AUB]")
            << QStringLiteral("Size [bits]")
            << QStringLiteral("Dimension")
            << QStringLiteral("Volatile")
            << QStringLiteral("Access")
        );

        QString tableTitle = "List of values in " + currentRegister->name() + ".";
        stream << indent(3) << HTML::TABLE << tableTitle << "\">" << Qt::endl;

        writeTableHeader(stream, registerTableHeaders, 4);

        QStringList registerInfo;
        registerInfo << expressionFormatter_->formatReferringExpression(currentRegister->getAddressOffset());

        if (currentRegister->getSize().isEmpty())
        {
            registerInfo << currentRegister->getSize();
        }
        else
        {
            registerInfo << expressionFormatter_->formatReferringExpression(currentRegister->getSize());
        }

        if (currentRegister->getDimension().isEmpty())
        {
            registerInfo << currentRegister->getDimension();
        }
        else
        {
            registerInfo << expressionFormatter_->formatReferringExpression(currentRegister->getDimension());
        }

        registerInfo << currentRegister->getVolatile()
            << AccessTypes::access2Str(currentRegister->getAccess());
        
        writeTableRow(stream, registerInfo, 4);
        
        stream << indent(3) << "</table>" << Qt::endl;

        writeFields(stream, currentRegister);

        ++registerNumber;
    }
}

void HtmlWriter::writeFields(QTextStream& stream, QSharedPointer<Register> currentRegister)
{
    if (currentRegister->getFields()->isEmpty())
    {
        return;
    }

    stream << indent(3) << "<h4>Register " << currentRegister->name() << " contains the following fields:</h4>" <<
        Qt::endl;

    QString tableTitle = "List of fields contained within register " + currentRegister->name() + ".";
    stream << indent(3) << HTML::TABLE << tableTitle << "\">" << Qt::endl;

    QStringList fieldTableHeaders(QStringList()
        << QStringLiteral("Field name")
        << QStringLiteral("Offset [bits]")
        << QStringLiteral("Width [bits]")
        << QStringLiteral("Volatile")
        << QStringLiteral("Access")
        << QStringLiteral("Resets")
        << QStringLiteral("Description")
    );

    writeTableHeader(stream, fieldTableHeaders, 4);

    for (auto const& field : *currentRegister->getFields())
    {
        QStringList fieldTableCells(QStringList()
            << "<a id=\"" + vlnvString_ + ".field." + field->name() + "\">" + field->name() + "</a>"
            << (field->getBitOffset().isEmpty()
                ? field->getBitOffset()
                : expressionFormatter_->formatReferringExpression(field->getBitOffset()))

            << (field->getBitWidth().isEmpty()
                ? field->getBitWidth()
                : expressionFormatter_->formatReferringExpression(field->getBitWidth()))

            << field->getVolatile().toString()
            << AccessTypes::access2Str(field->getAccess())
            << getFieldResetInfo(field)
            << field->description()
        );

        writeTableRow(stream, fieldTableCells, 4);
    }

    stream << indent(3) << "</table>" << Qt::endl;
}

void HtmlWriter::setComponentNumber(unsigned int componentNumber)
{
    componentNumber_ = componentNumber;
}

QList<QSharedPointer<AddressBlock>> HtmlWriter::getMemoryMapAddressBlocks(QSharedPointer<MemoryMap> memoryMap) const
{
    QList<QSharedPointer <AddressBlock> > addressBlocks;
    for (auto const& memoryMapItem : *memoryMap->getMemoryBlocks())
    {
        QSharedPointer<AddressBlock> addressItem = memoryMapItem.dynamicCast<AddressBlock>();

        if (addressItem)
        {
            addressBlocks.append(addressItem);
        }
    }

    return addressBlocks;
}

QList<QSharedPointer<Register>> HtmlWriter::getAddressBlockRegisters(QSharedPointer<AddressBlock> addressBlock) const
{
    QList <QSharedPointer <Register> > registers;
    for (auto const& registerModelItem : *addressBlock->getRegisterData())
    {
        QSharedPointer <Register> registerItem = registerModelItem.dynamicCast<Register>();

        if (registerItem)
        {
            registers.append(registerItem);
        }
    }

    return registers;
}

QString HtmlWriter::getFieldResetInfo(QSharedPointer<Field> field) const
{
    QString resetInfo = "";

    for (auto const& singleRest : *field->getResets())
    {
        if (singleRest != field->getResets()->first())
        {
            resetInfo.append("<br>");
        }

        QString resetTypeReference = singleRest->getResetTypeReference();
        if (resetTypeReference.isEmpty())
        {
            resetTypeReference = QLatin1String("HARD");
        }

        QString resetValue = expressionFormatter_->formatReferringExpression(singleRest->getResetValue());

        resetInfo.append(resetTypeReference + " : " + resetValue);
    }

    return resetInfo;
}

QString HtmlWriter::indent(int n) const
{
    auto tab = QStringLiteral("\t");
    return tab.repeated(n);
}

void HtmlWriter::writeTableRow(QTextStream& stream, QStringList const& fields, int indentation)
{
    stream << indent(indentation) << "<tr>" << Qt::endl;
    
    for (auto const& field : fields)
    {
        stream << indent(indentation + 1) << "<td>" << field << "</td>" << Qt::endl;
    }

    stream << indent(indentation) << "</tr>" << Qt::endl;
}

void HtmlWriter::writeTableHeader(QTextStream& stream, QStringList const& headerFields, int indentation)
{
    stream << indent(indentation) << "<tr>" << Qt::endl;

    for (auto const& fields : headerFields)
    {
        stream << indent(indentation + 1) << "<th>" << fields << "</th>" << Qt::endl;
    }

    stream << indent(indentation) << "</tr>" << Qt::endl;
}
