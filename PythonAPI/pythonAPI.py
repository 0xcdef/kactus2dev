# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _pythonAPI.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pythonAPI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pythonAPI')
    _pythonAPI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pythonAPI', [dirname(__file__)])
        except ImportError:
            import _pythonAPI
            return _pythonAPI
        try:
            _mod = imp.load_module('_pythonAPI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pythonAPI = swig_import_helper()
    del swig_import_helper
else:
    import _pythonAPI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pythonAPI.delete_SwigPyIterator

    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _pythonAPI.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        incr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _pythonAPI.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        decr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _pythonAPI.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _pythonAPI.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _pythonAPI.SwigPyIterator_equal(self, x)


    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _pythonAPI.SwigPyIterator_copy(self)


    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _pythonAPI.SwigPyIterator_next(self)


    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _pythonAPI.SwigPyIterator___next__(self)


    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _pythonAPI.SwigPyIterator_previous(self)


    def advance(self, n):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _pythonAPI.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _pythonAPI.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _pythonAPI.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _pythonAPI.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _pythonAPI.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _pythonAPI.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _pythonAPI.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_pythonAPI.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_pythonAPI.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_pythonAPI.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_pythonAPI.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_pythonAPI.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_pythonAPI.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_pythonAPI.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_pythonAPI.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_pythonAPI.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_pythonAPI.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_pythonAPI.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_pythonAPI.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_pythonAPI.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_pythonAPI.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_pythonAPI.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_pythonAPI.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _pythonAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class QString(object):
    """Proxy of C++ QString class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def fromStdString(s):
        """
        fromStdString(std::string const & s) -> QString

        Parameters
        ----------
        s: std::string const &

        """
        return _pythonAPI.QString_fromStdString(s)

    fromStdString = staticmethod(fromStdString)

    def toStdString(self):
        """
        toStdString(QString self) -> std::string

        Parameters
        ----------
        self: QString const *

        """
        return _pythonAPI.QString_toStdString(self)


    def size(self):
        """
        size(QString self) -> int

        Parameters
        ----------
        self: QString const *

        """
        return _pythonAPI.QString_size(self)


    def count(self):
        """
        count(QString self) -> int

        Parameters
        ----------
        self: QString const *

        """
        return _pythonAPI.QString_count(self)


    def length(self):
        """
        length(QString self) -> int

        Parameters
        ----------
        self: QString const *

        """
        return _pythonAPI.QString_length(self)


    def isEmpty(self):
        """
        isEmpty(QString self) -> bool

        Parameters
        ----------
        self: QString const *

        """
        return _pythonAPI.QString_isEmpty(self)


    def __init__(self):
        """__init__(QString self) -> QString"""
        _pythonAPI.QString_swiginit(self, _pythonAPI.new_QString())
    __swig_destroy__ = _pythonAPI.delete_QString
QString.toStdString = new_instancemethod(_pythonAPI.QString_toStdString, None, QString)
QString.size = new_instancemethod(_pythonAPI.QString_size, None, QString)
QString.count = new_instancemethod(_pythonAPI.QString_count, None, QString)
QString.length = new_instancemethod(_pythonAPI.QString_length, None, QString)
QString.isEmpty = new_instancemethod(_pythonAPI.QString_isEmpty, None, QString)
QString_swigregister = _pythonAPI.QString_swigregister
QString_swigregister(QString)

def QString_fromStdString(s):
    """
    QString_fromStdString(std::string const & s) -> QString

    Parameters
    ----------
    s: std::string const &

    """
    return _pythonAPI.QString_fromStdString(s)

class NameGroup(object):
    """Proxy of C++ NameGroup class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(NameGroup self) -> NameGroup
        __init__(NameGroup self, QString name, QString displayName, QString description) -> NameGroup

        Parameters
        ----------
        name: QString const &
        displayName: QString const &
        description: QString const &

        __init__(NameGroup self, QString name, QString displayName) -> NameGroup

        Parameters
        ----------
        name: QString const &
        displayName: QString const &

        __init__(NameGroup self, QString name) -> NameGroup

        Parameters
        ----------
        name: QString const &

        __init__(NameGroup self, NameGroup other) -> NameGroup

        Parameters
        ----------
        other: NameGroup const &

        """
        _pythonAPI.NameGroup_swiginit(self, _pythonAPI.new_NameGroup(*args))
    __swig_destroy__ = _pythonAPI.delete_NameGroup

    def name(self):
        """
        name(NameGroup self) -> QString

        Parameters
        ----------
        self: NameGroup const *

        """
        return _pythonAPI.NameGroup_name(self)


    def displayName(self):
        """
        displayName(NameGroup self) -> QString

        Parameters
        ----------
        self: NameGroup const *

        """
        return _pythonAPI.NameGroup_displayName(self)


    def description(self):
        """
        description(NameGroup self) -> QString

        Parameters
        ----------
        self: NameGroup const *

        """
        return _pythonAPI.NameGroup_description(self)

NameGroup.name = new_instancemethod(_pythonAPI.NameGroup_name, None, NameGroup)
NameGroup.displayName = new_instancemethod(_pythonAPI.NameGroup_displayName, None, NameGroup)
NameGroup.description = new_instancemethod(_pythonAPI.NameGroup_description, None, NameGroup)
NameGroup_swigregister = _pythonAPI.NameGroup_swigregister
NameGroup_swigregister(NameGroup)

class stringVector(object):
    """Proxy of C++ std::vector<(std::string)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(stringVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _pythonAPI.stringVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(stringVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _pythonAPI.stringVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(stringVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _pythonAPI.stringVector___bool__(self)


    def __len__(self):
        """
        __len__(stringVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _pythonAPI.stringVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(stringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> stringVector

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _pythonAPI.stringVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(stringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(stringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, stringVector v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _pythonAPI.stringVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(stringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _pythonAPI.stringVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(stringVector self, std::vector< std::string >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(stringVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _pythonAPI.stringVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(stringVector self, PySliceObject * slice) -> stringVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(stringVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _pythonAPI.stringVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(stringVector self, PySliceObject * slice, stringVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(stringVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(stringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _pythonAPI.stringVector___setitem__(self, *args)


    def pop(self):
        """
        pop(stringVector self) -> std::vector< std::string >::value_type

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _pythonAPI.stringVector_pop(self)


    def append(self, x):
        """
        append(stringVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _pythonAPI.stringVector_append(self, x)


    def empty(self):
        """
        empty(stringVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _pythonAPI.stringVector_empty(self)


    def size(self):
        """
        size(stringVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _pythonAPI.stringVector_size(self)


    def swap(self, v):
        """
        swap(stringVector self, stringVector v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _pythonAPI.stringVector_swap(self, v)


    def begin(self):
        """
        begin(stringVector self) -> std::vector< std::string >::iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _pythonAPI.stringVector_begin(self)


    def end(self):
        """
        end(stringVector self) -> std::vector< std::string >::iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _pythonAPI.stringVector_end(self)


    def rbegin(self):
        """
        rbegin(stringVector self) -> std::vector< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _pythonAPI.stringVector_rbegin(self)


    def rend(self):
        """
        rend(stringVector self) -> std::vector< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _pythonAPI.stringVector_rend(self)


    def clear(self):
        """
        clear(stringVector self)

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _pythonAPI.stringVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(stringVector self) -> std::vector< std::string >::allocator_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _pythonAPI.stringVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(stringVector self)

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _pythonAPI.stringVector_pop_back(self)


    def erase(self, *args):
        """
        erase(stringVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(stringVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _pythonAPI.stringVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> stringVector
        __init__(std::vector<(std::string)> self, stringVector arg2) -> stringVector

        Parameters
        ----------
        arg2: std::vector< std::string > const &

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> stringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> stringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        _pythonAPI.stringVector_swiginit(self, _pythonAPI.new_stringVector(*args))

    def push_back(self, x):
        """
        push_back(stringVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _pythonAPI.stringVector_push_back(self, x)


    def front(self):
        """
        front(stringVector self) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _pythonAPI.stringVector_front(self)


    def back(self):
        """
        back(stringVector self) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _pythonAPI.stringVector_back(self)


    def assign(self, n, x):
        """
        assign(stringVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _pythonAPI.stringVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(stringVector self, std::vector< std::string >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(stringVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _pythonAPI.stringVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(stringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(stringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _pythonAPI.stringVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(stringVector self, std::vector< std::string >::size_type n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _pythonAPI.stringVector_reserve(self, n)


    def capacity(self):
        """
        capacity(stringVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _pythonAPI.stringVector_capacity(self)

    __swig_destroy__ = _pythonAPI.delete_stringVector
stringVector.iterator = new_instancemethod(_pythonAPI.stringVector_iterator, None, stringVector)
stringVector.__nonzero__ = new_instancemethod(_pythonAPI.stringVector___nonzero__, None, stringVector)
stringVector.__bool__ = new_instancemethod(_pythonAPI.stringVector___bool__, None, stringVector)
stringVector.__len__ = new_instancemethod(_pythonAPI.stringVector___len__, None, stringVector)
stringVector.__getslice__ = new_instancemethod(_pythonAPI.stringVector___getslice__, None, stringVector)
stringVector.__setslice__ = new_instancemethod(_pythonAPI.stringVector___setslice__, None, stringVector)
stringVector.__delslice__ = new_instancemethod(_pythonAPI.stringVector___delslice__, None, stringVector)
stringVector.__delitem__ = new_instancemethod(_pythonAPI.stringVector___delitem__, None, stringVector)
stringVector.__getitem__ = new_instancemethod(_pythonAPI.stringVector___getitem__, None, stringVector)
stringVector.__setitem__ = new_instancemethod(_pythonAPI.stringVector___setitem__, None, stringVector)
stringVector.pop = new_instancemethod(_pythonAPI.stringVector_pop, None, stringVector)
stringVector.append = new_instancemethod(_pythonAPI.stringVector_append, None, stringVector)
stringVector.empty = new_instancemethod(_pythonAPI.stringVector_empty, None, stringVector)
stringVector.size = new_instancemethod(_pythonAPI.stringVector_size, None, stringVector)
stringVector.swap = new_instancemethod(_pythonAPI.stringVector_swap, None, stringVector)
stringVector.begin = new_instancemethod(_pythonAPI.stringVector_begin, None, stringVector)
stringVector.end = new_instancemethod(_pythonAPI.stringVector_end, None, stringVector)
stringVector.rbegin = new_instancemethod(_pythonAPI.stringVector_rbegin, None, stringVector)
stringVector.rend = new_instancemethod(_pythonAPI.stringVector_rend, None, stringVector)
stringVector.clear = new_instancemethod(_pythonAPI.stringVector_clear, None, stringVector)
stringVector.get_allocator = new_instancemethod(_pythonAPI.stringVector_get_allocator, None, stringVector)
stringVector.pop_back = new_instancemethod(_pythonAPI.stringVector_pop_back, None, stringVector)
stringVector.erase = new_instancemethod(_pythonAPI.stringVector_erase, None, stringVector)
stringVector.push_back = new_instancemethod(_pythonAPI.stringVector_push_back, None, stringVector)
stringVector.front = new_instancemethod(_pythonAPI.stringVector_front, None, stringVector)
stringVector.back = new_instancemethod(_pythonAPI.stringVector_back, None, stringVector)
stringVector.assign = new_instancemethod(_pythonAPI.stringVector_assign, None, stringVector)
stringVector.resize = new_instancemethod(_pythonAPI.stringVector_resize, None, stringVector)
stringVector.insert = new_instancemethod(_pythonAPI.stringVector_insert, None, stringVector)
stringVector.reserve = new_instancemethod(_pythonAPI.stringVector_reserve, None, stringVector)
stringVector.capacity = new_instancemethod(_pythonAPI.stringVector_capacity, None, stringVector)
stringVector_swigregister = _pythonAPI.stringVector_swigregister
stringVector_swigregister(stringVector)

class PythonAPI(object):
    """Proxy of C++ PythonAPI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(PythonAPI self) -> PythonAPI"""
        _pythonAPI.PythonAPI_swiginit(self, _pythonAPI.new_PythonAPI())
    __swig_destroy__ = _pythonAPI.delete_PythonAPI

    def getVersion(self):
        """
        getVersion(PythonAPI self) -> std::string

        Parameters
        ----------
        self: PythonAPI const *

        """
        return _pythonAPI.PythonAPI_getVersion(self)


    def getLibraryPaths(self):
        """
        getLibraryPaths(PythonAPI self) -> stringVector

        Parameters
        ----------
        self: PythonAPI const *

        """
        return _pythonAPI.PythonAPI_getLibraryPaths(self)


    def setupLibrary(self, settingsFileString):
        """
        setupLibrary(PythonAPI self, std::string const & settingsFileString)

        Parameters
        ----------
        settingsFileString: std::string const &

        """
        return _pythonAPI.PythonAPI_setupLibrary(self, settingsFileString)


    def setLibraryPaths(self, paths):
        """
        setLibraryPaths(PythonAPI self, stringVector paths)

        Parameters
        ----------
        paths: std::vector< std::string,std::allocator< std::string > >

        """
        return _pythonAPI.PythonAPI_setLibraryPaths(self, paths)


    def getDefaultLibraryPath(self):
        """
        getDefaultLibraryPath(PythonAPI self) -> std::string

        Parameters
        ----------
        self: PythonAPI const *

        """
        return _pythonAPI.PythonAPI_getDefaultLibraryPath(self)


    def setDefaultLibraryPath(self, path):
        """
        setDefaultLibraryPath(PythonAPI self, std::string const & path)

        Parameters
        ----------
        path: std::string const &

        """
        return _pythonAPI.PythonAPI_setDefaultLibraryPath(self, path)


    def importFile(self, path, vlnv, overwrite=False):
        """
        importFile(PythonAPI self, std::string const & path, std::string vlnv, bool overwrite=False) -> int

        Parameters
        ----------
        path: std::string const &
        vlnv: std::string
        overwrite: bool

        importFile(PythonAPI self, std::string const & path, std::string vlnv) -> int

        Parameters
        ----------
        path: std::string const &
        vlnv: std::string

        """
        return _pythonAPI.PythonAPI_importFile(self, path, vlnv, overwrite)


    def generate(self, format, vlnv, viewName, outputDirectory):
        """
        generate(PythonAPI self, std::string const & format, std::string const & vlnv, std::string const & viewName, std::string const & outputDirectory)

        Parameters
        ----------
        format: std::string const &
        vlnv: std::string const &
        viewName: std::string const &
        outputDirectory: std::string const &

        """
        return _pythonAPI.PythonAPI_generate(self, format, vlnv, viewName, outputDirectory)


    def getFileCount(self):
        """
        getFileCount(PythonAPI self) -> int

        Parameters
        ----------
        self: PythonAPI const *

        """
        return _pythonAPI.PythonAPI_getFileCount(self)


    def listVLNVs(self, *args):
        """
        listVLNVs(PythonAPI self, std::string const & vendor) -> stringVector

        Parameters
        ----------
        vendor: std::string const &

        listVLNVs(PythonAPI self) -> stringVector

        Parameters
        ----------
        self: PythonAPI const *

        """
        return _pythonAPI.PythonAPI_listVLNVs(self, *args)


    def listComponentVLNVs(self):
        """
        listComponentVLNVs(PythonAPI self) -> stringVector

        Parameters
        ----------
        self: PythonAPI const *

        """
        return _pythonAPI.PythonAPI_listComponentVLNVs(self)


    def vlnvExistsInLibrary(self, vendor, library, name, version):
        """
        vlnvExistsInLibrary(PythonAPI self, std::string const & vendor, std::string const & library, std::string const & name, std::string const & version) -> bool

        Parameters
        ----------
        vendor: std::string const &
        library: std::string const &
        name: std::string const &
        version: std::string const &

        """
        return _pythonAPI.PythonAPI_vlnvExistsInLibrary(self, vendor, library, name, version)


    def createComponent(self, vendor, library, name, version):
        """
        createComponent(PythonAPI self, std::string const & vendor, std::string const & library, std::string const & name, std::string const & version) -> bool

        Parameters
        ----------
        vendor: std::string const &
        library: std::string const &
        name: std::string const &
        version: std::string const &

        """
        return _pythonAPI.PythonAPI_createComponent(self, vendor, library, name, version)


    def getVLNVDirectory(self, vendor, library, name, version):
        """
        getVLNVDirectory(PythonAPI self, std::string const & vendor, std::string const & library, std::string const & name, std::string const & version) -> std::string

        Parameters
        ----------
        vendor: std::string const &
        library: std::string const &
        name: std::string const &
        version: std::string const &

        """
        return _pythonAPI.PythonAPI_getVLNVDirectory(self, vendor, library, name, version)


    def getFirstViewName(self):
        """
        getFirstViewName(PythonAPI self) -> std::string

        Parameters
        ----------
        self: PythonAPI *

        """
        return _pythonAPI.PythonAPI_getFirstViewName(self)


    def openComponent(self, vlnvString):
        """
        openComponent(PythonAPI self, std::string const & vlnvString) -> bool

        Parameters
        ----------
        vlnvString: std::string const &

        """
        return _pythonAPI.PythonAPI_openComponent(self, vlnvString)


    def closeOpenComponent(self):
        """
        closeOpenComponent(PythonAPI self)

        Parameters
        ----------
        self: PythonAPI *

        """
        return _pythonAPI.PythonAPI_closeOpenComponent(self)


    def getComponentName(self):
        """
        getComponentName(PythonAPI self) -> std::string

        Parameters
        ----------
        self: PythonAPI *

        """
        return _pythonAPI.PythonAPI_getComponentName(self)


    def getComponentDescription(self):
        """
        getComponentDescription(PythonAPI self) -> std::string

        Parameters
        ----------
        self: PythonAPI *

        """
        return _pythonAPI.PythonAPI_getComponentDescription(self)


    def saveComponent(self):
        """
        saveComponent(PythonAPI self)

        Parameters
        ----------
        self: PythonAPI *

        """
        return _pythonAPI.PythonAPI_saveComponent(self)


    def getPortsInterface(self):
        """
        getPortsInterface(PythonAPI self) -> PortsInterface

        Parameters
        ----------
        self: PythonAPI const *

        """
        return _pythonAPI.PythonAPI_getPortsInterface(self)


    def getComponentParameterInterface(self):
        """
        getComponentParameterInterface(PythonAPI self) -> ParametersInterface

        Parameters
        ----------
        self: PythonAPI const *

        """
        return _pythonAPI.PythonAPI_getComponentParameterInterface(self)


    def getMapInterface(self):
        """
        getMapInterface(PythonAPI self) -> MemoryMapInterface

        Parameters
        ----------
        self: PythonAPI *

        """
        return _pythonAPI.PythonAPI_getMapInterface(self)


    def setBlocksForInterface(self, mapName):
        """
        setBlocksForInterface(PythonAPI self, std::string const & mapName)

        Parameters
        ----------
        mapName: std::string const &

        """
        return _pythonAPI.PythonAPI_setBlocksForInterface(self, mapName)


    def setRegistersForInterface(self, mapName, blockName):
        """
        setRegistersForInterface(PythonAPI self, std::string const & mapName, std::string const & blockName)

        Parameters
        ----------
        mapName: std::string const &
        blockName: std::string const &

        """
        return _pythonAPI.PythonAPI_setRegistersForInterface(self, mapName, blockName)


    def setFieldsForInterface(self, mapName, blockName, registerName):
        """
        setFieldsForInterface(PythonAPI self, std::string const & mapName, std::string const & blockName, std::string const & registerName)

        Parameters
        ----------
        mapName: std::string const &
        blockName: std::string const &
        registerName: std::string const &

        """
        return _pythonAPI.PythonAPI_setFieldsForInterface(self, mapName, blockName, registerName)


    def setResetsForInterface(self, mapName, blockName, registerName, fieldName):
        """
        setResetsForInterface(PythonAPI self, std::string const & mapName, std::string const & blockName, std::string const & registerName, std::string const & fieldName)

        Parameters
        ----------
        mapName: std::string const &
        blockName: std::string const &
        registerName: std::string const &
        fieldName: std::string const &

        """
        return _pythonAPI.PythonAPI_setResetsForInterface(self, mapName, blockName, registerName, fieldName)


    def getFileSetInterface(self):
        """
        getFileSetInterface(PythonAPI self) -> FileSetInterface

        Parameters
        ----------
        self: PythonAPI *

        """
        return _pythonAPI.PythonAPI_getFileSetInterface(self)


    def setFilesForInterface(self, setName):
        """
        setFilesForInterface(PythonAPI self, std::string const & setName)

        Parameters
        ----------
        setName: std::string const &

        """
        return _pythonAPI.PythonAPI_setFilesForInterface(self, setName)


    def setFileBuildersForInterface(self, setName):
        """
        setFileBuildersForInterface(PythonAPI self, std::string const & setName)

        Parameters
        ----------
        setName: std::string const &

        """
        return _pythonAPI.PythonAPI_setFileBuildersForInterface(self, setName)

PythonAPI.getVersion = new_instancemethod(_pythonAPI.PythonAPI_getVersion, None, PythonAPI)
PythonAPI.getLibraryPaths = new_instancemethod(_pythonAPI.PythonAPI_getLibraryPaths, None, PythonAPI)
PythonAPI.setupLibrary = new_instancemethod(_pythonAPI.PythonAPI_setupLibrary, None, PythonAPI)
PythonAPI.setLibraryPaths = new_instancemethod(_pythonAPI.PythonAPI_setLibraryPaths, None, PythonAPI)
PythonAPI.getDefaultLibraryPath = new_instancemethod(_pythonAPI.PythonAPI_getDefaultLibraryPath, None, PythonAPI)
PythonAPI.setDefaultLibraryPath = new_instancemethod(_pythonAPI.PythonAPI_setDefaultLibraryPath, None, PythonAPI)
PythonAPI.importFile = new_instancemethod(_pythonAPI.PythonAPI_importFile, None, PythonAPI)
PythonAPI.generate = new_instancemethod(_pythonAPI.PythonAPI_generate, None, PythonAPI)
PythonAPI.getFileCount = new_instancemethod(_pythonAPI.PythonAPI_getFileCount, None, PythonAPI)
PythonAPI.listVLNVs = new_instancemethod(_pythonAPI.PythonAPI_listVLNVs, None, PythonAPI)
PythonAPI.listComponentVLNVs = new_instancemethod(_pythonAPI.PythonAPI_listComponentVLNVs, None, PythonAPI)
PythonAPI.vlnvExistsInLibrary = new_instancemethod(_pythonAPI.PythonAPI_vlnvExistsInLibrary, None, PythonAPI)
PythonAPI.createComponent = new_instancemethod(_pythonAPI.PythonAPI_createComponent, None, PythonAPI)
PythonAPI.getVLNVDirectory = new_instancemethod(_pythonAPI.PythonAPI_getVLNVDirectory, None, PythonAPI)
PythonAPI.getFirstViewName = new_instancemethod(_pythonAPI.PythonAPI_getFirstViewName, None, PythonAPI)
PythonAPI.openComponent = new_instancemethod(_pythonAPI.PythonAPI_openComponent, None, PythonAPI)
PythonAPI.closeOpenComponent = new_instancemethod(_pythonAPI.PythonAPI_closeOpenComponent, None, PythonAPI)
PythonAPI.getComponentName = new_instancemethod(_pythonAPI.PythonAPI_getComponentName, None, PythonAPI)
PythonAPI.getComponentDescription = new_instancemethod(_pythonAPI.PythonAPI_getComponentDescription, None, PythonAPI)
PythonAPI.saveComponent = new_instancemethod(_pythonAPI.PythonAPI_saveComponent, None, PythonAPI)
PythonAPI.getPortsInterface = new_instancemethod(_pythonAPI.PythonAPI_getPortsInterface, None, PythonAPI)
PythonAPI.getComponentParameterInterface = new_instancemethod(_pythonAPI.PythonAPI_getComponentParameterInterface, None, PythonAPI)
PythonAPI.getMapInterface = new_instancemethod(_pythonAPI.PythonAPI_getMapInterface, None, PythonAPI)
PythonAPI.setBlocksForInterface = new_instancemethod(_pythonAPI.PythonAPI_setBlocksForInterface, None, PythonAPI)
PythonAPI.setRegistersForInterface = new_instancemethod(_pythonAPI.PythonAPI_setRegistersForInterface, None, PythonAPI)
PythonAPI.setFieldsForInterface = new_instancemethod(_pythonAPI.PythonAPI_setFieldsForInterface, None, PythonAPI)
PythonAPI.setResetsForInterface = new_instancemethod(_pythonAPI.PythonAPI_setResetsForInterface, None, PythonAPI)
PythonAPI.getFileSetInterface = new_instancemethod(_pythonAPI.PythonAPI_getFileSetInterface, None, PythonAPI)
PythonAPI.setFilesForInterface = new_instancemethod(_pythonAPI.PythonAPI_setFilesForInterface, None, PythonAPI)
PythonAPI.setFileBuildersForInterface = new_instancemethod(_pythonAPI.PythonAPI_setFileBuildersForInterface, None, PythonAPI)
PythonAPI_swigregister = _pythonAPI.PythonAPI_swigregister
PythonAPI_swigregister(PythonAPI)

class CommonInterface(object):
    """Proxy of C++ CommonInterface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pythonAPI.delete_CommonInterface

    def getItemNames(self):
        """
        getItemNames(CommonInterface self) -> stringVector

        Parameters
        ----------
        self: CommonInterface const *

        """
        return _pythonAPI.CommonInterface_getItemNames(self)


    def itemCount(self):
        """
        itemCount(CommonInterface self) -> int

        Parameters
        ----------
        self: CommonInterface const *

        """
        return _pythonAPI.CommonInterface_itemCount(self)


    def validateItems(self):
        """
        validateItems(CommonInterface self) -> bool

        Parameters
        ----------
        self: CommonInterface const *

        """
        return _pythonAPI.CommonInterface_validateItems(self)

CommonInterface.getItemNames = new_instancemethod(_pythonAPI.CommonInterface_getItemNames, None, CommonInterface)
CommonInterface.itemCount = new_instancemethod(_pythonAPI.CommonInterface_itemCount, None, CommonInterface)
CommonInterface.validateItems = new_instancemethod(_pythonAPI.CommonInterface_validateItems, None, CommonInterface)
CommonInterface_swigregister = _pythonAPI.CommonInterface_swigregister
CommonInterface_swigregister(CommonInterface)

class NameGroupInterface(CommonInterface):
    """Proxy of C++ NameGroupInterface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pythonAPI.delete_NameGroupInterface

    def getItemIndex(self, itemName):
        """
        getItemIndex(NameGroupInterface self, std::string const & itemName) -> int

        Parameters
        ----------
        itemName: std::string const &

        """
        return _pythonAPI.NameGroupInterface_getItemIndex(self, itemName)


    def getIndexedItemName(self, itemIndex):
        """
        getIndexedItemName(NameGroupInterface self, int const & itemIndex) -> std::string

        Parameters
        ----------
        itemIndex: int const &

        """
        return _pythonAPI.NameGroupInterface_getIndexedItemName(self, itemIndex)


    def setName(self, currentName, newName):
        """
        setName(NameGroupInterface self, std::string const & currentName, std::string const & newName) -> bool

        Parameters
        ----------
        currentName: std::string const &
        newName: std::string const &

        """
        return _pythonAPI.NameGroupInterface_setName(self, currentName, newName)


    def getDescription(self, itemName):
        """
        getDescription(NameGroupInterface self, std::string const & itemName) -> std::string

        Parameters
        ----------
        itemName: std::string const &

        """
        return _pythonAPI.NameGroupInterface_getDescription(self, itemName)


    def setDescription(self, itemName, newDescription):
        """
        setDescription(NameGroupInterface self, std::string const & itemName, std::string const & newDescription) -> bool

        Parameters
        ----------
        itemName: std::string const &
        newDescription: std::string const &

        """
        return _pythonAPI.NameGroupInterface_setDescription(self, itemName, newDescription)


    def itemHasValidName(self, itemName):
        """
        itemHasValidName(NameGroupInterface self, std::string const & itemName) -> bool

        Parameters
        ----------
        itemName: std::string const &

        """
        return _pythonAPI.NameGroupInterface_itemHasValidName(self, itemName)

NameGroupInterface.getItemIndex = new_instancemethod(_pythonAPI.NameGroupInterface_getItemIndex, None, NameGroupInterface)
NameGroupInterface.getIndexedItemName = new_instancemethod(_pythonAPI.NameGroupInterface_getIndexedItemName, None, NameGroupInterface)
NameGroupInterface.setName = new_instancemethod(_pythonAPI.NameGroupInterface_setName, None, NameGroupInterface)
NameGroupInterface.getDescription = new_instancemethod(_pythonAPI.NameGroupInterface_getDescription, None, NameGroupInterface)
NameGroupInterface.setDescription = new_instancemethod(_pythonAPI.NameGroupInterface_setDescription, None, NameGroupInterface)
NameGroupInterface.itemHasValidName = new_instancemethod(_pythonAPI.NameGroupInterface_itemHasValidName, None, NameGroupInterface)
NameGroupInterface_swigregister = _pythonAPI.NameGroupInterface_swigregister
NameGroupInterface_swigregister(NameGroupInterface)

class ParameterizableInterface(object):
    """Proxy of C++ ParameterizableInterface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pythonAPI.delete_ParameterizableInterface

    def getAllReferencesToIdInItem(self, itemName, valueID):
        """
        getAllReferencesToIdInItem(ParameterizableInterface self, std::string const & itemName, std::string const & valueID) -> int

        Parameters
        ----------
        itemName: std::string const &
        valueID: std::string const &

        """
        return _pythonAPI.ParameterizableInterface_getAllReferencesToIdInItem(self, itemName, valueID)

ParameterizableInterface.getAllReferencesToIdInItem = new_instancemethod(_pythonAPI.ParameterizableInterface_getAllReferencesToIdInItem, None, ParameterizableInterface)
ParameterizableInterface_swigregister = _pythonAPI.ParameterizableInterface_swigregister
ParameterizableInterface_swigregister(ParameterizableInterface)

class MasterPortInterface(NameGroupInterface):
    """Proxy of C++ MasterPortInterface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pythonAPI.delete_MasterPortInterface

    def addWirePort(self, *args):
        """
        addWirePort(MasterPortInterface self, std::string const & newPortName)

        Parameters
        ----------
        newPortName: std::string const &

        addWirePort(MasterPortInterface self)

        Parameters
        ----------
        self: MasterPortInterface *

        """
        return _pythonAPI.MasterPortInterface_addWirePort(self, *args)


    def addTransactionalPort(self, *args):
        """
        addTransactionalPort(MasterPortInterface self, std::string const & newPortName)

        Parameters
        ----------
        newPortName: std::string const &

        addTransactionalPort(MasterPortInterface self)

        Parameters
        ----------
        self: MasterPortInterface *

        """
        return _pythonAPI.MasterPortInterface_addTransactionalPort(self, *args)


    def portIsWire(self, portName):
        """
        portIsWire(MasterPortInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.MasterPortInterface_portIsWire(self, portName)


    def portIsTransactional(self, portName):
        """
        portIsTransactional(MasterPortInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.MasterPortInterface_portIsTransactional(self, portName)


    def getIconPathForMissingPort(self):
        """
        getIconPathForMissingPort(MasterPortInterface self) -> std::string

        Parameters
        ----------
        self: MasterPortInterface const *

        """
        return _pythonAPI.MasterPortInterface_getIconPathForMissingPort(self)


    def getIconPathForDirection(self, direction):
        """
        getIconPathForDirection(MasterPortInterface self, DirectionTypes::Direction direction) -> std::string

        Parameters
        ----------
        direction: DirectionTypes::Direction

        """
        return _pythonAPI.MasterPortInterface_getIconPathForDirection(self, direction)


    def getIconPathForInitiative(self, initiative):
        """
        getIconPathForInitiative(MasterPortInterface self, QString initiative) -> std::string

        Parameters
        ----------
        initiative: QString const &

        """
        return _pythonAPI.MasterPortInterface_getIconPathForInitiative(self, initiative)

MasterPortInterface.addWirePort = new_instancemethod(_pythonAPI.MasterPortInterface_addWirePort, None, MasterPortInterface)
MasterPortInterface.addTransactionalPort = new_instancemethod(_pythonAPI.MasterPortInterface_addTransactionalPort, None, MasterPortInterface)
MasterPortInterface.portIsWire = new_instancemethod(_pythonAPI.MasterPortInterface_portIsWire, None, MasterPortInterface)
MasterPortInterface.portIsTransactional = new_instancemethod(_pythonAPI.MasterPortInterface_portIsTransactional, None, MasterPortInterface)
MasterPortInterface.getIconPathForMissingPort = new_instancemethod(_pythonAPI.MasterPortInterface_getIconPathForMissingPort, None, MasterPortInterface)
MasterPortInterface.getIconPathForDirection = new_instancemethod(_pythonAPI.MasterPortInterface_getIconPathForDirection, None, MasterPortInterface)
MasterPortInterface.getIconPathForInitiative = new_instancemethod(_pythonAPI.MasterPortInterface_getIconPathForInitiative, None, MasterPortInterface)
MasterPortInterface_swigregister = _pythonAPI.MasterPortInterface_swigregister
MasterPortInterface_swigregister(MasterPortInterface)

class PortsInterface(ParameterizableInterface, MasterPortInterface):
    """Proxy of C++ PortsInterface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, validator, expressionParser, expressionFormatter):
        """
        __init__(PortsInterface self, QSharedPointer< PortValidator > validator, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter) -> PortsInterface

        Parameters
        ----------
        validator: QSharedPointer< PortValidator >
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >

        """
        _pythonAPI.PortsInterface_swiginit(self, _pythonAPI.new_PortsInterface(validator, expressionParser, expressionFormatter))
    __swig_destroy__ = _pythonAPI.delete_PortsInterface

    def setPorts(self, component):
        """
        setPorts(PortsInterface self, QSharedPointer< Component > component)

        Parameters
        ----------
        component: QSharedPointer< Component >

        """
        return _pythonAPI.PortsInterface_setPorts(self, component)


    def portExists(self, portName):
        """
        portExists(PortsInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_portExists(self, portName)


    def getTypeName(self, portName):
        """
        getTypeName(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getTypeName(self, portName)


    def setTypeName(self, portName, newType):
        """
        setTypeName(PortsInterface self, std::string const & portName, std::string const & newType) -> bool

        Parameters
        ----------
        portName: std::string const &
        newType: std::string const &

        """
        return _pythonAPI.PortsInterface_setTypeName(self, portName, newType)


    def getArrayLeftValue(self, portName, baseNumber=0):
        """
        getArrayLeftValue(PortsInterface self, std::string const & portName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        portName: std::string const &
        baseNumber: int const &

        getArrayLeftValue(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getArrayLeftValue(self, portName, baseNumber)


    def getArrayLeftFormattedExpression(self, portName):
        """
        getArrayLeftFormattedExpression(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getArrayLeftFormattedExpression(self, portName)


    def getArrayLeftExpression(self, portName):
        """
        getArrayLeftExpression(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getArrayLeftExpression(self, portName)


    def setArrayLeft(self, portName, newArrayLeft):
        """
        setArrayLeft(PortsInterface self, std::string const & portName, std::string const & newArrayLeft) -> bool

        Parameters
        ----------
        portName: std::string const &
        newArrayLeft: std::string const &

        """
        return _pythonAPI.PortsInterface_setArrayLeft(self, portName, newArrayLeft)


    def getArrayRightValue(self, portName, baseNumber=0):
        """
        getArrayRightValue(PortsInterface self, std::string const & portName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        portName: std::string const &
        baseNumber: int const &

        getArrayRightValue(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getArrayRightValue(self, portName, baseNumber)


    def getArrayRightFormattedExpression(self, portName):
        """
        getArrayRightFormattedExpression(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getArrayRightFormattedExpression(self, portName)


    def getArrayRightExpression(self, portName):
        """
        getArrayRightExpression(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getArrayRightExpression(self, portName)


    def setArrayRight(self, portName, newArrayRight):
        """
        setArrayRight(PortsInterface self, std::string const & portName, std::string const & newArrayRight) -> bool

        Parameters
        ----------
        portName: std::string const &
        newArrayRight: std::string const &

        """
        return _pythonAPI.PortsInterface_setArrayRight(self, portName, newArrayRight)


    def getTags(self, portName):
        """
        getTags(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getTags(self, portName)


    def setTags(self, portName, tagList):
        """
        setTags(PortsInterface self, std::string const & portName, std::string const & tagList) -> bool

        Parameters
        ----------
        portName: std::string const &
        tagList: std::string const &

        """
        return _pythonAPI.PortsInterface_setTags(self, portName, tagList)


    def isAdHoc(self, portName):
        """
        isAdHoc(PortsInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_isAdHoc(self, portName)


    def setAdHoc(self, portName, newAdHocVisibility):
        """
        setAdHoc(PortsInterface self, std::string const & portName, bool newAdHocVisibility) -> bool

        Parameters
        ----------
        portName: std::string const &
        newAdHocVisibility: bool

        """
        return _pythonAPI.PortsInterface_setAdHoc(self, portName, newAdHocVisibility)


    def getDirection(self, portName):
        """
        getDirection(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getDirection(self, portName)


    def getDirectionType(self, portName):
        """
        getDirectionType(PortsInterface self, std::string const & portName) -> DirectionTypes::Direction

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getDirectionType(self, portName)


    def setDirection(self, portName, newDirection):
        """
        setDirection(PortsInterface self, std::string const & portName, std::string const & newDirection) -> bool

        Parameters
        ----------
        portName: std::string const &
        newDirection: std::string const &

        """
        return _pythonAPI.PortsInterface_setDirection(self, portName, newDirection)


    def getLeftBoundValue(self, portName, baseNumber=0):
        """
        getLeftBoundValue(PortsInterface self, std::string const & portName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        portName: std::string const &
        baseNumber: int const &

        getLeftBoundValue(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getLeftBoundValue(self, portName, baseNumber)


    def getLeftBoundFormattedExpression(self, portName):
        """
        getLeftBoundFormattedExpression(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getLeftBoundFormattedExpression(self, portName)


    def getLeftBoundExpression(self, portName):
        """
        getLeftBoundExpression(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getLeftBoundExpression(self, portName)


    def setLeftBound(self, portName, newLeftBound):
        """
        setLeftBound(PortsInterface self, std::string const & portName, std::string const & newLeftBound) -> bool

        Parameters
        ----------
        portName: std::string const &
        newLeftBound: std::string const &

        """
        return _pythonAPI.PortsInterface_setLeftBound(self, portName, newLeftBound)


    def getRightBoundValue(self, portName, baseNumber=0):
        """
        getRightBoundValue(PortsInterface self, std::string const & portName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        portName: std::string const &
        baseNumber: int const &

        getRightBoundValue(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getRightBoundValue(self, portName, baseNumber)


    def getRightBoundFormattedExpression(self, portName):
        """
        getRightBoundFormattedExpression(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getRightBoundFormattedExpression(self, portName)


    def getRightBoundExpression(self, portName):
        """
        getRightBoundExpression(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getRightBoundExpression(self, portName)


    def setRightBound(self, portName, newRightBound):
        """
        setRightBound(PortsInterface self, std::string const & portName, std::string const & newRightBound) -> bool

        Parameters
        ----------
        portName: std::string const &
        newRightBound: std::string const &

        """
        return _pythonAPI.PortsInterface_setRightBound(self, portName, newRightBound)


    def hasExpressionInLeftOrRightBound(self, portName):
        """
        hasExpressionInLeftOrRightBound(PortsInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_hasExpressionInLeftOrRightBound(self, portName)


    def getWidth(self, portName):
        """
        getWidth(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getWidth(self, portName)


    def setWidth(self, portName, newWidth):
        """
        setWidth(PortsInterface self, std::string const & portName, std::string const & newWidth) -> bool

        Parameters
        ----------
        portName: std::string const &
        newWidth: std::string const &

        """
        return _pythonAPI.PortsInterface_setWidth(self, portName, newWidth)


    def getDefaultValue(self, portName, baseNumber=0):
        """
        getDefaultValue(PortsInterface self, std::string const & portName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        portName: std::string const &
        baseNumber: int const &

        getDefaultValue(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getDefaultValue(self, portName, baseNumber)


    def getDefaultValueFormattedExpression(self, portName):
        """
        getDefaultValueFormattedExpression(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getDefaultValueFormattedExpression(self, portName)


    def getDefaultValueExpression(self, portName):
        """
        getDefaultValueExpression(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getDefaultValueExpression(self, portName)


    def setDefaultValue(self, portName, newDefaultValue):
        """
        setDefaultValue(PortsInterface self, std::string const & portName, std::string const & newDefaultValue) -> bool

        Parameters
        ----------
        portName: std::string const &
        newDefaultValue: std::string const &

        """
        return _pythonAPI.PortsInterface_setDefaultValue(self, portName, newDefaultValue)


    def getBusWidthValue(self, portName, baseNumber=0):
        """
        getBusWidthValue(PortsInterface self, std::string const & portName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        portName: std::string const &
        baseNumber: int const &

        getBusWidthValue(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getBusWidthValue(self, portName, baseNumber)


    def getBusWidthFormattedExpression(self, portName):
        """
        getBusWidthFormattedExpression(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getBusWidthFormattedExpression(self, portName)


    def getBusWidthExpression(self, portName):
        """
        getBusWidthExpression(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getBusWidthExpression(self, portName)


    def setBusWidth(self, portName, newBusWidth):
        """
        setBusWidth(PortsInterface self, std::string const & portName, std::string const & newBusWidth) -> bool

        Parameters
        ----------
        portName: std::string const &
        newBusWidth: std::string const &

        """
        return _pythonAPI.PortsInterface_setBusWidth(self, portName, newBusWidth)


    def getInitiative(self, portName):
        """
        getInitiative(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getInitiative(self, portName)


    def setInitiative(self, portName, newInitiative):
        """
        setInitiative(PortsInterface self, std::string const & portName, std::string const & newInitiative) -> bool

        Parameters
        ----------
        portName: std::string const &
        newInitiative: std::string const &

        """
        return _pythonAPI.PortsInterface_setInitiative(self, portName, newInitiative)


    def getKind(self, portName):
        """
        getKind(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getKind(self, portName)


    def setKind(self, portName, newKind):
        """
        setKind(PortsInterface self, std::string const & portName, std::string const & newKind) -> bool

        Parameters
        ----------
        portName: std::string const &
        newKind: std::string const &

        """
        return _pythonAPI.PortsInterface_setKind(self, portName, newKind)


    def getProtocolType(self, portName):
        """
        getProtocolType(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getProtocolType(self, portName)


    def setProtocolType(self, portName, newProtocolType):
        """
        setProtocolType(PortsInterface self, std::string const & portName, std::string const & newProtocolType) -> bool

        Parameters
        ----------
        portName: std::string const &
        newProtocolType: std::string const &

        """
        return _pythonAPI.PortsInterface_setProtocolType(self, portName, newProtocolType)


    def getMaxConnectionsValue(self, portName, baseNumber=0):
        """
        getMaxConnectionsValue(PortsInterface self, std::string const & portName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        portName: std::string const &
        baseNumber: int const &

        getMaxConnectionsValue(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getMaxConnectionsValue(self, portName, baseNumber)


    def getMaxConnectionsFormattedExpression(self, portName):
        """
        getMaxConnectionsFormattedExpression(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getMaxConnectionsFormattedExpression(self, portName)


    def getMaxConnectionsExpression(self, portName):
        """
        getMaxConnectionsExpression(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getMaxConnectionsExpression(self, portName)


    def setMaxConnections(self, portName, newMaxConnections):
        """
        setMaxConnections(PortsInterface self, std::string const & portName, std::string const & newMaxConnections) -> bool

        Parameters
        ----------
        portName: std::string const &
        newMaxConnections: std::string const &

        """
        return _pythonAPI.PortsInterface_setMaxConnections(self, portName, newMaxConnections)


    def getMinConnectionsValue(self, portName, baseNumber=0):
        """
        getMinConnectionsValue(PortsInterface self, std::string const & portName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        portName: std::string const &
        baseNumber: int const &

        getMinConnectionsValue(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getMinConnectionsValue(self, portName, baseNumber)


    def getMinConnectionsFormattedExpression(self, portName):
        """
        getMinConnectionsFormattedExpression(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getMinConnectionsFormattedExpression(self, portName)


    def getMinConnectionsExpression(self, portName):
        """
        getMinConnectionsExpression(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getMinConnectionsExpression(self, portName)


    def setMinConnections(self, portName, newMinConnections):
        """
        setMinConnections(PortsInterface self, std::string const & portName, std::string const & newMinConnections) -> bool

        Parameters
        ----------
        portName: std::string const &
        newMinConnections: std::string const &

        """
        return _pythonAPI.PortsInterface_setMinConnections(self, portName, newMinConnections)


    def addWirePort(self, *args):
        """
        addWirePort(PortsInterface self, std::string const & newPortName)

        Parameters
        ----------
        newPortName: std::string const &

        addWirePort(PortsInterface self)

        Parameters
        ----------
        self: PortsInterface *

        """
        return _pythonAPI.PortsInterface_addWirePort(self, *args)


    def addTransactionalPort(self, *args):
        """
        addTransactionalPort(PortsInterface self, std::string const & newPortName)

        Parameters
        ----------
        newPortName: std::string const &

        addTransactionalPort(PortsInterface self)

        Parameters
        ----------
        self: PortsInterface *

        """
        return _pythonAPI.PortsInterface_addTransactionalPort(self, *args)


    def removePort(self, portName):
        """
        removePort(PortsInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_removePort(self, portName)


    def portLeftArrayValueIsValid(self, portName):
        """
        portLeftArrayValueIsValid(PortsInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_portLeftArrayValueIsValid(self, portName)


    def portRightArrayValueIsValid(self, portName):
        """
        portRightArrayValueIsValid(PortsInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_portRightArrayValueIsValid(self, portName)


    def portHasValidTypes(self, portName):
        """
        portHasValidTypes(PortsInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_portHasValidTypes(self, portName)


    def portHasValidLeftBound(self, portName):
        """
        portHasValidLeftBound(PortsInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_portHasValidLeftBound(self, portName)


    def portHasValidRightBound(self, portName):
        """
        portHasValidRightBound(PortsInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_portHasValidRightBound(self, portName)


    def portHasValidDefaultValue(self, portName):
        """
        portHasValidDefaultValue(PortsInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_portHasValidDefaultValue(self, portName)


    def portHasValidBusWidth(self, portName):
        """
        portHasValidBusWidth(PortsInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_portHasValidBusWidth(self, portName)


    def portHasValidInitiative(self, portName):
        """
        portHasValidInitiative(PortsInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_portHasValidInitiative(self, portName)


    def portHasValidKind(self, portName):
        """
        portHasValidKind(PortsInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_portHasValidKind(self, portName)


    def portHasValidProtocol(self, portName):
        """
        portHasValidProtocol(PortsInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_portHasValidProtocol(self, portName)


    def portHasValidMaxConnections(self, portName):
        """
        portHasValidMaxConnections(PortsInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_portHasValidMaxConnections(self, portName)


    def portHasValidMinConnections(self, portName):
        """
        portHasValidMinConnections(PortsInterface self, std::string const & portName) -> bool

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_portHasValidMinConnections(self, portName)


    def getIconPathForPort(self, portName):
        """
        getIconPathForPort(PortsInterface self, std::string const & portName) -> std::string

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getIconPathForPort(self, portName)


    def getPort(self, portName):
        """
        getPort(PortsInterface self, std::string const & portName) -> QSharedPointer< Port >

        Parameters
        ----------
        portName: std::string const &

        """
        return _pythonAPI.PortsInterface_getPort(self, portName)

PortsInterface.setPorts = new_instancemethod(_pythonAPI.PortsInterface_setPorts, None, PortsInterface)
PortsInterface.portExists = new_instancemethod(_pythonAPI.PortsInterface_portExists, None, PortsInterface)
PortsInterface.getTypeName = new_instancemethod(_pythonAPI.PortsInterface_getTypeName, None, PortsInterface)
PortsInterface.setTypeName = new_instancemethod(_pythonAPI.PortsInterface_setTypeName, None, PortsInterface)
PortsInterface.getArrayLeftValue = new_instancemethod(_pythonAPI.PortsInterface_getArrayLeftValue, None, PortsInterface)
PortsInterface.getArrayLeftFormattedExpression = new_instancemethod(_pythonAPI.PortsInterface_getArrayLeftFormattedExpression, None, PortsInterface)
PortsInterface.getArrayLeftExpression = new_instancemethod(_pythonAPI.PortsInterface_getArrayLeftExpression, None, PortsInterface)
PortsInterface.setArrayLeft = new_instancemethod(_pythonAPI.PortsInterface_setArrayLeft, None, PortsInterface)
PortsInterface.getArrayRightValue = new_instancemethod(_pythonAPI.PortsInterface_getArrayRightValue, None, PortsInterface)
PortsInterface.getArrayRightFormattedExpression = new_instancemethod(_pythonAPI.PortsInterface_getArrayRightFormattedExpression, None, PortsInterface)
PortsInterface.getArrayRightExpression = new_instancemethod(_pythonAPI.PortsInterface_getArrayRightExpression, None, PortsInterface)
PortsInterface.setArrayRight = new_instancemethod(_pythonAPI.PortsInterface_setArrayRight, None, PortsInterface)
PortsInterface.getTags = new_instancemethod(_pythonAPI.PortsInterface_getTags, None, PortsInterface)
PortsInterface.setTags = new_instancemethod(_pythonAPI.PortsInterface_setTags, None, PortsInterface)
PortsInterface.isAdHoc = new_instancemethod(_pythonAPI.PortsInterface_isAdHoc, None, PortsInterface)
PortsInterface.setAdHoc = new_instancemethod(_pythonAPI.PortsInterface_setAdHoc, None, PortsInterface)
PortsInterface.getDirection = new_instancemethod(_pythonAPI.PortsInterface_getDirection, None, PortsInterface)
PortsInterface.getDirectionType = new_instancemethod(_pythonAPI.PortsInterface_getDirectionType, None, PortsInterface)
PortsInterface.setDirection = new_instancemethod(_pythonAPI.PortsInterface_setDirection, None, PortsInterface)
PortsInterface.getLeftBoundValue = new_instancemethod(_pythonAPI.PortsInterface_getLeftBoundValue, None, PortsInterface)
PortsInterface.getLeftBoundFormattedExpression = new_instancemethod(_pythonAPI.PortsInterface_getLeftBoundFormattedExpression, None, PortsInterface)
PortsInterface.getLeftBoundExpression = new_instancemethod(_pythonAPI.PortsInterface_getLeftBoundExpression, None, PortsInterface)
PortsInterface.setLeftBound = new_instancemethod(_pythonAPI.PortsInterface_setLeftBound, None, PortsInterface)
PortsInterface.getRightBoundValue = new_instancemethod(_pythonAPI.PortsInterface_getRightBoundValue, None, PortsInterface)
PortsInterface.getRightBoundFormattedExpression = new_instancemethod(_pythonAPI.PortsInterface_getRightBoundFormattedExpression, None, PortsInterface)
PortsInterface.getRightBoundExpression = new_instancemethod(_pythonAPI.PortsInterface_getRightBoundExpression, None, PortsInterface)
PortsInterface.setRightBound = new_instancemethod(_pythonAPI.PortsInterface_setRightBound, None, PortsInterface)
PortsInterface.hasExpressionInLeftOrRightBound = new_instancemethod(_pythonAPI.PortsInterface_hasExpressionInLeftOrRightBound, None, PortsInterface)
PortsInterface.getWidth = new_instancemethod(_pythonAPI.PortsInterface_getWidth, None, PortsInterface)
PortsInterface.setWidth = new_instancemethod(_pythonAPI.PortsInterface_setWidth, None, PortsInterface)
PortsInterface.getDefaultValue = new_instancemethod(_pythonAPI.PortsInterface_getDefaultValue, None, PortsInterface)
PortsInterface.getDefaultValueFormattedExpression = new_instancemethod(_pythonAPI.PortsInterface_getDefaultValueFormattedExpression, None, PortsInterface)
PortsInterface.getDefaultValueExpression = new_instancemethod(_pythonAPI.PortsInterface_getDefaultValueExpression, None, PortsInterface)
PortsInterface.setDefaultValue = new_instancemethod(_pythonAPI.PortsInterface_setDefaultValue, None, PortsInterface)
PortsInterface.getBusWidthValue = new_instancemethod(_pythonAPI.PortsInterface_getBusWidthValue, None, PortsInterface)
PortsInterface.getBusWidthFormattedExpression = new_instancemethod(_pythonAPI.PortsInterface_getBusWidthFormattedExpression, None, PortsInterface)
PortsInterface.getBusWidthExpression = new_instancemethod(_pythonAPI.PortsInterface_getBusWidthExpression, None, PortsInterface)
PortsInterface.setBusWidth = new_instancemethod(_pythonAPI.PortsInterface_setBusWidth, None, PortsInterface)
PortsInterface.getInitiative = new_instancemethod(_pythonAPI.PortsInterface_getInitiative, None, PortsInterface)
PortsInterface.setInitiative = new_instancemethod(_pythonAPI.PortsInterface_setInitiative, None, PortsInterface)
PortsInterface.getKind = new_instancemethod(_pythonAPI.PortsInterface_getKind, None, PortsInterface)
PortsInterface.setKind = new_instancemethod(_pythonAPI.PortsInterface_setKind, None, PortsInterface)
PortsInterface.getProtocolType = new_instancemethod(_pythonAPI.PortsInterface_getProtocolType, None, PortsInterface)
PortsInterface.setProtocolType = new_instancemethod(_pythonAPI.PortsInterface_setProtocolType, None, PortsInterface)
PortsInterface.getMaxConnectionsValue = new_instancemethod(_pythonAPI.PortsInterface_getMaxConnectionsValue, None, PortsInterface)
PortsInterface.getMaxConnectionsFormattedExpression = new_instancemethod(_pythonAPI.PortsInterface_getMaxConnectionsFormattedExpression, None, PortsInterface)
PortsInterface.getMaxConnectionsExpression = new_instancemethod(_pythonAPI.PortsInterface_getMaxConnectionsExpression, None, PortsInterface)
PortsInterface.setMaxConnections = new_instancemethod(_pythonAPI.PortsInterface_setMaxConnections, None, PortsInterface)
PortsInterface.getMinConnectionsValue = new_instancemethod(_pythonAPI.PortsInterface_getMinConnectionsValue, None, PortsInterface)
PortsInterface.getMinConnectionsFormattedExpression = new_instancemethod(_pythonAPI.PortsInterface_getMinConnectionsFormattedExpression, None, PortsInterface)
PortsInterface.getMinConnectionsExpression = new_instancemethod(_pythonAPI.PortsInterface_getMinConnectionsExpression, None, PortsInterface)
PortsInterface.setMinConnections = new_instancemethod(_pythonAPI.PortsInterface_setMinConnections, None, PortsInterface)
PortsInterface.addWirePort = new_instancemethod(_pythonAPI.PortsInterface_addWirePort, None, PortsInterface)
PortsInterface.addTransactionalPort = new_instancemethod(_pythonAPI.PortsInterface_addTransactionalPort, None, PortsInterface)
PortsInterface.removePort = new_instancemethod(_pythonAPI.PortsInterface_removePort, None, PortsInterface)
PortsInterface.portLeftArrayValueIsValid = new_instancemethod(_pythonAPI.PortsInterface_portLeftArrayValueIsValid, None, PortsInterface)
PortsInterface.portRightArrayValueIsValid = new_instancemethod(_pythonAPI.PortsInterface_portRightArrayValueIsValid, None, PortsInterface)
PortsInterface.portHasValidTypes = new_instancemethod(_pythonAPI.PortsInterface_portHasValidTypes, None, PortsInterface)
PortsInterface.portHasValidLeftBound = new_instancemethod(_pythonAPI.PortsInterface_portHasValidLeftBound, None, PortsInterface)
PortsInterface.portHasValidRightBound = new_instancemethod(_pythonAPI.PortsInterface_portHasValidRightBound, None, PortsInterface)
PortsInterface.portHasValidDefaultValue = new_instancemethod(_pythonAPI.PortsInterface_portHasValidDefaultValue, None, PortsInterface)
PortsInterface.portHasValidBusWidth = new_instancemethod(_pythonAPI.PortsInterface_portHasValidBusWidth, None, PortsInterface)
PortsInterface.portHasValidInitiative = new_instancemethod(_pythonAPI.PortsInterface_portHasValidInitiative, None, PortsInterface)
PortsInterface.portHasValidKind = new_instancemethod(_pythonAPI.PortsInterface_portHasValidKind, None, PortsInterface)
PortsInterface.portHasValidProtocol = new_instancemethod(_pythonAPI.PortsInterface_portHasValidProtocol, None, PortsInterface)
PortsInterface.portHasValidMaxConnections = new_instancemethod(_pythonAPI.PortsInterface_portHasValidMaxConnections, None, PortsInterface)
PortsInterface.portHasValidMinConnections = new_instancemethod(_pythonAPI.PortsInterface_portHasValidMinConnections, None, PortsInterface)
PortsInterface.getIconPathForPort = new_instancemethod(_pythonAPI.PortsInterface_getIconPathForPort, None, PortsInterface)
PortsInterface.getPort = new_instancemethod(_pythonAPI.PortsInterface_getPort, None, PortsInterface)
PortsInterface_swigregister = _pythonAPI.PortsInterface_swigregister
PortsInterface_swigregister(PortsInterface)

class AbstractParameterInterface(ParameterizableInterface, NameGroupInterface):
    """Proxy of C++ AbstractParameterInterface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pythonAPI.delete_AbstractParameterInterface

    def setChoices(self, newChoices):
        """
        setChoices(AbstractParameterInterface self, QSharedPointer< QList< QSharedPointer< Choice > > > newChoices)

        Parameters
        ----------
        newChoices: QSharedPointer< QList< QSharedPointer< Choice > > >

        """
        return _pythonAPI.AbstractParameterInterface_setChoices(self, newChoices)


    def getExpressionsInSelectedItems(self, parameterNames):
        """
        getExpressionsInSelectedItems(AbstractParameterInterface self, stringVector parameterNames) -> stringVector

        Parameters
        ----------
        parameterNames: std::vector< std::string,std::allocator< std::string > >

        """
        return _pythonAPI.AbstractParameterInterface_getExpressionsInSelectedItems(self, parameterNames)


    def getDisplayName(self, parameterName):
        """
        getDisplayName(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getDisplayName(self, parameterName)


    def setDisplayName(self, parameterName, newDisplayName):
        """
        setDisplayName(AbstractParameterInterface self, std::string const & parameterName, std::string const & newDisplayName) -> bool

        Parameters
        ----------
        parameterName: std::string const &
        newDisplayName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_setDisplayName(self, parameterName, newDisplayName)


    def getType(self, parameterName):
        """
        getType(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getType(self, parameterName)


    def setType(self, parameterName, newType):
        """
        setType(AbstractParameterInterface self, std::string const & parameterName, std::string const & newType) -> bool

        Parameters
        ----------
        parameterName: std::string const &
        newType: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_setType(self, parameterName, newType)


    def getBitWidthLeftValue(self, parameterName, baseNumber=0):
        """
        getBitWidthLeftValue(AbstractParameterInterface self, std::string const & parameterName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        parameterName: std::string const &
        baseNumber: int const &

        getBitWidthLeftValue(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getBitWidthLeftValue(self, parameterName, baseNumber)


    def getBitWidthLeftFormattedExpression(self, parameterName):
        """
        getBitWidthLeftFormattedExpression(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getBitWidthLeftFormattedExpression(self, parameterName)


    def getBitWidthLeftExpression(self, parameterName):
        """
        getBitWidthLeftExpression(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getBitWidthLeftExpression(self, parameterName)


    def setBitWidthLeft(self, parameterName, newBitWidthLeft):
        """
        setBitWidthLeft(AbstractParameterInterface self, std::string const & parameterName, std::string const & newBitWidthLeft) -> bool

        Parameters
        ----------
        parameterName: std::string const &
        newBitWidthLeft: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_setBitWidthLeft(self, parameterName, newBitWidthLeft)


    def getBitWidthRightValue(self, parameterName, baseNumber=0):
        """
        getBitWidthRightValue(AbstractParameterInterface self, std::string const & parameterName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        parameterName: std::string const &
        baseNumber: int const &

        getBitWidthRightValue(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getBitWidthRightValue(self, parameterName, baseNumber)


    def getBitWidthRightFormattedExpression(self, parameterName):
        """
        getBitWidthRightFormattedExpression(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getBitWidthRightFormattedExpression(self, parameterName)


    def getBitWidthRightExpression(self, parameterName):
        """
        getBitWidthRightExpression(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getBitWidthRightExpression(self, parameterName)


    def setBitWidthRight(self, parameterName, newBitWidthRight):
        """
        setBitWidthRight(AbstractParameterInterface self, std::string const & parameterName, std::string const & newBitWidthRight) -> bool

        Parameters
        ----------
        parameterName: std::string const &
        newBitWidthRight: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_setBitWidthRight(self, parameterName, newBitWidthRight)


    def getMinimum(self, parameterName):
        """
        getMinimum(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getMinimum(self, parameterName)


    def setMinimum(self, parameterName, newMinimum):
        """
        setMinimum(AbstractParameterInterface self, std::string const & parameterName, std::string const & newMinimum) -> bool

        Parameters
        ----------
        parameterName: std::string const &
        newMinimum: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_setMinimum(self, parameterName, newMinimum)


    def getMaximum(self, parameterName):
        """
        getMaximum(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getMaximum(self, parameterName)


    def setMaximum(self, parameterName, newMaximum):
        """
        setMaximum(AbstractParameterInterface self, std::string const & parameterName, std::string const & newMaximum) -> bool

        Parameters
        ----------
        parameterName: std::string const &
        newMaximum: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_setMaximum(self, parameterName, newMaximum)


    def getChoice(self, parameterName):
        """
        getChoice(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getChoice(self, parameterName)


    def setChoice(self, parameterName, newChoice):
        """
        setChoice(AbstractParameterInterface self, std::string const & parameterName, std::string const & newChoice) -> bool

        Parameters
        ----------
        parameterName: std::string const &
        newChoice: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_setChoice(self, parameterName, newChoice)


    def getValue(self, parameterName, baseNumber=0):
        """
        getValue(AbstractParameterInterface self, std::string const & parameterName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        parameterName: std::string const &
        baseNumber: int const &

        getValue(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getValue(self, parameterName, baseNumber)


    def getValueFormattedExpression(self, parameterName):
        """
        getValueFormattedExpression(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getValueFormattedExpression(self, parameterName)


    def getValueExpression(self, parameterName):
        """
        getValueExpression(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getValueExpression(self, parameterName)


    def setValue(self, parameterName, newValue):
        """
        setValue(AbstractParameterInterface self, std::string const & parameterName, std::string const & newValue) -> bool

        Parameters
        ----------
        parameterName: std::string const &
        newValue: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_setValue(self, parameterName, newValue)


    def getResolve(self, parameterName):
        """
        getResolve(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getResolve(self, parameterName)


    def setResolve(self, parameterName, newResolve):
        """
        setResolve(AbstractParameterInterface self, std::string const & parameterName, std::string const & newResolve) -> bool

        Parameters
        ----------
        parameterName: std::string const &
        newResolve: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_setResolve(self, parameterName, newResolve)


    def getArrayLeftValue(self, parameterName, baseNumber=0):
        """
        getArrayLeftValue(AbstractParameterInterface self, std::string const & parameterName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        parameterName: std::string const &
        baseNumber: int const &

        getArrayLeftValue(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getArrayLeftValue(self, parameterName, baseNumber)


    def getArrayLeftFormattedExpression(self, parameterName):
        """
        getArrayLeftFormattedExpression(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getArrayLeftFormattedExpression(self, parameterName)


    def getArrayLeftExpression(self, parameterName):
        """
        getArrayLeftExpression(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getArrayLeftExpression(self, parameterName)


    def setArrayLeft(self, parameterName, newArrayLeft):
        """
        setArrayLeft(AbstractParameterInterface self, std::string const & parameterName, std::string const & newArrayLeft) -> bool

        Parameters
        ----------
        parameterName: std::string const &
        newArrayLeft: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_setArrayLeft(self, parameterName, newArrayLeft)


    def getArrayRightValue(self, parameterName, baseNumber=0):
        """
        getArrayRightValue(AbstractParameterInterface self, std::string const & parameterName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        parameterName: std::string const &
        baseNumber: int const &

        getArrayRightValue(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getArrayRightValue(self, parameterName, baseNumber)


    def getArrayRightFormattedExpression(self, parameterName):
        """
        getArrayRightFormattedExpression(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getArrayRightFormattedExpression(self, parameterName)


    def getArrayRightExpression(self, parameterName):
        """
        getArrayRightExpression(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getArrayRightExpression(self, parameterName)


    def setArrayRight(self, parameterName, newArrayRight):
        """
        setArrayRight(AbstractParameterInterface self, std::string const & parameterName, std::string const & newArrayRight) -> bool

        Parameters
        ----------
        parameterName: std::string const &
        newArrayRight: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_setArrayRight(self, parameterName, newArrayRight)


    def getID(self, parameterName):
        """
        getID(AbstractParameterInterface self, std::string const & parameterName) -> std::string

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getID(self, parameterName)


    def setID(self, parameterName, newID):
        """
        setID(AbstractParameterInterface self, std::string const & parameterName, std::string const & newID) -> bool

        Parameters
        ----------
        parameterName: std::string const &
        newID: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_setID(self, parameterName, newID)


    def getUsageCount(self, parameterName):
        """
        getUsageCount(AbstractParameterInterface self, std::string const & parameterName) -> int

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_getUsageCount(self, parameterName)


    def setUsageCount(self, parameterName, newUsageCount):
        """
        setUsageCount(AbstractParameterInterface self, std::string const & parameterName, int const & newUsageCount) -> bool

        Parameters
        ----------
        parameterName: std::string const &
        newUsageCount: int const &

        """
        return _pythonAPI.AbstractParameterInterface_setUsageCount(self, parameterName, newUsageCount)


    def increaseUsageCount(self, parameterName):
        """
        increaseUsageCount(AbstractParameterInterface self, std::string const & parameterName) -> bool

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_increaseUsageCount(self, parameterName)


    def reduceUsageCount(self, parameterName):
        """
        reduceUsageCount(AbstractParameterInterface self, std::string const & parameterName) -> bool

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_reduceUsageCount(self, parameterName)


    def hasValidType(self, parameterName):
        """
        hasValidType(AbstractParameterInterface self, std::string const & parameterName) -> bool

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_hasValidType(self, parameterName)


    def hasValidBitWidth(self, parameterName):
        """
        hasValidBitWidth(AbstractParameterInterface self, std::string const & parameterName) -> bool

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_hasValidBitWidth(self, parameterName)


    def hasValidMinimum(self, parameterName):
        """
        hasValidMinimum(AbstractParameterInterface self, std::string const & parameterName) -> bool

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_hasValidMinimum(self, parameterName)


    def hasValidMaximum(self, parameterName):
        """
        hasValidMaximum(AbstractParameterInterface self, std::string const & parameterName) -> bool

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_hasValidMaximum(self, parameterName)


    def hasValidChoice(self, parameterName):
        """
        hasValidChoice(AbstractParameterInterface self, std::string const & parameterName) -> bool

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_hasValidChoice(self, parameterName)


    def hasValidValue(self, parameterName):
        """
        hasValidValue(AbstractParameterInterface self, std::string const & parameterName) -> bool

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_hasValidValue(self, parameterName)


    def hasValidResolve(self, parameterName):
        """
        hasValidResolve(AbstractParameterInterface self, std::string const & parameterName) -> bool

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_hasValidResolve(self, parameterName)


    def hasValidArrayValues(self, parameterName):
        """
        hasValidArrayValues(AbstractParameterInterface self, std::string const & parameterName) -> bool

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.AbstractParameterInterface_hasValidArrayValues(self, parameterName)

AbstractParameterInterface.setChoices = new_instancemethod(_pythonAPI.AbstractParameterInterface_setChoices, None, AbstractParameterInterface)
AbstractParameterInterface.getExpressionsInSelectedItems = new_instancemethod(_pythonAPI.AbstractParameterInterface_getExpressionsInSelectedItems, None, AbstractParameterInterface)
AbstractParameterInterface.getDisplayName = new_instancemethod(_pythonAPI.AbstractParameterInterface_getDisplayName, None, AbstractParameterInterface)
AbstractParameterInterface.setDisplayName = new_instancemethod(_pythonAPI.AbstractParameterInterface_setDisplayName, None, AbstractParameterInterface)
AbstractParameterInterface.getType = new_instancemethod(_pythonAPI.AbstractParameterInterface_getType, None, AbstractParameterInterface)
AbstractParameterInterface.setType = new_instancemethod(_pythonAPI.AbstractParameterInterface_setType, None, AbstractParameterInterface)
AbstractParameterInterface.getBitWidthLeftValue = new_instancemethod(_pythonAPI.AbstractParameterInterface_getBitWidthLeftValue, None, AbstractParameterInterface)
AbstractParameterInterface.getBitWidthLeftFormattedExpression = new_instancemethod(_pythonAPI.AbstractParameterInterface_getBitWidthLeftFormattedExpression, None, AbstractParameterInterface)
AbstractParameterInterface.getBitWidthLeftExpression = new_instancemethod(_pythonAPI.AbstractParameterInterface_getBitWidthLeftExpression, None, AbstractParameterInterface)
AbstractParameterInterface.setBitWidthLeft = new_instancemethod(_pythonAPI.AbstractParameterInterface_setBitWidthLeft, None, AbstractParameterInterface)
AbstractParameterInterface.getBitWidthRightValue = new_instancemethod(_pythonAPI.AbstractParameterInterface_getBitWidthRightValue, None, AbstractParameterInterface)
AbstractParameterInterface.getBitWidthRightFormattedExpression = new_instancemethod(_pythonAPI.AbstractParameterInterface_getBitWidthRightFormattedExpression, None, AbstractParameterInterface)
AbstractParameterInterface.getBitWidthRightExpression = new_instancemethod(_pythonAPI.AbstractParameterInterface_getBitWidthRightExpression, None, AbstractParameterInterface)
AbstractParameterInterface.setBitWidthRight = new_instancemethod(_pythonAPI.AbstractParameterInterface_setBitWidthRight, None, AbstractParameterInterface)
AbstractParameterInterface.getMinimum = new_instancemethod(_pythonAPI.AbstractParameterInterface_getMinimum, None, AbstractParameterInterface)
AbstractParameterInterface.setMinimum = new_instancemethod(_pythonAPI.AbstractParameterInterface_setMinimum, None, AbstractParameterInterface)
AbstractParameterInterface.getMaximum = new_instancemethod(_pythonAPI.AbstractParameterInterface_getMaximum, None, AbstractParameterInterface)
AbstractParameterInterface.setMaximum = new_instancemethod(_pythonAPI.AbstractParameterInterface_setMaximum, None, AbstractParameterInterface)
AbstractParameterInterface.getChoice = new_instancemethod(_pythonAPI.AbstractParameterInterface_getChoice, None, AbstractParameterInterface)
AbstractParameterInterface.setChoice = new_instancemethod(_pythonAPI.AbstractParameterInterface_setChoice, None, AbstractParameterInterface)
AbstractParameterInterface.getValue = new_instancemethod(_pythonAPI.AbstractParameterInterface_getValue, None, AbstractParameterInterface)
AbstractParameterInterface.getValueFormattedExpression = new_instancemethod(_pythonAPI.AbstractParameterInterface_getValueFormattedExpression, None, AbstractParameterInterface)
AbstractParameterInterface.getValueExpression = new_instancemethod(_pythonAPI.AbstractParameterInterface_getValueExpression, None, AbstractParameterInterface)
AbstractParameterInterface.setValue = new_instancemethod(_pythonAPI.AbstractParameterInterface_setValue, None, AbstractParameterInterface)
AbstractParameterInterface.getResolve = new_instancemethod(_pythonAPI.AbstractParameterInterface_getResolve, None, AbstractParameterInterface)
AbstractParameterInterface.setResolve = new_instancemethod(_pythonAPI.AbstractParameterInterface_setResolve, None, AbstractParameterInterface)
AbstractParameterInterface.getArrayLeftValue = new_instancemethod(_pythonAPI.AbstractParameterInterface_getArrayLeftValue, None, AbstractParameterInterface)
AbstractParameterInterface.getArrayLeftFormattedExpression = new_instancemethod(_pythonAPI.AbstractParameterInterface_getArrayLeftFormattedExpression, None, AbstractParameterInterface)
AbstractParameterInterface.getArrayLeftExpression = new_instancemethod(_pythonAPI.AbstractParameterInterface_getArrayLeftExpression, None, AbstractParameterInterface)
AbstractParameterInterface.setArrayLeft = new_instancemethod(_pythonAPI.AbstractParameterInterface_setArrayLeft, None, AbstractParameterInterface)
AbstractParameterInterface.getArrayRightValue = new_instancemethod(_pythonAPI.AbstractParameterInterface_getArrayRightValue, None, AbstractParameterInterface)
AbstractParameterInterface.getArrayRightFormattedExpression = new_instancemethod(_pythonAPI.AbstractParameterInterface_getArrayRightFormattedExpression, None, AbstractParameterInterface)
AbstractParameterInterface.getArrayRightExpression = new_instancemethod(_pythonAPI.AbstractParameterInterface_getArrayRightExpression, None, AbstractParameterInterface)
AbstractParameterInterface.setArrayRight = new_instancemethod(_pythonAPI.AbstractParameterInterface_setArrayRight, None, AbstractParameterInterface)
AbstractParameterInterface.getID = new_instancemethod(_pythonAPI.AbstractParameterInterface_getID, None, AbstractParameterInterface)
AbstractParameterInterface.setID = new_instancemethod(_pythonAPI.AbstractParameterInterface_setID, None, AbstractParameterInterface)
AbstractParameterInterface.getUsageCount = new_instancemethod(_pythonAPI.AbstractParameterInterface_getUsageCount, None, AbstractParameterInterface)
AbstractParameterInterface.setUsageCount = new_instancemethod(_pythonAPI.AbstractParameterInterface_setUsageCount, None, AbstractParameterInterface)
AbstractParameterInterface.increaseUsageCount = new_instancemethod(_pythonAPI.AbstractParameterInterface_increaseUsageCount, None, AbstractParameterInterface)
AbstractParameterInterface.reduceUsageCount = new_instancemethod(_pythonAPI.AbstractParameterInterface_reduceUsageCount, None, AbstractParameterInterface)
AbstractParameterInterface.hasValidType = new_instancemethod(_pythonAPI.AbstractParameterInterface_hasValidType, None, AbstractParameterInterface)
AbstractParameterInterface.hasValidBitWidth = new_instancemethod(_pythonAPI.AbstractParameterInterface_hasValidBitWidth, None, AbstractParameterInterface)
AbstractParameterInterface.hasValidMinimum = new_instancemethod(_pythonAPI.AbstractParameterInterface_hasValidMinimum, None, AbstractParameterInterface)
AbstractParameterInterface.hasValidMaximum = new_instancemethod(_pythonAPI.AbstractParameterInterface_hasValidMaximum, None, AbstractParameterInterface)
AbstractParameterInterface.hasValidChoice = new_instancemethod(_pythonAPI.AbstractParameterInterface_hasValidChoice, None, AbstractParameterInterface)
AbstractParameterInterface.hasValidValue = new_instancemethod(_pythonAPI.AbstractParameterInterface_hasValidValue, None, AbstractParameterInterface)
AbstractParameterInterface.hasValidResolve = new_instancemethod(_pythonAPI.AbstractParameterInterface_hasValidResolve, None, AbstractParameterInterface)
AbstractParameterInterface.hasValidArrayValues = new_instancemethod(_pythonAPI.AbstractParameterInterface_hasValidArrayValues, None, AbstractParameterInterface)
AbstractParameterInterface_swigregister = _pythonAPI.AbstractParameterInterface_swigregister
AbstractParameterInterface_swigregister(AbstractParameterInterface)

class ParametersInterface(AbstractParameterInterface):
    """Proxy of C++ ParametersInterface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, validator, expressionParser, expressionFormatter):
        """
        __init__(ParametersInterface self, QSharedPointer< ParameterValidator > validator, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter) -> ParametersInterface

        Parameters
        ----------
        validator: QSharedPointer< ParameterValidator >
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >

        """
        _pythonAPI.ParametersInterface_swiginit(self, _pythonAPI.new_ParametersInterface(validator, expressionParser, expressionFormatter))
    __swig_destroy__ = _pythonAPI.delete_ParametersInterface

    def setParameters(self, newParameters):
        """
        setParameters(ParametersInterface self, QSharedPointer< QList< QSharedPointer< Parameter > > > newParameters)

        Parameters
        ----------
        newParameters: QSharedPointer< QList< QSharedPointer< Parameter > > >

        """
        return _pythonAPI.ParametersInterface_setParameters(self, newParameters)


    def addParameter(self, *args):
        """
        addParameter(ParametersInterface self, int const & row, std::string const & newParameterName)

        Parameters
        ----------
        row: int const &
        newParameterName: std::string const &

        addParameter(ParametersInterface self, int const & row)

        Parameters
        ----------
        row: int const &

        """
        return _pythonAPI.ParametersInterface_addParameter(self, *args)


    def removeParameter(self, parameterName):
        """
        removeParameter(ParametersInterface self, std::string const & parameterName) -> bool

        Parameters
        ----------
        parameterName: std::string const &

        """
        return _pythonAPI.ParametersInterface_removeParameter(self, parameterName)

ParametersInterface.setParameters = new_instancemethod(_pythonAPI.ParametersInterface_setParameters, None, ParametersInterface)
ParametersInterface.addParameter = new_instancemethod(_pythonAPI.ParametersInterface_addParameter, None, ParametersInterface)
ParametersInterface.removeParameter = new_instancemethod(_pythonAPI.ParametersInterface_removeParameter, None, ParametersInterface)
ParametersInterface_swigregister = _pythonAPI.ParametersInterface_swigregister
ParametersInterface_swigregister(ParametersInterface)

class MemoryMapInterface(ParameterizableInterface, NameGroupInterface):
    """Proxy of C++ MemoryMapInterface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, mapValidator, expressionParser, expressionFormatter, subInterface):
        """
        __init__(MemoryMapInterface self, QSharedPointer< MemoryMapValidator > mapValidator, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter, AddressBlockInterface subInterface) -> MemoryMapInterface

        Parameters
        ----------
        mapValidator: QSharedPointer< MemoryMapValidator >
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >
        subInterface: AddressBlockInterface *

        """
        _pythonAPI.MemoryMapInterface_swiginit(self, _pythonAPI.new_MemoryMapInterface(mapValidator, expressionParser, expressionFormatter, subInterface))
    __swig_destroy__ = _pythonAPI.delete_MemoryMapInterface

    def setMemoryMaps(self, component):
        """
        setMemoryMaps(MemoryMapInterface self, QSharedPointer< Component > component)

        Parameters
        ----------
        component: QSharedPointer< Component >

        """
        return _pythonAPI.MemoryMapInterface_setMemoryMaps(self, component)


    def getMemoryRemapIndex(self, mapName, remapName):
        """
        getMemoryRemapIndex(MemoryMapInterface self, std::string const & mapName, std::string const & remapName) -> int

        Parameters
        ----------
        mapName: std::string const &
        remapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_getMemoryRemapIndex(self, mapName, remapName)


    def getIndexedRemapName(self, mapName, itemIndex):
        """
        getIndexedRemapName(MemoryMapInterface self, std::string mapName, int const & itemIndex) -> std::string

        Parameters
        ----------
        mapName: std::string
        itemIndex: int const &

        """
        return _pythonAPI.MemoryMapInterface_getIndexedRemapName(self, mapName, itemIndex)


    def remapCount(self, mapName):
        """
        remapCount(MemoryMapInterface self, std::string const & mapName) -> int

        Parameters
        ----------
        mapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_remapCount(self, mapName)


    def getRemapNames(self, mapName):
        """
        getRemapNames(MemoryMapInterface self, std::string const & mapName) -> stringVector

        Parameters
        ----------
        mapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_getRemapNames(self, mapName)


    def setRemapName(self, mapName, currentName, newName):
        """
        setRemapName(MemoryMapInterface self, std::string const & mapName, std::string const & currentName, std::string const & newName) -> bool

        Parameters
        ----------
        mapName: std::string const &
        currentName: std::string const &
        newName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_setRemapName(self, mapName, currentName, newName)


    def getRemapDescription(self, mapName, remapName):
        """
        getRemapDescription(MemoryMapInterface self, std::string const & mapName, std::string const & remapName) -> std::string

        Parameters
        ----------
        mapName: std::string const &
        remapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_getRemapDescription(self, mapName, remapName)


    def setRemapDescription(self, mapName, itemName, newDescription):
        """
        setRemapDescription(MemoryMapInterface self, std::string const & mapName, std::string const & itemName, std::string const & newDescription) -> bool

        Parameters
        ----------
        mapName: std::string const &
        itemName: std::string const &
        newDescription: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_setRemapDescription(self, mapName, itemName, newDescription)


    def getIsPresentValue(self, *args):
        """
        getIsPresentValue(MemoryMapInterface self, std::string const & mapName, std::string const & remapName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        mapName: std::string const &
        remapName: std::string const &
        baseNumber: int const &

        getIsPresentValue(MemoryMapInterface self, std::string const & mapName, std::string const & remapName) -> std::string

        Parameters
        ----------
        mapName: std::string const &
        remapName: std::string const &

        getIsPresentValue(MemoryMapInterface self, std::string const & mapName) -> std::string

        Parameters
        ----------
        mapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_getIsPresentValue(self, *args)


    def getIsPresentFormattedExpression(self, *args):
        """
        getIsPresentFormattedExpression(MemoryMapInterface self, std::string const & mapName, std::string const & remapName) -> std::string

        Parameters
        ----------
        mapName: std::string const &
        remapName: std::string const &

        getIsPresentFormattedExpression(MemoryMapInterface self, std::string const & mapName) -> std::string

        Parameters
        ----------
        mapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_getIsPresentFormattedExpression(self, *args)


    def getIsPresentExpression(self, *args):
        """
        getIsPresentExpression(MemoryMapInterface self, std::string const & mapName, std::string const & remapName) -> std::string

        Parameters
        ----------
        mapName: std::string const &
        remapName: std::string const &

        getIsPresentExpression(MemoryMapInterface self, std::string const & mapName) -> std::string

        Parameters
        ----------
        mapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_getIsPresentExpression(self, *args)


    def setIsPresent(self, *args):
        """
        setIsPresent(MemoryMapInterface self, std::string const & mapName, std::string const & newIsPresent, std::string const & remapName) -> bool

        Parameters
        ----------
        mapName: std::string const &
        newIsPresent: std::string const &
        remapName: std::string const &

        setIsPresent(MemoryMapInterface self, std::string const & mapName, std::string const & newIsPresent) -> bool

        Parameters
        ----------
        mapName: std::string const &
        newIsPresent: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_setIsPresent(self, *args)


    def getRemapState(self, *args):
        """
        getRemapState(MemoryMapInterface self, std::string const & mapName, std::string const & remapName) -> std::string

        Parameters
        ----------
        mapName: std::string const &
        remapName: std::string const &

        getRemapState(MemoryMapInterface self, std::string const & mapName) -> std::string

        Parameters
        ----------
        mapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_getRemapState(self, *args)


    def setRemapState(self, mapName, remapName, newRemapState):
        """
        setRemapState(MemoryMapInterface self, std::string const & mapName, std::string const & remapName, std::string const & newRemapState) -> bool

        Parameters
        ----------
        mapName: std::string const &
        remapName: std::string const &
        newRemapState: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_setRemapState(self, mapName, remapName, newRemapState)


    def getAddressUnitBits(self, mapName):
        """
        getAddressUnitBits(MemoryMapInterface self, std::string const & mapName) -> std::string

        Parameters
        ----------
        mapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_getAddressUnitBits(self, mapName)


    def setAddressUnitBits(self, mapName, newAddressUnitBits):
        """
        setAddressUnitBits(MemoryMapInterface self, std::string const & mapName, std::string const & newAddressUnitBits) -> bool

        Parameters
        ----------
        mapName: std::string const &
        newAddressUnitBits: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_setAddressUnitBits(self, mapName, newAddressUnitBits)


    def getInterfaceBinding(self, mapName):
        """
        getInterfaceBinding(MemoryMapInterface self, std::string const & mapName) -> std::string

        Parameters
        ----------
        mapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_getInterfaceBinding(self, mapName)


    def getAssociatedSlaveInterfaces(self, mapName):
        """
        getAssociatedSlaveInterfaces(MemoryMapInterface self, std::string const & mapName) -> stringVector

        Parameters
        ----------
        mapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_getAssociatedSlaveInterfaces(self, mapName)


    def getMapExpressions(self, mapName, remapName):
        """
        getMapExpressions(MemoryMapInterface self, std::string const & mapName, std::string const & remapName) -> stringVector

        Parameters
        ----------
        mapName: std::string const &
        remapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_getMapExpressions(self, mapName, remapName)


    def getAllReferencesToIdInRemapItem(self, mapName, remapName, valueID):
        """
        getAllReferencesToIdInRemapItem(MemoryMapInterface self, std::string const & mapName, std::string & remapName, std::string const & valueID) -> int

        Parameters
        ----------
        mapName: std::string const &
        remapName: std::string &
        valueID: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_getAllReferencesToIdInRemapItem(self, mapName, remapName, valueID)


    def remapHasValidName(self, mapName, itemName):
        """
        remapHasValidName(MemoryMapInterface self, std::string const & mapName, std::string const & itemName) -> bool

        Parameters
        ----------
        mapName: std::string const &
        itemName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_remapHasValidName(self, mapName, itemName)


    def remapHasValidRemapState(self, mapName, itemName):
        """
        remapHasValidRemapState(MemoryMapInterface self, std::string const & mapName, std::string const & itemName) -> bool

        Parameters
        ----------
        mapName: std::string const &
        itemName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_remapHasValidRemapState(self, mapName, itemName)


    def itemHasValidIsPresent(self, *args):
        """
        itemHasValidIsPresent(MemoryMapInterface self, std::string const & mapName, std::string const & remapName) -> bool

        Parameters
        ----------
        mapName: std::string const &
        remapName: std::string const &

        itemHasValidIsPresent(MemoryMapInterface self, std::string const & mapName) -> bool

        Parameters
        ----------
        mapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_itemHasValidIsPresent(self, *args)


    def memoryMapHasValidAddressUnitBits(self, mapName):
        """
        memoryMapHasValidAddressUnitBits(MemoryMapInterface self, std::string const & mapName) -> bool

        Parameters
        ----------
        mapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_memoryMapHasValidAddressUnitBits(self, mapName)


    def addMemoryMap(self, *args):
        """
        addMemoryMap(MemoryMapInterface self, int const & row, std::string const & newMapName)

        Parameters
        ----------
        row: int const &
        newMapName: std::string const &

        addMemoryMap(MemoryMapInterface self, int const & row)

        Parameters
        ----------
        row: int const &

        """
        return _pythonAPI.MemoryMapInterface_addMemoryMap(self, *args)


    def addMemoryRemap(self, *args):
        """
        addMemoryRemap(MemoryMapInterface self, std::string const & mapName, std::string const & newRemapName)

        Parameters
        ----------
        mapName: std::string const &
        newRemapName: std::string const &

        addMemoryRemap(MemoryMapInterface self, std::string const & mapName)

        Parameters
        ----------
        mapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_addMemoryRemap(self, *args)


    def removeMap(self, mapName):
        """
        removeMap(MemoryMapInterface self, std::string const & mapName) -> bool

        Parameters
        ----------
        mapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_removeMap(self, mapName)


    def removeRemap(self, mapName, remapName):
        """
        removeRemap(MemoryMapInterface self, std::string const & mapName, std::string remapName) -> bool

        Parameters
        ----------
        mapName: std::string const &
        remapName: std::string

        """
        return _pythonAPI.MemoryMapInterface_removeRemap(self, mapName, remapName)


    def copyRows(self, selectedRows):
        """
        copyRows(MemoryMapInterface self, stringVector selectedRows)

        Parameters
        ----------
        selectedRows: std::vector< std::string,std::allocator< std::string > >

        """
        return _pythonAPI.MemoryMapInterface_copyRows(self, selectedRows)


    def pasteMemoryMaps(self):
        """
        pasteMemoryMaps(MemoryMapInterface self) -> stringVector

        Parameters
        ----------
        self: MemoryMapInterface *

        """
        return _pythonAPI.MemoryMapInterface_pasteMemoryMaps(self)


    def pasteMemoryRemaps(self, memoryMapName):
        """
        pasteMemoryRemaps(MemoryMapInterface self, std::string const & memoryMapName) -> stringVector

        Parameters
        ----------
        memoryMapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_pasteMemoryRemaps(self, memoryMapName)


    def getSubInterface(self):
        """
        getSubInterface(MemoryMapInterface self) -> AddressBlockInterface

        Parameters
        ----------
        self: MemoryMapInterface const *

        """
        return _pythonAPI.MemoryMapInterface_getSubInterface(self)


    def getMapPointer(self, mapName):
        """
        getMapPointer(MemoryMapInterface self, std::string const & mapName) -> MemoryMap *

        Parameters
        ----------
        mapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_getMapPointer(self, mapName)


    def getRemapPointer(self, mapName, remapName):
        """
        getRemapPointer(MemoryMapInterface self, std::string const & mapName, std::string const & remapName) -> MemoryRemap *

        Parameters
        ----------
        mapName: std::string const &
        remapName: std::string const &

        """
        return _pythonAPI.MemoryMapInterface_getRemapPointer(self, mapName, remapName)

MemoryMapInterface.setMemoryMaps = new_instancemethod(_pythonAPI.MemoryMapInterface_setMemoryMaps, None, MemoryMapInterface)
MemoryMapInterface.getMemoryRemapIndex = new_instancemethod(_pythonAPI.MemoryMapInterface_getMemoryRemapIndex, None, MemoryMapInterface)
MemoryMapInterface.getIndexedRemapName = new_instancemethod(_pythonAPI.MemoryMapInterface_getIndexedRemapName, None, MemoryMapInterface)
MemoryMapInterface.remapCount = new_instancemethod(_pythonAPI.MemoryMapInterface_remapCount, None, MemoryMapInterface)
MemoryMapInterface.getRemapNames = new_instancemethod(_pythonAPI.MemoryMapInterface_getRemapNames, None, MemoryMapInterface)
MemoryMapInterface.setRemapName = new_instancemethod(_pythonAPI.MemoryMapInterface_setRemapName, None, MemoryMapInterface)
MemoryMapInterface.getRemapDescription = new_instancemethod(_pythonAPI.MemoryMapInterface_getRemapDescription, None, MemoryMapInterface)
MemoryMapInterface.setRemapDescription = new_instancemethod(_pythonAPI.MemoryMapInterface_setRemapDescription, None, MemoryMapInterface)
MemoryMapInterface.getIsPresentValue = new_instancemethod(_pythonAPI.MemoryMapInterface_getIsPresentValue, None, MemoryMapInterface)
MemoryMapInterface.getIsPresentFormattedExpression = new_instancemethod(_pythonAPI.MemoryMapInterface_getIsPresentFormattedExpression, None, MemoryMapInterface)
MemoryMapInterface.getIsPresentExpression = new_instancemethod(_pythonAPI.MemoryMapInterface_getIsPresentExpression, None, MemoryMapInterface)
MemoryMapInterface.setIsPresent = new_instancemethod(_pythonAPI.MemoryMapInterface_setIsPresent, None, MemoryMapInterface)
MemoryMapInterface.getRemapState = new_instancemethod(_pythonAPI.MemoryMapInterface_getRemapState, None, MemoryMapInterface)
MemoryMapInterface.setRemapState = new_instancemethod(_pythonAPI.MemoryMapInterface_setRemapState, None, MemoryMapInterface)
MemoryMapInterface.getAddressUnitBits = new_instancemethod(_pythonAPI.MemoryMapInterface_getAddressUnitBits, None, MemoryMapInterface)
MemoryMapInterface.setAddressUnitBits = new_instancemethod(_pythonAPI.MemoryMapInterface_setAddressUnitBits, None, MemoryMapInterface)
MemoryMapInterface.getInterfaceBinding = new_instancemethod(_pythonAPI.MemoryMapInterface_getInterfaceBinding, None, MemoryMapInterface)
MemoryMapInterface.getAssociatedSlaveInterfaces = new_instancemethod(_pythonAPI.MemoryMapInterface_getAssociatedSlaveInterfaces, None, MemoryMapInterface)
MemoryMapInterface.getMapExpressions = new_instancemethod(_pythonAPI.MemoryMapInterface_getMapExpressions, None, MemoryMapInterface)
MemoryMapInterface.getAllReferencesToIdInRemapItem = new_instancemethod(_pythonAPI.MemoryMapInterface_getAllReferencesToIdInRemapItem, None, MemoryMapInterface)
MemoryMapInterface.remapHasValidName = new_instancemethod(_pythonAPI.MemoryMapInterface_remapHasValidName, None, MemoryMapInterface)
MemoryMapInterface.remapHasValidRemapState = new_instancemethod(_pythonAPI.MemoryMapInterface_remapHasValidRemapState, None, MemoryMapInterface)
MemoryMapInterface.itemHasValidIsPresent = new_instancemethod(_pythonAPI.MemoryMapInterface_itemHasValidIsPresent, None, MemoryMapInterface)
MemoryMapInterface.memoryMapHasValidAddressUnitBits = new_instancemethod(_pythonAPI.MemoryMapInterface_memoryMapHasValidAddressUnitBits, None, MemoryMapInterface)
MemoryMapInterface.addMemoryMap = new_instancemethod(_pythonAPI.MemoryMapInterface_addMemoryMap, None, MemoryMapInterface)
MemoryMapInterface.addMemoryRemap = new_instancemethod(_pythonAPI.MemoryMapInterface_addMemoryRemap, None, MemoryMapInterface)
MemoryMapInterface.removeMap = new_instancemethod(_pythonAPI.MemoryMapInterface_removeMap, None, MemoryMapInterface)
MemoryMapInterface.removeRemap = new_instancemethod(_pythonAPI.MemoryMapInterface_removeRemap, None, MemoryMapInterface)
MemoryMapInterface.copyRows = new_instancemethod(_pythonAPI.MemoryMapInterface_copyRows, None, MemoryMapInterface)
MemoryMapInterface.pasteMemoryMaps = new_instancemethod(_pythonAPI.MemoryMapInterface_pasteMemoryMaps, None, MemoryMapInterface)
MemoryMapInterface.pasteMemoryRemaps = new_instancemethod(_pythonAPI.MemoryMapInterface_pasteMemoryRemaps, None, MemoryMapInterface)
MemoryMapInterface.getSubInterface = new_instancemethod(_pythonAPI.MemoryMapInterface_getSubInterface, None, MemoryMapInterface)
MemoryMapInterface.getMapPointer = new_instancemethod(_pythonAPI.MemoryMapInterface_getMapPointer, None, MemoryMapInterface)
MemoryMapInterface.getRemapPointer = new_instancemethod(_pythonAPI.MemoryMapInterface_getRemapPointer, None, MemoryMapInterface)
MemoryMapInterface_swigregister = _pythonAPI.MemoryMapInterface_swigregister
MemoryMapInterface_swigregister(MemoryMapInterface)

class AddressBlockInterface(ParameterizableInterface, NameGroupInterface):
    """Proxy of C++ AddressBlockInterface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, blockValidator, expressionParser, expressionFormatter, subInterface):
        """
        __init__(AddressBlockInterface self, QSharedPointer< AddressBlockValidator > blockValidator, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter, RegisterInterface subInterface) -> AddressBlockInterface

        Parameters
        ----------
        blockValidator: QSharedPointer< AddressBlockValidator >
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >
        subInterface: RegisterInterface *

        """
        _pythonAPI.AddressBlockInterface_swiginit(self, _pythonAPI.new_AddressBlockInterface(blockValidator, expressionParser, expressionFormatter, subInterface))
    __swig_destroy__ = _pythonAPI.delete_AddressBlockInterface

    def setAddressBlocks(self, newAddressBlocks):
        """
        setAddressBlocks(AddressBlockInterface self, QSharedPointer< QList< QSharedPointer< MemoryBlockBase > > > newAddressBlocks)

        Parameters
        ----------
        newAddressBlocks: QSharedPointer< QList< QSharedPointer< MemoryBlockBase > > >

        """
        return _pythonAPI.AddressBlockInterface_setAddressBlocks(self, newAddressBlocks)


    def getBaseAddressValue(self, blockName, baseNumber=0):
        """
        getBaseAddressValue(AddressBlockInterface self, std::string const & blockName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        blockName: std::string const &
        baseNumber: int const &

        getBaseAddressValue(AddressBlockInterface self, std::string const & blockName) -> std::string

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getBaseAddressValue(self, blockName, baseNumber)


    def getBaseAddressFormattedExpression(self, blockName):
        """
        getBaseAddressFormattedExpression(AddressBlockInterface self, std::string const & blockName) -> std::string

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getBaseAddressFormattedExpression(self, blockName)


    def getBaseAddressExpression(self, blockName):
        """
        getBaseAddressExpression(AddressBlockInterface self, std::string const & blockName) -> std::string

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getBaseAddressExpression(self, blockName)


    def setBaseAddress(self, blockName, newBaseAdress):
        """
        setBaseAddress(AddressBlockInterface self, std::string const & blockName, std::string const & newBaseAdress) -> bool

        Parameters
        ----------
        blockName: std::string const &
        newBaseAdress: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_setBaseAddress(self, blockName, newBaseAdress)


    def getIsPresentValue(self, blockName, baseNumber=0):
        """
        getIsPresentValue(AddressBlockInterface self, std::string const & blockName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        blockName: std::string const &
        baseNumber: int const &

        getIsPresentValue(AddressBlockInterface self, std::string const & blockName) -> std::string

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getIsPresentValue(self, blockName, baseNumber)


    def getIsPresentFormattedExpression(self, blockName):
        """
        getIsPresentFormattedExpression(AddressBlockInterface self, std::string const & blockName) -> std::string

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getIsPresentFormattedExpression(self, blockName)


    def getIsPresentExpression(self, blockName):
        """
        getIsPresentExpression(AddressBlockInterface self, std::string const & blockName) -> std::string

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getIsPresentExpression(self, blockName)


    def setIsPresent(self, blockName, newIsPresent):
        """
        setIsPresent(AddressBlockInterface self, std::string const & blockName, std::string const & newIsPresent) -> bool

        Parameters
        ----------
        blockName: std::string const &
        newIsPresent: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_setIsPresent(self, blockName, newIsPresent)


    def getRangeValue(self, blockName, baseNumber=0):
        """
        getRangeValue(AddressBlockInterface self, std::string const & blockName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        blockName: std::string const &
        baseNumber: int const &

        getRangeValue(AddressBlockInterface self, std::string const & blockName) -> std::string

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getRangeValue(self, blockName, baseNumber)


    def getRangeFormattedExpression(self, blockName):
        """
        getRangeFormattedExpression(AddressBlockInterface self, std::string const & blockName) -> std::string

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getRangeFormattedExpression(self, blockName)


    def getRangeExpression(self, blockName):
        """
        getRangeExpression(AddressBlockInterface self, std::string const & blockName) -> std::string

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getRangeExpression(self, blockName)


    def setRange(self, blockName, newRange):
        """
        setRange(AddressBlockInterface self, std::string const & blockName, std::string const & newRange) -> bool

        Parameters
        ----------
        blockName: std::string const &
        newRange: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_setRange(self, blockName, newRange)


    def getWidthValue(self, blockName, baseNumber=0):
        """
        getWidthValue(AddressBlockInterface self, std::string const & blockName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        blockName: std::string const &
        baseNumber: int const &

        getWidthValue(AddressBlockInterface self, std::string const & blockName) -> std::string

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getWidthValue(self, blockName, baseNumber)


    def getWidthFormattedExpression(self, blockName):
        """
        getWidthFormattedExpression(AddressBlockInterface self, std::string const & blockName) -> std::string

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getWidthFormattedExpression(self, blockName)


    def getWidthExpression(self, blockName):
        """
        getWidthExpression(AddressBlockInterface self, std::string const & blockName) -> std::string

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getWidthExpression(self, blockName)


    def setWidth(self, blockName, newWidth):
        """
        setWidth(AddressBlockInterface self, std::string const & blockName, std::string const & newWidth) -> bool

        Parameters
        ----------
        blockName: std::string const &
        newWidth: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_setWidth(self, blockName, newWidth)


    def getUsageString(self, blockName):
        """
        getUsageString(AddressBlockInterface self, std::string const & blockName) -> std::string

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getUsageString(self, blockName)


    def getUsage(self, blockName):
        """
        getUsage(AddressBlockInterface self, std::string const & blockName) -> General::Usage

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getUsage(self, blockName)


    def setUsage(self, blockName, newUsage):
        """
        setUsage(AddressBlockInterface self, std::string const & blockName, std::string const & newUsage) -> bool

        Parameters
        ----------
        blockName: std::string const &
        newUsage: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_setUsage(self, blockName, newUsage)


    def getAccessString(self, blockName):
        """
        getAccessString(AddressBlockInterface self, std::string const & blockName) -> std::string

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getAccessString(self, blockName)


    def getAccess(self, blockName):
        """
        getAccess(AddressBlockInterface self, std::string const & blockName) -> AccessTypes::Access

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getAccess(self, blockName)


    def setAccess(self, blockName, newAccess):
        """
        setAccess(AddressBlockInterface self, std::string const & blockName, std::string const & newAccess) -> bool

        Parameters
        ----------
        blockName: std::string const &
        newAccess: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_setAccess(self, blockName, newAccess)


    def getVolatile(self, blockName):
        """
        getVolatile(AddressBlockInterface self, std::string const & blockName) -> std::string

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_getVolatile(self, blockName)


    def setVolatile(self, *args):
        """
        setVolatile(AddressBlockInterface self, std::string const & blockName, bool newVolatile) -> bool

        Parameters
        ----------
        blockName: std::string const &
        newVolatile: bool

        setVolatile(AddressBlockInterface self, std::string const & blockName, std::string const & newVolatileValue) -> bool

        Parameters
        ----------
        blockName: std::string const &
        newVolatileValue: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_setVolatile(self, *args)


    def hasValidBaseAddress(self, itemName):
        """
        hasValidBaseAddress(AddressBlockInterface self, std::string const & itemName) -> bool

        Parameters
        ----------
        itemName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_hasValidBaseAddress(self, itemName)


    def hasValidRange(self, itemName):
        """
        hasValidRange(AddressBlockInterface self, std::string const & itemName) -> bool

        Parameters
        ----------
        itemName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_hasValidRange(self, itemName)


    def hasValidWidth(self, itemName):
        """
        hasValidWidth(AddressBlockInterface self, std::string const & itemName) -> bool

        Parameters
        ----------
        itemName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_hasValidWidth(self, itemName)


    def hasValidIsPresent(self, itemName):
        """
        hasValidIsPresent(AddressBlockInterface self, std::string const & itemName) -> bool

        Parameters
        ----------
        itemName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_hasValidIsPresent(self, itemName)


    def hasValidUsage(self, itemName):
        """
        hasValidUsage(AddressBlockInterface self, std::string const & itemName) -> bool

        Parameters
        ----------
        itemName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_hasValidUsage(self, itemName)


    def addBlock(self, *args):
        """
        addBlock(AddressBlockInterface self, int const & row, std::string const & newBlockName)

        Parameters
        ----------
        row: int const &
        newBlockName: std::string const &

        addBlock(AddressBlockInterface self, int const & row)

        Parameters
        ----------
        row: int const &

        """
        return _pythonAPI.AddressBlockInterface_addBlock(self, *args)


    def removeBlock(self, blockName):
        """
        removeBlock(AddressBlockInterface self, std::string const & blockName) -> bool

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_removeBlock(self, blockName)


    def copyRows(self, selectedRows):
        """
        copyRows(AddressBlockInterface self, std::vector< int,std::allocator< int > > selectedRows)

        Parameters
        ----------
        selectedRows: std::vector< int,std::allocator< int > >

        """
        return _pythonAPI.AddressBlockInterface_copyRows(self, selectedRows)


    def pasteRows(self):
        """
        pasteRows(AddressBlockInterface self) -> stringVector

        Parameters
        ----------
        self: AddressBlockInterface *

        """
        return _pythonAPI.AddressBlockInterface_pasteRows(self)


    def getPasteRowCount(self):
        """
        getPasteRowCount(AddressBlockInterface self) -> int

        Parameters
        ----------
        self: AddressBlockInterface const *

        """
        return _pythonAPI.AddressBlockInterface_getPasteRowCount(self)


    def getExpressionsInSelectedItems(self, itemNames):
        """
        getExpressionsInSelectedItems(AddressBlockInterface self, stringVector itemNames) -> stringVector

        Parameters
        ----------
        itemNames: std::vector< std::string,std::allocator< std::string > >

        """
        return _pythonAPI.AddressBlockInterface_getExpressionsInSelectedItems(self, itemNames)


    def setAddressUnitBits(self, newAddressUnitbits):
        """
        setAddressUnitBits(AddressBlockInterface self, std::string const & newAddressUnitbits)

        Parameters
        ----------
        newAddressUnitbits: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_setAddressUnitBits(self, newAddressUnitbits)


    def getSubInterface(self):
        """
        getSubInterface(AddressBlockInterface self) -> RegisterInterface

        Parameters
        ----------
        self: AddressBlockInterface const *

        """
        return _pythonAPI.AddressBlockInterface_getSubInterface(self)


    def hasRegisters(self, blockName):
        """
        hasRegisters(AddressBlockInterface self, std::string const & blockName) -> bool

        Parameters
        ----------
        blockName: std::string const &

        """
        return _pythonAPI.AddressBlockInterface_hasRegisters(self, blockName)

AddressBlockInterface.setAddressBlocks = new_instancemethod(_pythonAPI.AddressBlockInterface_setAddressBlocks, None, AddressBlockInterface)
AddressBlockInterface.getBaseAddressValue = new_instancemethod(_pythonAPI.AddressBlockInterface_getBaseAddressValue, None, AddressBlockInterface)
AddressBlockInterface.getBaseAddressFormattedExpression = new_instancemethod(_pythonAPI.AddressBlockInterface_getBaseAddressFormattedExpression, None, AddressBlockInterface)
AddressBlockInterface.getBaseAddressExpression = new_instancemethod(_pythonAPI.AddressBlockInterface_getBaseAddressExpression, None, AddressBlockInterface)
AddressBlockInterface.setBaseAddress = new_instancemethod(_pythonAPI.AddressBlockInterface_setBaseAddress, None, AddressBlockInterface)
AddressBlockInterface.getIsPresentValue = new_instancemethod(_pythonAPI.AddressBlockInterface_getIsPresentValue, None, AddressBlockInterface)
AddressBlockInterface.getIsPresentFormattedExpression = new_instancemethod(_pythonAPI.AddressBlockInterface_getIsPresentFormattedExpression, None, AddressBlockInterface)
AddressBlockInterface.getIsPresentExpression = new_instancemethod(_pythonAPI.AddressBlockInterface_getIsPresentExpression, None, AddressBlockInterface)
AddressBlockInterface.setIsPresent = new_instancemethod(_pythonAPI.AddressBlockInterface_setIsPresent, None, AddressBlockInterface)
AddressBlockInterface.getRangeValue = new_instancemethod(_pythonAPI.AddressBlockInterface_getRangeValue, None, AddressBlockInterface)
AddressBlockInterface.getRangeFormattedExpression = new_instancemethod(_pythonAPI.AddressBlockInterface_getRangeFormattedExpression, None, AddressBlockInterface)
AddressBlockInterface.getRangeExpression = new_instancemethod(_pythonAPI.AddressBlockInterface_getRangeExpression, None, AddressBlockInterface)
AddressBlockInterface.setRange = new_instancemethod(_pythonAPI.AddressBlockInterface_setRange, None, AddressBlockInterface)
AddressBlockInterface.getWidthValue = new_instancemethod(_pythonAPI.AddressBlockInterface_getWidthValue, None, AddressBlockInterface)
AddressBlockInterface.getWidthFormattedExpression = new_instancemethod(_pythonAPI.AddressBlockInterface_getWidthFormattedExpression, None, AddressBlockInterface)
AddressBlockInterface.getWidthExpression = new_instancemethod(_pythonAPI.AddressBlockInterface_getWidthExpression, None, AddressBlockInterface)
AddressBlockInterface.setWidth = new_instancemethod(_pythonAPI.AddressBlockInterface_setWidth, None, AddressBlockInterface)
AddressBlockInterface.getUsageString = new_instancemethod(_pythonAPI.AddressBlockInterface_getUsageString, None, AddressBlockInterface)
AddressBlockInterface.getUsage = new_instancemethod(_pythonAPI.AddressBlockInterface_getUsage, None, AddressBlockInterface)
AddressBlockInterface.setUsage = new_instancemethod(_pythonAPI.AddressBlockInterface_setUsage, None, AddressBlockInterface)
AddressBlockInterface.getAccessString = new_instancemethod(_pythonAPI.AddressBlockInterface_getAccessString, None, AddressBlockInterface)
AddressBlockInterface.getAccess = new_instancemethod(_pythonAPI.AddressBlockInterface_getAccess, None, AddressBlockInterface)
AddressBlockInterface.setAccess = new_instancemethod(_pythonAPI.AddressBlockInterface_setAccess, None, AddressBlockInterface)
AddressBlockInterface.getVolatile = new_instancemethod(_pythonAPI.AddressBlockInterface_getVolatile, None, AddressBlockInterface)
AddressBlockInterface.setVolatile = new_instancemethod(_pythonAPI.AddressBlockInterface_setVolatile, None, AddressBlockInterface)
AddressBlockInterface.hasValidBaseAddress = new_instancemethod(_pythonAPI.AddressBlockInterface_hasValidBaseAddress, None, AddressBlockInterface)
AddressBlockInterface.hasValidRange = new_instancemethod(_pythonAPI.AddressBlockInterface_hasValidRange, None, AddressBlockInterface)
AddressBlockInterface.hasValidWidth = new_instancemethod(_pythonAPI.AddressBlockInterface_hasValidWidth, None, AddressBlockInterface)
AddressBlockInterface.hasValidIsPresent = new_instancemethod(_pythonAPI.AddressBlockInterface_hasValidIsPresent, None, AddressBlockInterface)
AddressBlockInterface.hasValidUsage = new_instancemethod(_pythonAPI.AddressBlockInterface_hasValidUsage, None, AddressBlockInterface)
AddressBlockInterface.addBlock = new_instancemethod(_pythonAPI.AddressBlockInterface_addBlock, None, AddressBlockInterface)
AddressBlockInterface.removeBlock = new_instancemethod(_pythonAPI.AddressBlockInterface_removeBlock, None, AddressBlockInterface)
AddressBlockInterface.copyRows = new_instancemethod(_pythonAPI.AddressBlockInterface_copyRows, None, AddressBlockInterface)
AddressBlockInterface.pasteRows = new_instancemethod(_pythonAPI.AddressBlockInterface_pasteRows, None, AddressBlockInterface)
AddressBlockInterface.getPasteRowCount = new_instancemethod(_pythonAPI.AddressBlockInterface_getPasteRowCount, None, AddressBlockInterface)
AddressBlockInterface.getExpressionsInSelectedItems = new_instancemethod(_pythonAPI.AddressBlockInterface_getExpressionsInSelectedItems, None, AddressBlockInterface)
AddressBlockInterface.setAddressUnitBits = new_instancemethod(_pythonAPI.AddressBlockInterface_setAddressUnitBits, None, AddressBlockInterface)
AddressBlockInterface.getSubInterface = new_instancemethod(_pythonAPI.AddressBlockInterface_getSubInterface, None, AddressBlockInterface)
AddressBlockInterface.hasRegisters = new_instancemethod(_pythonAPI.AddressBlockInterface_hasRegisters, None, AddressBlockInterface)
AddressBlockInterface_swigregister = _pythonAPI.AddressBlockInterface_swigregister
AddressBlockInterface_swigregister(AddressBlockInterface)

class RegisterInterface(ParameterizableInterface, NameGroupInterface):
    """Proxy of C++ RegisterInterface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, validator, expressionParser, expressionFormatter, subInterface):
        """
        __init__(RegisterInterface self, QSharedPointer< RegisterValidator > validator, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter, FieldInterface subInterface) -> RegisterInterface

        Parameters
        ----------
        validator: QSharedPointer< RegisterValidator >
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >
        subInterface: FieldInterface *

        """
        _pythonAPI.RegisterInterface_swiginit(self, _pythonAPI.new_RegisterInterface(validator, expressionParser, expressionFormatter, subInterface))
    __swig_destroy__ = _pythonAPI.delete_RegisterInterface

    def setRegisters(self, newRegisterData):
        """
        setRegisters(RegisterInterface self, QSharedPointer< QList< QSharedPointer< RegisterBase > > > newRegisterData)

        Parameters
        ----------
        newRegisterData: QSharedPointer< QList< QSharedPointer< RegisterBase > > >

        """
        return _pythonAPI.RegisterInterface_setRegisters(self, newRegisterData)


    def registerDataCount(self):
        """
        registerDataCount(RegisterInterface self) -> int

        Parameters
        ----------
        self: RegisterInterface const *

        """
        return _pythonAPI.RegisterInterface_registerDataCount(self)


    def indexInRegisterData(self, index):
        """
        indexInRegisterData(RegisterInterface self, int const & index) -> int

        Parameters
        ----------
        index: int const &

        """
        return _pythonAPI.RegisterInterface_indexInRegisterData(self, index)


    def getOffsetValue(self, registerName, baseNumber=0):
        """
        getOffsetValue(RegisterInterface self, std::string const & registerName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        registerName: std::string const &
        baseNumber: int const &

        getOffsetValue(RegisterInterface self, std::string const & registerName) -> std::string

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_getOffsetValue(self, registerName, baseNumber)


    def getOffsetFormattedExpression(self, registerName):
        """
        getOffsetFormattedExpression(RegisterInterface self, std::string const & registerName) -> std::string

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_getOffsetFormattedExpression(self, registerName)


    def getOffsetExpression(self, registerName):
        """
        getOffsetExpression(RegisterInterface self, std::string const & registerName) -> std::string

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_getOffsetExpression(self, registerName)


    def setOffset(self, registerName, newOffset):
        """
        setOffset(RegisterInterface self, std::string const & registerName, std::string const & newOffset) -> bool

        Parameters
        ----------
        registerName: std::string const &
        newOffset: std::string const &

        """
        return _pythonAPI.RegisterInterface_setOffset(self, registerName, newOffset)


    def getDimensionValue(self, registerName, baseNumber=0):
        """
        getDimensionValue(RegisterInterface self, std::string const & registerName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        registerName: std::string const &
        baseNumber: int const &

        getDimensionValue(RegisterInterface self, std::string const & registerName) -> std::string

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_getDimensionValue(self, registerName, baseNumber)


    def getDimensionFormattedExpression(self, registerName):
        """
        getDimensionFormattedExpression(RegisterInterface self, std::string const & registerName) -> std::string

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_getDimensionFormattedExpression(self, registerName)


    def getDimensionExpression(self, registerName):
        """
        getDimensionExpression(RegisterInterface self, std::string const & registerName) -> std::string

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_getDimensionExpression(self, registerName)


    def setDimension(self, registerName, newDimension):
        """
        setDimension(RegisterInterface self, std::string const & registerName, std::string const & newDimension) -> bool

        Parameters
        ----------
        registerName: std::string const &
        newDimension: std::string const &

        """
        return _pythonAPI.RegisterInterface_setDimension(self, registerName, newDimension)


    def getIsPresentValue(self, registerName, baseNumber=0):
        """
        getIsPresentValue(RegisterInterface self, std::string const & registerName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        registerName: std::string const &
        baseNumber: int const &

        getIsPresentValue(RegisterInterface self, std::string const & registerName) -> std::string

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_getIsPresentValue(self, registerName, baseNumber)


    def getIsPresentFormattedExpression(self, registerName):
        """
        getIsPresentFormattedExpression(RegisterInterface self, std::string const & registerName) -> std::string

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_getIsPresentFormattedExpression(self, registerName)


    def getIsPresentExpression(self, registerName):
        """
        getIsPresentExpression(RegisterInterface self, std::string const & registerName) -> std::string

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_getIsPresentExpression(self, registerName)


    def setIsPresent(self, registerName, newIsPresent):
        """
        setIsPresent(RegisterInterface self, std::string const & registerName, std::string const & newIsPresent) -> bool

        Parameters
        ----------
        registerName: std::string const &
        newIsPresent: std::string const &

        """
        return _pythonAPI.RegisterInterface_setIsPresent(self, registerName, newIsPresent)


    def getSizeValue(self, registerName, baseNumber=0):
        """
        getSizeValue(RegisterInterface self, std::string const & registerName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        registerName: std::string const &
        baseNumber: int const &

        getSizeValue(RegisterInterface self, std::string const & registerName) -> std::string

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_getSizeValue(self, registerName, baseNumber)


    def getSizeFormattedExpression(self, registerName):
        """
        getSizeFormattedExpression(RegisterInterface self, std::string const & registerName) -> std::string

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_getSizeFormattedExpression(self, registerName)


    def getSizeExpression(self, registerName):
        """
        getSizeExpression(RegisterInterface self, std::string const & registerName) -> std::string

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_getSizeExpression(self, registerName)


    def setSize(self, registerName, newSize):
        """
        setSize(RegisterInterface self, std::string const & registerName, std::string const & newSize) -> bool

        Parameters
        ----------
        registerName: std::string const &
        newSize: std::string const &

        """
        return _pythonAPI.RegisterInterface_setSize(self, registerName, newSize)


    def getVolatile(self, registerName):
        """
        getVolatile(RegisterInterface self, std::string const & registerName) -> std::string

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_getVolatile(self, registerName)


    def setVolatile(self, registerName, newVolatile):
        """
        setVolatile(RegisterInterface self, std::string const & registerName, std::string const & newVolatile) -> bool

        Parameters
        ----------
        registerName: std::string const &
        newVolatile: std::string const &

        """
        return _pythonAPI.RegisterInterface_setVolatile(self, registerName, newVolatile)


    def getAccessString(self, registerName):
        """
        getAccessString(RegisterInterface self, std::string const & registerName) -> std::string

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_getAccessString(self, registerName)


    def getAccess(self, registerName):
        """
        getAccess(RegisterInterface self, std::string const & registerName) -> AccessTypes::Access

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_getAccess(self, registerName)


    def setAccess(self, registerName, newAccess):
        """
        setAccess(RegisterInterface self, std::string const & registerName, std::string const & newAccess) -> bool

        Parameters
        ----------
        registerName: std::string const &
        newAccess: std::string const &

        """
        return _pythonAPI.RegisterInterface_setAccess(self, registerName, newAccess)


    def hasValidDimension(self, registerName):
        """
        hasValidDimension(RegisterInterface self, std::string const & registerName) -> bool

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_hasValidDimension(self, registerName)


    def hasValidOffset(self, registerName):
        """
        hasValidOffset(RegisterInterface self, std::string const & registerName) -> bool

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_hasValidOffset(self, registerName)


    def hasValidIsPresent(self, registerName):
        """
        hasValidIsPresent(RegisterInterface self, std::string const & registerName) -> bool

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_hasValidIsPresent(self, registerName)


    def hasValidSize(self, registerName):
        """
        hasValidSize(RegisterInterface self, std::string const & registerName) -> bool

        Parameters
        ----------
        registerName: std::string const &

        """
        return _pythonAPI.RegisterInterface_hasValidSize(self, registerName)


    def addRegister(self, *args):
        """
        addRegister(RegisterInterface self, int const & row, int const & dataIndex, std::string const & newRegisterName)

        Parameters
        ----------
        row: int const &
        dataIndex: int const &
        newRegisterName: std::string const &

        addRegister(RegisterInterface self, int const & row, int const & dataIndex)

        Parameters
        ----------
        row: int const &
        dataIndex: int const &

        """
        return _pythonAPI.RegisterInterface_addRegister(self, *args)


    def removeRegister(self, registerName, dataIndex):
        """
        removeRegister(RegisterInterface self, std::string const & registerName, int const & dataIndex) -> bool

        Parameters
        ----------
        registerName: std::string const &
        dataIndex: int const &

        """
        return _pythonAPI.RegisterInterface_removeRegister(self, registerName, dataIndex)


    def copyRows(self, selectedRows):
        """
        copyRows(RegisterInterface self, std::vector< int,std::allocator< int > > selectedRows)

        Parameters
        ----------
        selectedRows: std::vector< int,std::allocator< int > >

        """
        return _pythonAPI.RegisterInterface_copyRows(self, selectedRows)


    def pasteRows(self):
        """
        pasteRows(RegisterInterface self) -> stringVector

        Parameters
        ----------
        self: RegisterInterface *

        """
        return _pythonAPI.RegisterInterface_pasteRows(self)


    def getPasteRowCount(self):
        """
        getPasteRowCount(RegisterInterface self) -> int

        Parameters
        ----------
        self: RegisterInterface const *

        """
        return _pythonAPI.RegisterInterface_getPasteRowCount(self)


    def getExpressionsInSelectedRegisters(self, registerNames):
        """
        getExpressionsInSelectedRegisters(RegisterInterface self, stringVector registerNames) -> stringVector

        Parameters
        ----------
        registerNames: std::vector< std::string,std::allocator< std::string > >

        """
        return _pythonAPI.RegisterInterface_getExpressionsInSelectedRegisters(self, registerNames)


    def setAddressUnitBits(self, newAddressUnitbits):
        """
        setAddressUnitBits(RegisterInterface self, int const & newAddressUnitbits)

        Parameters
        ----------
        newAddressUnitbits: int const &

        """
        return _pythonAPI.RegisterInterface_setAddressUnitBits(self, newAddressUnitbits)


    def getSubInterface(self):
        """
        getSubInterface(RegisterInterface self) -> FieldInterface

        Parameters
        ----------
        self: RegisterInterface const *

        """
        return _pythonAPI.RegisterInterface_getSubInterface(self)

RegisterInterface.setRegisters = new_instancemethod(_pythonAPI.RegisterInterface_setRegisters, None, RegisterInterface)
RegisterInterface.registerDataCount = new_instancemethod(_pythonAPI.RegisterInterface_registerDataCount, None, RegisterInterface)
RegisterInterface.indexInRegisterData = new_instancemethod(_pythonAPI.RegisterInterface_indexInRegisterData, None, RegisterInterface)
RegisterInterface.getOffsetValue = new_instancemethod(_pythonAPI.RegisterInterface_getOffsetValue, None, RegisterInterface)
RegisterInterface.getOffsetFormattedExpression = new_instancemethod(_pythonAPI.RegisterInterface_getOffsetFormattedExpression, None, RegisterInterface)
RegisterInterface.getOffsetExpression = new_instancemethod(_pythonAPI.RegisterInterface_getOffsetExpression, None, RegisterInterface)
RegisterInterface.setOffset = new_instancemethod(_pythonAPI.RegisterInterface_setOffset, None, RegisterInterface)
RegisterInterface.getDimensionValue = new_instancemethod(_pythonAPI.RegisterInterface_getDimensionValue, None, RegisterInterface)
RegisterInterface.getDimensionFormattedExpression = new_instancemethod(_pythonAPI.RegisterInterface_getDimensionFormattedExpression, None, RegisterInterface)
RegisterInterface.getDimensionExpression = new_instancemethod(_pythonAPI.RegisterInterface_getDimensionExpression, None, RegisterInterface)
RegisterInterface.setDimension = new_instancemethod(_pythonAPI.RegisterInterface_setDimension, None, RegisterInterface)
RegisterInterface.getIsPresentValue = new_instancemethod(_pythonAPI.RegisterInterface_getIsPresentValue, None, RegisterInterface)
RegisterInterface.getIsPresentFormattedExpression = new_instancemethod(_pythonAPI.RegisterInterface_getIsPresentFormattedExpression, None, RegisterInterface)
RegisterInterface.getIsPresentExpression = new_instancemethod(_pythonAPI.RegisterInterface_getIsPresentExpression, None, RegisterInterface)
RegisterInterface.setIsPresent = new_instancemethod(_pythonAPI.RegisterInterface_setIsPresent, None, RegisterInterface)
RegisterInterface.getSizeValue = new_instancemethod(_pythonAPI.RegisterInterface_getSizeValue, None, RegisterInterface)
RegisterInterface.getSizeFormattedExpression = new_instancemethod(_pythonAPI.RegisterInterface_getSizeFormattedExpression, None, RegisterInterface)
RegisterInterface.getSizeExpression = new_instancemethod(_pythonAPI.RegisterInterface_getSizeExpression, None, RegisterInterface)
RegisterInterface.setSize = new_instancemethod(_pythonAPI.RegisterInterface_setSize, None, RegisterInterface)
RegisterInterface.getVolatile = new_instancemethod(_pythonAPI.RegisterInterface_getVolatile, None, RegisterInterface)
RegisterInterface.setVolatile = new_instancemethod(_pythonAPI.RegisterInterface_setVolatile, None, RegisterInterface)
RegisterInterface.getAccessString = new_instancemethod(_pythonAPI.RegisterInterface_getAccessString, None, RegisterInterface)
RegisterInterface.getAccess = new_instancemethod(_pythonAPI.RegisterInterface_getAccess, None, RegisterInterface)
RegisterInterface.setAccess = new_instancemethod(_pythonAPI.RegisterInterface_setAccess, None, RegisterInterface)
RegisterInterface.hasValidDimension = new_instancemethod(_pythonAPI.RegisterInterface_hasValidDimension, None, RegisterInterface)
RegisterInterface.hasValidOffset = new_instancemethod(_pythonAPI.RegisterInterface_hasValidOffset, None, RegisterInterface)
RegisterInterface.hasValidIsPresent = new_instancemethod(_pythonAPI.RegisterInterface_hasValidIsPresent, None, RegisterInterface)
RegisterInterface.hasValidSize = new_instancemethod(_pythonAPI.RegisterInterface_hasValidSize, None, RegisterInterface)
RegisterInterface.addRegister = new_instancemethod(_pythonAPI.RegisterInterface_addRegister, None, RegisterInterface)
RegisterInterface.removeRegister = new_instancemethod(_pythonAPI.RegisterInterface_removeRegister, None, RegisterInterface)
RegisterInterface.copyRows = new_instancemethod(_pythonAPI.RegisterInterface_copyRows, None, RegisterInterface)
RegisterInterface.pasteRows = new_instancemethod(_pythonAPI.RegisterInterface_pasteRows, None, RegisterInterface)
RegisterInterface.getPasteRowCount = new_instancemethod(_pythonAPI.RegisterInterface_getPasteRowCount, None, RegisterInterface)
RegisterInterface.getExpressionsInSelectedRegisters = new_instancemethod(_pythonAPI.RegisterInterface_getExpressionsInSelectedRegisters, None, RegisterInterface)
RegisterInterface.setAddressUnitBits = new_instancemethod(_pythonAPI.RegisterInterface_setAddressUnitBits, None, RegisterInterface)
RegisterInterface.getSubInterface = new_instancemethod(_pythonAPI.RegisterInterface_getSubInterface, None, RegisterInterface)
RegisterInterface_swigregister = _pythonAPI.RegisterInterface_swigregister
RegisterInterface_swigregister(RegisterInterface)

class FieldInterface(ParameterizableInterface, NameGroupInterface):
    """Proxy of C++ FieldInterface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, validator, expressionParser, expressionFormatter, subInterface):
        """
        __init__(FieldInterface self, QSharedPointer< FieldValidator > validator, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter, ResetInterface subInterface) -> FieldInterface

        Parameters
        ----------
        validator: QSharedPointer< FieldValidator >
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >
        subInterface: ResetInterface *

        """
        _pythonAPI.FieldInterface_swiginit(self, _pythonAPI.new_FieldInterface(validator, expressionParser, expressionFormatter, subInterface))
    __swig_destroy__ = _pythonAPI.delete_FieldInterface

    def setFields(self, newFields):
        """
        setFields(FieldInterface self, QSharedPointer< QList< QSharedPointer< Field > > > newFields)

        Parameters
        ----------
        newFields: QSharedPointer< QList< QSharedPointer< Field > > >

        """
        return _pythonAPI.FieldInterface_setFields(self, newFields)


    def getOffsetValue(self, fieldName, baseNumber=0):
        """
        getOffsetValue(FieldInterface self, std::string const & fieldName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        fieldName: std::string const &
        baseNumber: int const &

        getOffsetValue(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getOffsetValue(self, fieldName, baseNumber)


    def getOffsetFormattedExpression(self, fieldName):
        """
        getOffsetFormattedExpression(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getOffsetFormattedExpression(self, fieldName)


    def getOffsetExpression(self, fieldName):
        """
        getOffsetExpression(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getOffsetExpression(self, fieldName)


    def setOffset(self, fieldName, newOffset):
        """
        setOffset(FieldInterface self, std::string const & fieldName, std::string const & newOffset) -> bool

        Parameters
        ----------
        fieldName: std::string const &
        newOffset: std::string const &

        """
        return _pythonAPI.FieldInterface_setOffset(self, fieldName, newOffset)


    def getWidthValue(self, fieldName, baseNumber=0):
        """
        getWidthValue(FieldInterface self, std::string const & fieldName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        fieldName: std::string const &
        baseNumber: int const &

        getWidthValue(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getWidthValue(self, fieldName, baseNumber)


    def getWidthFormattedExpression(self, fieldName):
        """
        getWidthFormattedExpression(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getWidthFormattedExpression(self, fieldName)


    def getWidthExpression(self, fieldName):
        """
        getWidthExpression(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getWidthExpression(self, fieldName)


    def setWidth(self, fieldName, newWidth):
        """
        setWidth(FieldInterface self, std::string const & fieldName, std::string const & newWidth) -> bool

        Parameters
        ----------
        fieldName: std::string const &
        newWidth: std::string const &

        """
        return _pythonAPI.FieldInterface_setWidth(self, fieldName, newWidth)


    def getResets(self, fieldName):
        """
        getResets(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getResets(self, fieldName)


    def getResetsToolTip(self, fieldName):
        """
        getResetsToolTip(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getResetsToolTip(self, fieldName)


    def getVolatile(self, fieldName):
        """
        getVolatile(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getVolatile(self, fieldName)


    def setVolatile(self, fieldName, newVolatile):
        """
        setVolatile(FieldInterface self, std::string const & fieldName, std::string const & newVolatile) -> bool

        Parameters
        ----------
        fieldName: std::string const &
        newVolatile: std::string const &

        """
        return _pythonAPI.FieldInterface_setVolatile(self, fieldName, newVolatile)


    def getAccessString(self, fieldName):
        """
        getAccessString(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getAccessString(self, fieldName)


    def getAccessType(self, fieldName):
        """
        getAccessType(FieldInterface self, std::string const & fieldName) -> AccessTypes::Access

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getAccessType(self, fieldName)


    def setAccess(self, fieldName, newAccess):
        """
        setAccess(FieldInterface self, std::string const & fieldName, std::string const & newAccess) -> bool

        Parameters
        ----------
        fieldName: std::string const &
        newAccess: std::string const &

        """
        return _pythonAPI.FieldInterface_setAccess(self, fieldName, newAccess)


    def getModifiedWriteString(self, fieldName):
        """
        getModifiedWriteString(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getModifiedWriteString(self, fieldName)


    def getModifiedWriteValue(self, fieldName):
        """
        getModifiedWriteValue(FieldInterface self, std::string const & fieldName) -> General::ModifiedWrite

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getModifiedWriteValue(self, fieldName)


    def setModifiedWrite(self, fieldName, newModifiedWrite):
        """
        setModifiedWrite(FieldInterface self, std::string const & fieldName, std::string const & newModifiedWrite) -> bool

        Parameters
        ----------
        fieldName: std::string const &
        newModifiedWrite: std::string const &

        """
        return _pythonAPI.FieldInterface_setModifiedWrite(self, fieldName, newModifiedWrite)


    def getReadActionString(self, fieldName):
        """
        getReadActionString(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getReadActionString(self, fieldName)


    def getReadAction(self, fieldName):
        """
        getReadAction(FieldInterface self, std::string const & fieldName) -> General::ReadAction

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getReadAction(self, fieldName)


    def setReadAction(self, fieldName, newReadAction):
        """
        setReadAction(FieldInterface self, std::string const & fieldName, std::string const & newReadAction) -> bool

        Parameters
        ----------
        fieldName: std::string const &
        newReadAction: std::string const &

        """
        return _pythonAPI.FieldInterface_setReadAction(self, fieldName, newReadAction)


    def getTestableValue(self, fieldName):
        """
        getTestableValue(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getTestableValue(self, fieldName)


    def getTestableBool(self, fieldName):
        """
        getTestableBool(FieldInterface self, std::string const & fieldName) -> bool

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getTestableBool(self, fieldName)


    def setTestable(self, fieldName, newTestable):
        """
        setTestable(FieldInterface self, std::string const & fieldName, std::string const & newTestable) -> bool

        Parameters
        ----------
        fieldName: std::string const &
        newTestable: std::string const &

        """
        return _pythonAPI.FieldInterface_setTestable(self, fieldName, newTestable)


    def getTestConstraintString(self, fieldName):
        """
        getTestConstraintString(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getTestConstraintString(self, fieldName)


    def getTestConstraint(self, fieldName):
        """
        getTestConstraint(FieldInterface self, std::string const & fieldName) -> General::TestConstraint

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getTestConstraint(self, fieldName)


    def setTestConstraint(self, fieldName, newTestConstraint):
        """
        setTestConstraint(FieldInterface self, std::string const & fieldName, std::string const & newTestConstraint) -> bool

        Parameters
        ----------
        fieldName: std::string const &
        newTestConstraint: std::string const &

        """
        return _pythonAPI.FieldInterface_setTestConstraint(self, fieldName, newTestConstraint)


    def getIsPresentValue(self, fieldName, baseNumber=0):
        """
        getIsPresentValue(FieldInterface self, std::string const & fieldName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        fieldName: std::string const &
        baseNumber: int const &

        getIsPresentValue(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getIsPresentValue(self, fieldName, baseNumber)


    def getIsPresentFormattedExpression(self, fieldName):
        """
        getIsPresentFormattedExpression(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getIsPresentFormattedExpression(self, fieldName)


    def getIsPresentExpression(self, fieldName):
        """
        getIsPresentExpression(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getIsPresentExpression(self, fieldName)


    def setIsPresent(self, fieldName, newIsPresent):
        """
        setIsPresent(FieldInterface self, std::string const & fieldName, std::string const & newIsPresent) -> bool

        Parameters
        ----------
        fieldName: std::string const &
        newIsPresent: std::string const &

        """
        return _pythonAPI.FieldInterface_setIsPresent(self, fieldName, newIsPresent)


    def hasValidOffset(self, fieldName):
        """
        hasValidOffset(FieldInterface self, std::string const & fieldName) -> bool

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_hasValidOffset(self, fieldName)


    def hasValidWidth(self, fieldName):
        """
        hasValidWidth(FieldInterface self, std::string const & fieldName) -> bool

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_hasValidWidth(self, fieldName)


    def hasValidResets(self, fieldName):
        """
        hasValidResets(FieldInterface self, std::string const & fieldName) -> bool

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_hasValidResets(self, fieldName)


    def hasValidIsPresent(self, fieldName):
        """
        hasValidIsPresent(FieldInterface self, std::string const & fieldName) -> bool

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_hasValidIsPresent(self, fieldName)


    def hasValidAccess(self, fieldName):
        """
        hasValidAccess(FieldInterface self, std::string const & fieldName) -> bool

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_hasValidAccess(self, fieldName)


    def addField(self, *args):
        """
        addField(FieldInterface self, int const & row, std::string const & newFieldName)

        Parameters
        ----------
        row: int const &
        newFieldName: std::string const &

        addField(FieldInterface self, int const & row)

        Parameters
        ----------
        row: int const &

        """
        return _pythonAPI.FieldInterface_addField(self, *args)


    def removeField(self, fieldName):
        """
        removeField(FieldInterface self, std::string const & fieldName) -> bool

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_removeField(self, fieldName)


    def copyRows(self, selectedRows):
        """
        copyRows(FieldInterface self, std::vector< int,std::allocator< int > > selectedRows)

        Parameters
        ----------
        selectedRows: std::vector< int,std::allocator< int > >

        """
        return _pythonAPI.FieldInterface_copyRows(self, selectedRows)


    def pasteRows(self):
        """
        pasteRows(FieldInterface self) -> stringVector

        Parameters
        ----------
        self: FieldInterface *

        """
        return _pythonAPI.FieldInterface_pasteRows(self)


    def getPasteRowCount(self):
        """
        getPasteRowCount(FieldInterface self) -> int

        Parameters
        ----------
        self: FieldInterface const *

        """
        return _pythonAPI.FieldInterface_getPasteRowCount(self)


    def getExpressionsInSelectedFields(self, fieldNames):
        """
        getExpressionsInSelectedFields(FieldInterface self, stringVector fieldNames) -> stringVector

        Parameters
        ----------
        fieldNames: std::vector< std::string,std::allocator< std::string > >

        """
        return _pythonAPI.FieldInterface_getExpressionsInSelectedFields(self, fieldNames)


    def getSubInterface(self):
        """
        getSubInterface(FieldInterface self) -> ResetInterface

        Parameters
        ----------
        self: FieldInterface const *

        """
        return _pythonAPI.FieldInterface_getSubInterface(self)


    def hasWriteConstraint(self, fieldName):
        """
        hasWriteConstraint(FieldInterface self, std::string const & fieldName) -> bool

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_hasWriteConstraint(self, fieldName)


    def getWriteConstraint(self, fieldName):
        """
        getWriteConstraint(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getWriteConstraint(self, fieldName)


    def setWriteConstraint(self, fieldName, newConstraintText):
        """
        setWriteConstraint(FieldInterface self, std::string const & fieldName, std::string const & newConstraintText) -> bool

        Parameters
        ----------
        fieldName: std::string const &
        newConstraintText: std::string const &

        """
        return _pythonAPI.FieldInterface_setWriteConstraint(self, fieldName, newConstraintText)


    def getWriteConstraintMinimumValue(self, fieldName, baseNumber=0):
        """
        getWriteConstraintMinimumValue(FieldInterface self, std::string const & fieldName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        fieldName: std::string const &
        baseNumber: int const &

        getWriteConstraintMinimumValue(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getWriteConstraintMinimumValue(self, fieldName, baseNumber)


    def getWriteConstraintMinimumFormattedExpression(self, fieldName):
        """
        getWriteConstraintMinimumFormattedExpression(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getWriteConstraintMinimumFormattedExpression(self, fieldName)


    def getWriteConstraintMinimumExpression(self, fieldName):
        """
        getWriteConstraintMinimumExpression(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getWriteConstraintMinimumExpression(self, fieldName)


    def setWriteConstraintMinimum(self, fieldName, newWriteConstraintMinimum):
        """
        setWriteConstraintMinimum(FieldInterface self, std::string const & fieldName, std::string const & newWriteConstraintMinimum) -> bool

        Parameters
        ----------
        fieldName: std::string const &
        newWriteConstraintMinimum: std::string const &

        """
        return _pythonAPI.FieldInterface_setWriteConstraintMinimum(self, fieldName, newWriteConstraintMinimum)


    def getWriteConstraintMaximumValue(self, fieldName, baseNumber=0):
        """
        getWriteConstraintMaximumValue(FieldInterface self, std::string const & fieldName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        fieldName: std::string const &
        baseNumber: int const &

        getWriteConstraintMaximumValue(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getWriteConstraintMaximumValue(self, fieldName, baseNumber)


    def getWriteConstraintMaximumFormattedExpression(self, fieldName):
        """
        getWriteConstraintMaximumFormattedExpression(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getWriteConstraintMaximumFormattedExpression(self, fieldName)


    def getWriteConstraintMaximumExpression(self, fieldName):
        """
        getWriteConstraintMaximumExpression(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getWriteConstraintMaximumExpression(self, fieldName)


    def setWriteConstraintMaximum(self, fieldName, newWriteConstraintMaximum):
        """
        setWriteConstraintMaximum(FieldInterface self, std::string const & fieldName, std::string const & newWriteConstraintMaximum) -> bool

        Parameters
        ----------
        fieldName: std::string const &
        newWriteConstraintMaximum: std::string const &

        """
        return _pythonAPI.FieldInterface_setWriteConstraintMaximum(self, fieldName, newWriteConstraintMaximum)


    def getReservedValue(self, fieldName, baseNumber=0):
        """
        getReservedValue(FieldInterface self, std::string const & fieldName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        fieldName: std::string const &
        baseNumber: int const &

        getReservedValue(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getReservedValue(self, fieldName, baseNumber)


    def getReservedFormattedExpression(self, fieldName):
        """
        getReservedFormattedExpression(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getReservedFormattedExpression(self, fieldName)


    def getReservedExpression(self, fieldName):
        """
        getReservedExpression(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getReservedExpression(self, fieldName)


    def setReserved(self, fieldName, newReserved):
        """
        setReserved(FieldInterface self, std::string const & fieldName, std::string const & newReserved) -> bool

        Parameters
        ----------
        fieldName: std::string const &
        newReserved: std::string const &

        """
        return _pythonAPI.FieldInterface_setReserved(self, fieldName, newReserved)


    def getID(self, fieldName):
        """
        getID(FieldInterface self, std::string const & fieldName) -> std::string

        Parameters
        ----------
        fieldName: std::string const &

        """
        return _pythonAPI.FieldInterface_getID(self, fieldName)


    def setID(self, fieldName, newID):
        """
        setID(FieldInterface self, std::string const & fieldName, std::string const & newID) -> bool

        Parameters
        ----------
        fieldName: std::string const &
        newID: std::string const &

        """
        return _pythonAPI.FieldInterface_setID(self, fieldName, newID)

FieldInterface.setFields = new_instancemethod(_pythonAPI.FieldInterface_setFields, None, FieldInterface)
FieldInterface.getOffsetValue = new_instancemethod(_pythonAPI.FieldInterface_getOffsetValue, None, FieldInterface)
FieldInterface.getOffsetFormattedExpression = new_instancemethod(_pythonAPI.FieldInterface_getOffsetFormattedExpression, None, FieldInterface)
FieldInterface.getOffsetExpression = new_instancemethod(_pythonAPI.FieldInterface_getOffsetExpression, None, FieldInterface)
FieldInterface.setOffset = new_instancemethod(_pythonAPI.FieldInterface_setOffset, None, FieldInterface)
FieldInterface.getWidthValue = new_instancemethod(_pythonAPI.FieldInterface_getWidthValue, None, FieldInterface)
FieldInterface.getWidthFormattedExpression = new_instancemethod(_pythonAPI.FieldInterface_getWidthFormattedExpression, None, FieldInterface)
FieldInterface.getWidthExpression = new_instancemethod(_pythonAPI.FieldInterface_getWidthExpression, None, FieldInterface)
FieldInterface.setWidth = new_instancemethod(_pythonAPI.FieldInterface_setWidth, None, FieldInterface)
FieldInterface.getResets = new_instancemethod(_pythonAPI.FieldInterface_getResets, None, FieldInterface)
FieldInterface.getResetsToolTip = new_instancemethod(_pythonAPI.FieldInterface_getResetsToolTip, None, FieldInterface)
FieldInterface.getVolatile = new_instancemethod(_pythonAPI.FieldInterface_getVolatile, None, FieldInterface)
FieldInterface.setVolatile = new_instancemethod(_pythonAPI.FieldInterface_setVolatile, None, FieldInterface)
FieldInterface.getAccessString = new_instancemethod(_pythonAPI.FieldInterface_getAccessString, None, FieldInterface)
FieldInterface.getAccessType = new_instancemethod(_pythonAPI.FieldInterface_getAccessType, None, FieldInterface)
FieldInterface.setAccess = new_instancemethod(_pythonAPI.FieldInterface_setAccess, None, FieldInterface)
FieldInterface.getModifiedWriteString = new_instancemethod(_pythonAPI.FieldInterface_getModifiedWriteString, None, FieldInterface)
FieldInterface.getModifiedWriteValue = new_instancemethod(_pythonAPI.FieldInterface_getModifiedWriteValue, None, FieldInterface)
FieldInterface.setModifiedWrite = new_instancemethod(_pythonAPI.FieldInterface_setModifiedWrite, None, FieldInterface)
FieldInterface.getReadActionString = new_instancemethod(_pythonAPI.FieldInterface_getReadActionString, None, FieldInterface)
FieldInterface.getReadAction = new_instancemethod(_pythonAPI.FieldInterface_getReadAction, None, FieldInterface)
FieldInterface.setReadAction = new_instancemethod(_pythonAPI.FieldInterface_setReadAction, None, FieldInterface)
FieldInterface.getTestableValue = new_instancemethod(_pythonAPI.FieldInterface_getTestableValue, None, FieldInterface)
FieldInterface.getTestableBool = new_instancemethod(_pythonAPI.FieldInterface_getTestableBool, None, FieldInterface)
FieldInterface.setTestable = new_instancemethod(_pythonAPI.FieldInterface_setTestable, None, FieldInterface)
FieldInterface.getTestConstraintString = new_instancemethod(_pythonAPI.FieldInterface_getTestConstraintString, None, FieldInterface)
FieldInterface.getTestConstraint = new_instancemethod(_pythonAPI.FieldInterface_getTestConstraint, None, FieldInterface)
FieldInterface.setTestConstraint = new_instancemethod(_pythonAPI.FieldInterface_setTestConstraint, None, FieldInterface)
FieldInterface.getIsPresentValue = new_instancemethod(_pythonAPI.FieldInterface_getIsPresentValue, None, FieldInterface)
FieldInterface.getIsPresentFormattedExpression = new_instancemethod(_pythonAPI.FieldInterface_getIsPresentFormattedExpression, None, FieldInterface)
FieldInterface.getIsPresentExpression = new_instancemethod(_pythonAPI.FieldInterface_getIsPresentExpression, None, FieldInterface)
FieldInterface.setIsPresent = new_instancemethod(_pythonAPI.FieldInterface_setIsPresent, None, FieldInterface)
FieldInterface.hasValidOffset = new_instancemethod(_pythonAPI.FieldInterface_hasValidOffset, None, FieldInterface)
FieldInterface.hasValidWidth = new_instancemethod(_pythonAPI.FieldInterface_hasValidWidth, None, FieldInterface)
FieldInterface.hasValidResets = new_instancemethod(_pythonAPI.FieldInterface_hasValidResets, None, FieldInterface)
FieldInterface.hasValidIsPresent = new_instancemethod(_pythonAPI.FieldInterface_hasValidIsPresent, None, FieldInterface)
FieldInterface.hasValidAccess = new_instancemethod(_pythonAPI.FieldInterface_hasValidAccess, None, FieldInterface)
FieldInterface.addField = new_instancemethod(_pythonAPI.FieldInterface_addField, None, FieldInterface)
FieldInterface.removeField = new_instancemethod(_pythonAPI.FieldInterface_removeField, None, FieldInterface)
FieldInterface.copyRows = new_instancemethod(_pythonAPI.FieldInterface_copyRows, None, FieldInterface)
FieldInterface.pasteRows = new_instancemethod(_pythonAPI.FieldInterface_pasteRows, None, FieldInterface)
FieldInterface.getPasteRowCount = new_instancemethod(_pythonAPI.FieldInterface_getPasteRowCount, None, FieldInterface)
FieldInterface.getExpressionsInSelectedFields = new_instancemethod(_pythonAPI.FieldInterface_getExpressionsInSelectedFields, None, FieldInterface)
FieldInterface.getSubInterface = new_instancemethod(_pythonAPI.FieldInterface_getSubInterface, None, FieldInterface)
FieldInterface.hasWriteConstraint = new_instancemethod(_pythonAPI.FieldInterface_hasWriteConstraint, None, FieldInterface)
FieldInterface.getWriteConstraint = new_instancemethod(_pythonAPI.FieldInterface_getWriteConstraint, None, FieldInterface)
FieldInterface.setWriteConstraint = new_instancemethod(_pythonAPI.FieldInterface_setWriteConstraint, None, FieldInterface)
FieldInterface.getWriteConstraintMinimumValue = new_instancemethod(_pythonAPI.FieldInterface_getWriteConstraintMinimumValue, None, FieldInterface)
FieldInterface.getWriteConstraintMinimumFormattedExpression = new_instancemethod(_pythonAPI.FieldInterface_getWriteConstraintMinimumFormattedExpression, None, FieldInterface)
FieldInterface.getWriteConstraintMinimumExpression = new_instancemethod(_pythonAPI.FieldInterface_getWriteConstraintMinimumExpression, None, FieldInterface)
FieldInterface.setWriteConstraintMinimum = new_instancemethod(_pythonAPI.FieldInterface_setWriteConstraintMinimum, None, FieldInterface)
FieldInterface.getWriteConstraintMaximumValue = new_instancemethod(_pythonAPI.FieldInterface_getWriteConstraintMaximumValue, None, FieldInterface)
FieldInterface.getWriteConstraintMaximumFormattedExpression = new_instancemethod(_pythonAPI.FieldInterface_getWriteConstraintMaximumFormattedExpression, None, FieldInterface)
FieldInterface.getWriteConstraintMaximumExpression = new_instancemethod(_pythonAPI.FieldInterface_getWriteConstraintMaximumExpression, None, FieldInterface)
FieldInterface.setWriteConstraintMaximum = new_instancemethod(_pythonAPI.FieldInterface_setWriteConstraintMaximum, None, FieldInterface)
FieldInterface.getReservedValue = new_instancemethod(_pythonAPI.FieldInterface_getReservedValue, None, FieldInterface)
FieldInterface.getReservedFormattedExpression = new_instancemethod(_pythonAPI.FieldInterface_getReservedFormattedExpression, None, FieldInterface)
FieldInterface.getReservedExpression = new_instancemethod(_pythonAPI.FieldInterface_getReservedExpression, None, FieldInterface)
FieldInterface.setReserved = new_instancemethod(_pythonAPI.FieldInterface_setReserved, None, FieldInterface)
FieldInterface.getID = new_instancemethod(_pythonAPI.FieldInterface_getID, None, FieldInterface)
FieldInterface.setID = new_instancemethod(_pythonAPI.FieldInterface_setID, None, FieldInterface)
FieldInterface_swigregister = _pythonAPI.FieldInterface_swigregister
FieldInterface_swigregister(FieldInterface)

class ResetInterface(ParameterizableInterface, CommonInterface):
    """Proxy of C++ ResetInterface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, validator, expressionParser, expressionFormatter):
        """
        __init__(ResetInterface self, QSharedPointer< FieldValidator > validator, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter) -> ResetInterface

        Parameters
        ----------
        validator: QSharedPointer< FieldValidator >
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >

        """
        _pythonAPI.ResetInterface_swiginit(self, _pythonAPI.new_ResetInterface(validator, expressionParser, expressionFormatter))
    __swig_destroy__ = _pythonAPI.delete_ResetInterface

    def setResets(self, containingField):
        """
        setResets(ResetInterface self, QSharedPointer< Field > containingField)

        Parameters
        ----------
        containingField: QSharedPointer< Field >

        """
        return _pythonAPI.ResetInterface_setResets(self, containingField)


    def getResetTypeReference(self, itemIndex):
        """
        getResetTypeReference(ResetInterface self, int const & itemIndex) -> std::string

        Parameters
        ----------
        itemIndex: int const &

        """
        return _pythonAPI.ResetInterface_getResetTypeReference(self, itemIndex)


    def setResetTypeReference(self, resetIndex, newResetType):
        """
        setResetTypeReference(ResetInterface self, int const & resetIndex, std::string const & newResetType) -> bool

        Parameters
        ----------
        resetIndex: int const &
        newResetType: std::string const &

        """
        return _pythonAPI.ResetInterface_setResetTypeReference(self, resetIndex, newResetType)


    def getResetValue(self, resetIndex, baseNumber=0):
        """
        getResetValue(ResetInterface self, int const & resetIndex, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        resetIndex: int const &
        baseNumber: int const &

        getResetValue(ResetInterface self, int const & resetIndex) -> std::string

        Parameters
        ----------
        resetIndex: int const &

        """
        return _pythonAPI.ResetInterface_getResetValue(self, resetIndex, baseNumber)


    def getResetValueFormattedExpression(self, resetIndex):
        """
        getResetValueFormattedExpression(ResetInterface self, int const & resetIndex) -> std::string

        Parameters
        ----------
        resetIndex: int const &

        """
        return _pythonAPI.ResetInterface_getResetValueFormattedExpression(self, resetIndex)


    def getResetValueExpression(self, resetIndex):
        """
        getResetValueExpression(ResetInterface self, int const & resetIndex) -> std::string

        Parameters
        ----------
        resetIndex: int const &

        """
        return _pythonAPI.ResetInterface_getResetValueExpression(self, resetIndex)


    def setResetValue(self, resetIndex, newResetValue):
        """
        setResetValue(ResetInterface self, int const & resetIndex, std::string const & newResetValue) -> bool

        Parameters
        ----------
        resetIndex: int const &
        newResetValue: std::string const &

        """
        return _pythonAPI.ResetInterface_setResetValue(self, resetIndex, newResetValue)


    def getResetMaskValue(self, resetIndex, baseNumber=0):
        """
        getResetMaskValue(ResetInterface self, int const & resetIndex, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        resetIndex: int const &
        baseNumber: int const &

        getResetMaskValue(ResetInterface self, int const & resetIndex) -> std::string

        Parameters
        ----------
        resetIndex: int const &

        """
        return _pythonAPI.ResetInterface_getResetMaskValue(self, resetIndex, baseNumber)


    def getResetMaskFormattedExpression(self, resetIndex):
        """
        getResetMaskFormattedExpression(ResetInterface self, int const & resetIndex) -> std::string

        Parameters
        ----------
        resetIndex: int const &

        """
        return _pythonAPI.ResetInterface_getResetMaskFormattedExpression(self, resetIndex)


    def getResetMaskExpression(self, resetIndex):
        """
        getResetMaskExpression(ResetInterface self, int const & resetIndex) -> std::string

        Parameters
        ----------
        resetIndex: int const &

        """
        return _pythonAPI.ResetInterface_getResetMaskExpression(self, resetIndex)


    def setResetMask(self, resetIndex, newResetMask):
        """
        setResetMask(ResetInterface self, int const & resetIndex, std::string const & newResetMask) -> bool

        Parameters
        ----------
        resetIndex: int const &
        newResetMask: std::string const &

        """
        return _pythonAPI.ResetInterface_setResetMask(self, resetIndex, newResetMask)


    def hasValidResetType(self, resetIndex):
        """
        hasValidResetType(ResetInterface self, int const & resetIndex) -> bool

        Parameters
        ----------
        resetIndex: int const &

        """
        return _pythonAPI.ResetInterface_hasValidResetType(self, resetIndex)


    def hasValidResetValue(self, resetIndex):
        """
        hasValidResetValue(ResetInterface self, int const & resetIndex) -> bool

        Parameters
        ----------
        resetIndex: int const &

        """
        return _pythonAPI.ResetInterface_hasValidResetValue(self, resetIndex)


    def hasValidResetMask(self, resetIndex):
        """
        hasValidResetMask(ResetInterface self, int const & resetIndex) -> bool

        Parameters
        ----------
        resetIndex: int const &

        """
        return _pythonAPI.ResetInterface_hasValidResetMask(self, resetIndex)


    def addReset(self, row):
        """
        addReset(ResetInterface self, int const & row)

        Parameters
        ----------
        row: int const &

        """
        return _pythonAPI.ResetInterface_addReset(self, row)


    def removeReset(self, resetIndex):
        """
        removeReset(ResetInterface self, int const & resetIndex) -> bool

        Parameters
        ----------
        resetIndex: int const &

        """
        return _pythonAPI.ResetInterface_removeReset(self, resetIndex)


    def getAllReferencesToIdInIndex(self, itemIndex, valueID):
        """
        getAllReferencesToIdInIndex(ResetInterface self, int const & itemIndex, std::string const & valueID) -> int

        Parameters
        ----------
        itemIndex: int const &
        valueID: std::string const &

        """
        return _pythonAPI.ResetInterface_getAllReferencesToIdInIndex(self, itemIndex, valueID)

ResetInterface.setResets = new_instancemethod(_pythonAPI.ResetInterface_setResets, None, ResetInterface)
ResetInterface.getResetTypeReference = new_instancemethod(_pythonAPI.ResetInterface_getResetTypeReference, None, ResetInterface)
ResetInterface.setResetTypeReference = new_instancemethod(_pythonAPI.ResetInterface_setResetTypeReference, None, ResetInterface)
ResetInterface.getResetValue = new_instancemethod(_pythonAPI.ResetInterface_getResetValue, None, ResetInterface)
ResetInterface.getResetValueFormattedExpression = new_instancemethod(_pythonAPI.ResetInterface_getResetValueFormattedExpression, None, ResetInterface)
ResetInterface.getResetValueExpression = new_instancemethod(_pythonAPI.ResetInterface_getResetValueExpression, None, ResetInterface)
ResetInterface.setResetValue = new_instancemethod(_pythonAPI.ResetInterface_setResetValue, None, ResetInterface)
ResetInterface.getResetMaskValue = new_instancemethod(_pythonAPI.ResetInterface_getResetMaskValue, None, ResetInterface)
ResetInterface.getResetMaskFormattedExpression = new_instancemethod(_pythonAPI.ResetInterface_getResetMaskFormattedExpression, None, ResetInterface)
ResetInterface.getResetMaskExpression = new_instancemethod(_pythonAPI.ResetInterface_getResetMaskExpression, None, ResetInterface)
ResetInterface.setResetMask = new_instancemethod(_pythonAPI.ResetInterface_setResetMask, None, ResetInterface)
ResetInterface.hasValidResetType = new_instancemethod(_pythonAPI.ResetInterface_hasValidResetType, None, ResetInterface)
ResetInterface.hasValidResetValue = new_instancemethod(_pythonAPI.ResetInterface_hasValidResetValue, None, ResetInterface)
ResetInterface.hasValidResetMask = new_instancemethod(_pythonAPI.ResetInterface_hasValidResetMask, None, ResetInterface)
ResetInterface.addReset = new_instancemethod(_pythonAPI.ResetInterface_addReset, None, ResetInterface)
ResetInterface.removeReset = new_instancemethod(_pythonAPI.ResetInterface_removeReset, None, ResetInterface)
ResetInterface.getAllReferencesToIdInIndex = new_instancemethod(_pythonAPI.ResetInterface_getAllReferencesToIdInIndex, None, ResetInterface)
ResetInterface_swigregister = _pythonAPI.ResetInterface_swigregister
ResetInterface_swigregister(ResetInterface)

class FileSetInterface(ParameterizableInterface, NameGroupInterface):
    """Proxy of C++ FileSetInterface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, validator, expressionParser, expressionFormatter, fileInterface, fileBuilderInterface):
        """
        __init__(FileSetInterface self, QSharedPointer< FileSetValidator > validator, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter, FileInterface fileInterface, FileBuilderInterface fileBuilderInterface) -> FileSetInterface

        Parameters
        ----------
        validator: QSharedPointer< FileSetValidator >
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >
        fileInterface: FileInterface *
        fileBuilderInterface: FileBuilderInterface *

        """
        _pythonAPI.FileSetInterface_swiginit(self, _pythonAPI.new_FileSetInterface(validator, expressionParser, expressionFormatter, fileInterface, fileBuilderInterface))
    __swig_destroy__ = _pythonAPI.delete_FileSetInterface

    def setFileSets(self, newFileSets):
        """
        setFileSets(FileSetInterface self, QSharedPointer< QList< QSharedPointer< FileSet > > > newFileSets)

        Parameters
        ----------
        newFileSets: QSharedPointer< QList< QSharedPointer< FileSet > > >

        """
        return _pythonAPI.FileSetInterface_setFileSets(self, newFileSets)


    def getGroups(self, fileSetName):
        """
        getGroups(FileSetInterface self, std::string const & fileSetName) -> stringVector

        Parameters
        ----------
        fileSetName: std::string const &

        """
        return _pythonAPI.FileSetInterface_getGroups(self, fileSetName)


    def setGroups(self, fileSetName, newGroups):
        """
        setGroups(FileSetInterface self, std::string const & fileSetName, stringVector newGroups) -> bool

        Parameters
        ----------
        fileSetName: std::string const &
        newGroups: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _pythonAPI.FileSetInterface_setGroups(self, fileSetName, newGroups)


    def getDependencies(self, fileSetName):
        """
        getDependencies(FileSetInterface self, std::string const & fileSetName) -> stringVector

        Parameters
        ----------
        fileSetName: std::string const &

        """
        return _pythonAPI.FileSetInterface_getDependencies(self, fileSetName)


    def setDependencies(self, fileSetName, newDependencies):
        """
        setDependencies(FileSetInterface self, std::string const & fileSetName, stringVector newDependencies) -> bool

        Parameters
        ----------
        fileSetName: std::string const &
        newDependencies: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _pythonAPI.FileSetInterface_setDependencies(self, fileSetName, newDependencies)


    def addFileSet(self, *args):
        """
        addFileSet(FileSetInterface self, int const & row, std::string const & newFileSetName)

        Parameters
        ----------
        row: int const &
        newFileSetName: std::string const &

        addFileSet(FileSetInterface self, int const & row)

        Parameters
        ----------
        row: int const &

        """
        return _pythonAPI.FileSetInterface_addFileSet(self, *args)


    def removeFileSet(self, fileSetName):
        """
        removeFileSet(FileSetInterface self, std::string const & fileSetName) -> bool

        Parameters
        ----------
        fileSetName: std::string const &

        """
        return _pythonAPI.FileSetInterface_removeFileSet(self, fileSetName)


    def getFileInterface(self):
        """
        getFileInterface(FileSetInterface self) -> FileInterface

        Parameters
        ----------
        self: FileSetInterface const *

        """
        return _pythonAPI.FileSetInterface_getFileInterface(self)


    def getFileBuilderInterface(self):
        """
        getFileBuilderInterface(FileSetInterface self) -> FileBuilderInterface

        Parameters
        ----------
        self: FileSetInterface const *

        """
        return _pythonAPI.FileSetInterface_getFileBuilderInterface(self)


    def getExpressionsInSelectedFileSets(self, fileSetNames):
        """
        getExpressionsInSelectedFileSets(FileSetInterface self, stringVector fileSetNames) -> stringVector

        Parameters
        ----------
        fileSetNames: std::vector< std::string,std::allocator< std::string > >

        """
        return _pythonAPI.FileSetInterface_getExpressionsInSelectedFileSets(self, fileSetNames)


    def fileSetExists(self, fileSetName):
        """
        fileSetExists(FileSetInterface self, std::string const & fileSetName) -> bool

        Parameters
        ----------
        fileSetName: std::string const &

        """
        return _pythonAPI.FileSetInterface_fileSetExists(self, fileSetName)

FileSetInterface.setFileSets = new_instancemethod(_pythonAPI.FileSetInterface_setFileSets, None, FileSetInterface)
FileSetInterface.getGroups = new_instancemethod(_pythonAPI.FileSetInterface_getGroups, None, FileSetInterface)
FileSetInterface.setGroups = new_instancemethod(_pythonAPI.FileSetInterface_setGroups, None, FileSetInterface)
FileSetInterface.getDependencies = new_instancemethod(_pythonAPI.FileSetInterface_getDependencies, None, FileSetInterface)
FileSetInterface.setDependencies = new_instancemethod(_pythonAPI.FileSetInterface_setDependencies, None, FileSetInterface)
FileSetInterface.addFileSet = new_instancemethod(_pythonAPI.FileSetInterface_addFileSet, None, FileSetInterface)
FileSetInterface.removeFileSet = new_instancemethod(_pythonAPI.FileSetInterface_removeFileSet, None, FileSetInterface)
FileSetInterface.getFileInterface = new_instancemethod(_pythonAPI.FileSetInterface_getFileInterface, None, FileSetInterface)
FileSetInterface.getFileBuilderInterface = new_instancemethod(_pythonAPI.FileSetInterface_getFileBuilderInterface, None, FileSetInterface)
FileSetInterface.getExpressionsInSelectedFileSets = new_instancemethod(_pythonAPI.FileSetInterface_getExpressionsInSelectedFileSets, None, FileSetInterface)
FileSetInterface.fileSetExists = new_instancemethod(_pythonAPI.FileSetInterface_fileSetExists, None, FileSetInterface)
FileSetInterface_swigregister = _pythonAPI.FileSetInterface_swigregister
FileSetInterface_swigregister(FileSetInterface)

class FileInterface(ParameterizableInterface, NameGroupInterface):
    """Proxy of C++ FileInterface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, validator, expressionParser, expressionFormatter):
        """
        __init__(FileInterface self, QSharedPointer< FileValidator > validator, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter) -> FileInterface

        Parameters
        ----------
        validator: QSharedPointer< FileValidator >
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >

        """
        _pythonAPI.FileInterface_swiginit(self, _pythonAPI.new_FileInterface(validator, expressionParser, expressionFormatter))
    __swig_destroy__ = _pythonAPI.delete_FileInterface

    def setFiles(self, newFiles):
        """
        setFiles(FileInterface self, QSharedPointer< QList< QSharedPointer< File > > > newFiles)

        Parameters
        ----------
        newFiles: QSharedPointer< QList< QSharedPointer< File > > >

        """
        return _pythonAPI.FileInterface_setFiles(self, newFiles)


    def getExpressionsInSelectedFiles(self, fileNames):
        """
        getExpressionsInSelectedFiles(FileInterface self, stringVector fileNames) -> stringVector

        Parameters
        ----------
        fileNames: std::vector< std::string,std::allocator< std::string > >

        """
        return _pythonAPI.FileInterface_getExpressionsInSelectedFiles(self, fileNames)


    def addFile(self, *args):
        """
        addFile(FileInterface self, int const & row, std::string const & newFileName)

        Parameters
        ----------
        row: int const &
        newFileName: std::string const &

        addFile(FileInterface self, int const & row)

        Parameters
        ----------
        row: int const &

        """
        return _pythonAPI.FileInterface_addFile(self, *args)


    def removeFile(self, fileName):
        """
        removeFile(FileInterface self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_removeFile(self, fileName)


    def swapFiles(self, firstIndex, secondIndex):
        """
        swapFiles(FileInterface self, int const & firstIndex, int const & secondIndex)

        Parameters
        ----------
        firstIndex: int const &
        secondIndex: int const &

        """
        return _pythonAPI.FileInterface_swapFiles(self, firstIndex, secondIndex)


    def getLogicalName(self, fileName):
        """
        getLogicalName(FileInterface self, std::string const & fileName) -> std::string

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_getLogicalName(self, fileName)


    def setLogicalName(self, fileName, newLogicalName):
        """
        setLogicalName(FileInterface self, std::string const & fileName, std::string newLogicalName) -> bool

        Parameters
        ----------
        fileName: std::string const &
        newLogicalName: std::string

        """
        return _pythonAPI.FileInterface_setLogicalName(self, fileName, newLogicalName)


    def isLogicalNameDefault(self, fileName):
        """
        isLogicalNameDefault(FileInterface self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_isLogicalNameDefault(self, fileName)


    def setLogicalNameDefault(self, fileName, newLogicalDefault):
        """
        setLogicalNameDefault(FileInterface self, std::string const & fileName, bool newLogicalDefault) -> bool

        Parameters
        ----------
        fileName: std::string const &
        newLogicalDefault: bool

        """
        return _pythonAPI.FileInterface_setLogicalNameDefault(self, fileName, newLogicalDefault)


    def isStructural(self, fileName):
        """
        isStructural(FileInterface self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_isStructural(self, fileName)


    def setStructural(self, fileName, structuralStatus):
        """
        setStructural(FileInterface self, std::string const & fileName, bool structuralStatus) -> bool

        Parameters
        ----------
        fileName: std::string const &
        structuralStatus: bool

        """
        return _pythonAPI.FileInterface_setStructural(self, fileName, structuralStatus)


    def isIncludeFile(self, fileName):
        """
        isIncludeFile(FileInterface self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_isIncludeFile(self, fileName)


    def setIncludeFile(self, fileName, includeFileStatus):
        """
        setIncludeFile(FileInterface self, std::string const & fileName, bool includeFileStatus) -> bool

        Parameters
        ----------
        fileName: std::string const &
        includeFileStatus: bool

        """
        return _pythonAPI.FileInterface_setIncludeFile(self, fileName, includeFileStatus)


    def hasExternalDeclarations(self, fileName):
        """
        hasExternalDeclarations(FileInterface self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_hasExternalDeclarations(self, fileName)


    def setExternalDeclarations(self, fileName, externalDeclarationsStatus):
        """
        setExternalDeclarations(FileInterface self, std::string const & fileName, bool externalDeclarationsStatus) -> bool

        Parameters
        ----------
        fileName: std::string const &
        externalDeclarationsStatus: bool

        """
        return _pythonAPI.FileInterface_setExternalDeclarations(self, fileName, externalDeclarationsStatus)


    def clearFileTypes(self, fileName):
        """
        clearFileTypes(FileInterface self, std::string const & fileName)

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_clearFileTypes(self, fileName)


    def setFileTypes(self, fileName, newFileTypes):
        """
        setFileTypes(FileInterface self, std::string const & fileName, stringVector newFileTypes) -> bool

        Parameters
        ----------
        fileName: std::string const &
        newFileTypes: std::vector< std::string,std::allocator< std::string > > const

        """
        return _pythonAPI.FileInterface_setFileTypes(self, fileName, newFileTypes)


    def addFileType(self, fileName, newFileType):
        """
        addFileType(FileInterface self, std::string const & fileName, std::string const newFileType) -> bool

        Parameters
        ----------
        fileName: std::string const &
        newFileType: std::string const

        """
        return _pythonAPI.FileInterface_addFileType(self, fileName, newFileType)


    def addMultipleFileTypes(self, fileName, newFileTypes):
        """
        addMultipleFileTypes(FileInterface self, std::string const & fileName, stringVector newFileTypes) -> bool

        Parameters
        ----------
        fileName: std::string const &
        newFileTypes: std::vector< std::string,std::allocator< std::string > > const

        """
        return _pythonAPI.FileInterface_addMultipleFileTypes(self, fileName, newFileTypes)


    def getDependencies(self, fileName):
        """
        getDependencies(FileInterface self, std::string const & fileName) -> stringVector

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_getDependencies(self, fileName)


    def clearDependencies(self, fileName):
        """
        clearDependencies(FileInterface self, std::string const & fileName)

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_clearDependencies(self, fileName)


    def addDependency(self, fileName, newDependency):
        """
        addDependency(FileInterface self, std::string const & fileName, std::string const newDependency) -> bool

        Parameters
        ----------
        fileName: std::string const &
        newDependency: std::string const

        """
        return _pythonAPI.FileInterface_addDependency(self, fileName, newDependency)


    def addMultipleDependencies(self, fileName, newDependencies):
        """
        addMultipleDependencies(FileInterface self, std::string const & fileName, stringVector newDependencies) -> bool

        Parameters
        ----------
        fileName: std::string const &
        newDependencies: std::vector< std::string,std::allocator< std::string > > const

        """
        return _pythonAPI.FileInterface_addMultipleDependencies(self, fileName, newDependencies)


    def getExportedNames(self, fileName):
        """
        getExportedNames(FileInterface self, std::string const & fileName) -> stringVector

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_getExportedNames(self, fileName)


    def clearExportedNames(self, fileName):
        """
        clearExportedNames(FileInterface self, std::string const & fileName)

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_clearExportedNames(self, fileName)


    def addExportedName(self, fileName, newExportedName):
        """
        addExportedName(FileInterface self, std::string const & fileName, std::string const newExportedName) -> bool

        Parameters
        ----------
        fileName: std::string const &
        newExportedName: std::string const

        """
        return _pythonAPI.FileInterface_addExportedName(self, fileName, newExportedName)


    def addMultipleExportedNames(self, fileName, newExportedNames):
        """
        addMultipleExportedNames(FileInterface self, std::string const & fileName, stringVector newExportedNames) -> bool

        Parameters
        ----------
        fileName: std::string const &
        newExportedNames: std::vector< std::string,std::allocator< std::string > > const

        """
        return _pythonAPI.FileInterface_addMultipleExportedNames(self, fileName, newExportedNames)


    def getImageTypes(self, fileName):
        """
        getImageTypes(FileInterface self, std::string const & fileName) -> stringVector

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_getImageTypes(self, fileName)


    def clearImageTypes(self, fileName):
        """
        clearImageTypes(FileInterface self, std::string const & fileName)

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_clearImageTypes(self, fileName)


    def addImageType(self, fileName, newImageType):
        """
        addImageType(FileInterface self, std::string const & fileName, std::string const newImageType) -> bool

        Parameters
        ----------
        fileName: std::string const &
        newImageType: std::string const

        """
        return _pythonAPI.FileInterface_addImageType(self, fileName, newImageType)


    def addMultipleImageTypes(self, fileName, newImageTypes):
        """
        addMultipleImageTypes(FileInterface self, std::string const & fileName, stringVector newImageTypes) -> bool

        Parameters
        ----------
        fileName: std::string const &
        newImageTypes: std::vector< std::string,std::allocator< std::string > > const

        """
        return _pythonAPI.FileInterface_addMultipleImageTypes(self, fileName, newImageTypes)


    def getFileTypes(self, fileName):
        """
        getFileTypes(FileInterface self, std::string const & fileName) -> stringVector

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_getFileTypes(self, fileName)


    def getBuildCommandText(self, fileName):
        """
        getBuildCommandText(FileInterface self, std::string const & fileName) -> std::string

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_getBuildCommandText(self, fileName)


    def setBuildCommand(self, fileName, newBuildCommand):
        """
        setBuildCommand(FileInterface self, std::string const & fileName, std::string const & newBuildCommand) -> bool

        Parameters
        ----------
        fileName: std::string const &
        newBuildCommand: std::string const &

        """
        return _pythonAPI.FileInterface_setBuildCommand(self, fileName, newBuildCommand)


    def getBuildCommandFlags(self, fileName):
        """
        getBuildCommandFlags(FileInterface self, std::string const & fileName) -> std::string

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_getBuildCommandFlags(self, fileName)


    def setBuildCommandFlags(self, fileName, newFlags):
        """
        setBuildCommandFlags(FileInterface self, std::string const & fileName, std::string const & newFlags) -> bool

        Parameters
        ----------
        fileName: std::string const &
        newFlags: std::string const &

        """
        return _pythonAPI.FileInterface_setBuildCommandFlags(self, fileName, newFlags)


    def getBuildCommandReplaceDefaultFlagsValue(self, fileName, baseNumber=0):
        """
        getBuildCommandReplaceDefaultFlagsValue(FileInterface self, std::string const & fileName, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        fileName: std::string const &
        baseNumber: int const &

        getBuildCommandReplaceDefaultFlagsValue(FileInterface self, std::string const & fileName) -> std::string

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_getBuildCommandReplaceDefaultFlagsValue(self, fileName, baseNumber)


    def getBuildCommandReplaceDefaultFlagsFormattedExpression(self, fileName):
        """
        getBuildCommandReplaceDefaultFlagsFormattedExpression(FileInterface self, std::string const & fileName) -> std::string

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_getBuildCommandReplaceDefaultFlagsFormattedExpression(self, fileName)


    def getBuildCommandReplaceDefaultFlagsExpression(self, fileName):
        """
        getBuildCommandReplaceDefaultFlagsExpression(FileInterface self, std::string const & fileName) -> std::string

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_getBuildCommandReplaceDefaultFlagsExpression(self, fileName)


    def setbuildCommandReplaceDefaultFlags(self, fileName, newReplaceDefaultFlags):
        """
        setbuildCommandReplaceDefaultFlags(FileInterface self, std::string const & fileName, std::string const & newReplaceDefaultFlags) -> bool

        Parameters
        ----------
        fileName: std::string const &
        newReplaceDefaultFlags: std::string const &

        """
        return _pythonAPI.FileInterface_setbuildCommandReplaceDefaultFlags(self, fileName, newReplaceDefaultFlags)


    def getBuildCommandTarget(self, fileName):
        """
        getBuildCommandTarget(FileInterface self, std::string const & fileName) -> std::string

        Parameters
        ----------
        fileName: std::string const &

        """
        return _pythonAPI.FileInterface_getBuildCommandTarget(self, fileName)


    def setBuildCommandTarget(self, fileName, newTarget):
        """
        setBuildCommandTarget(FileInterface self, std::string const & fileName, std::string const & newTarget) -> bool

        Parameters
        ----------
        fileName: std::string const &
        newTarget: std::string const &

        """
        return _pythonAPI.FileInterface_setBuildCommandTarget(self, fileName, newTarget)

FileInterface.setFiles = new_instancemethod(_pythonAPI.FileInterface_setFiles, None, FileInterface)
FileInterface.getExpressionsInSelectedFiles = new_instancemethod(_pythonAPI.FileInterface_getExpressionsInSelectedFiles, None, FileInterface)
FileInterface.addFile = new_instancemethod(_pythonAPI.FileInterface_addFile, None, FileInterface)
FileInterface.removeFile = new_instancemethod(_pythonAPI.FileInterface_removeFile, None, FileInterface)
FileInterface.swapFiles = new_instancemethod(_pythonAPI.FileInterface_swapFiles, None, FileInterface)
FileInterface.getLogicalName = new_instancemethod(_pythonAPI.FileInterface_getLogicalName, None, FileInterface)
FileInterface.setLogicalName = new_instancemethod(_pythonAPI.FileInterface_setLogicalName, None, FileInterface)
FileInterface.isLogicalNameDefault = new_instancemethod(_pythonAPI.FileInterface_isLogicalNameDefault, None, FileInterface)
FileInterface.setLogicalNameDefault = new_instancemethod(_pythonAPI.FileInterface_setLogicalNameDefault, None, FileInterface)
FileInterface.isStructural = new_instancemethod(_pythonAPI.FileInterface_isStructural, None, FileInterface)
FileInterface.setStructural = new_instancemethod(_pythonAPI.FileInterface_setStructural, None, FileInterface)
FileInterface.isIncludeFile = new_instancemethod(_pythonAPI.FileInterface_isIncludeFile, None, FileInterface)
FileInterface.setIncludeFile = new_instancemethod(_pythonAPI.FileInterface_setIncludeFile, None, FileInterface)
FileInterface.hasExternalDeclarations = new_instancemethod(_pythonAPI.FileInterface_hasExternalDeclarations, None, FileInterface)
FileInterface.setExternalDeclarations = new_instancemethod(_pythonAPI.FileInterface_setExternalDeclarations, None, FileInterface)
FileInterface.clearFileTypes = new_instancemethod(_pythonAPI.FileInterface_clearFileTypes, None, FileInterface)
FileInterface.setFileTypes = new_instancemethod(_pythonAPI.FileInterface_setFileTypes, None, FileInterface)
FileInterface.addFileType = new_instancemethod(_pythonAPI.FileInterface_addFileType, None, FileInterface)
FileInterface.addMultipleFileTypes = new_instancemethod(_pythonAPI.FileInterface_addMultipleFileTypes, None, FileInterface)
FileInterface.getDependencies = new_instancemethod(_pythonAPI.FileInterface_getDependencies, None, FileInterface)
FileInterface.clearDependencies = new_instancemethod(_pythonAPI.FileInterface_clearDependencies, None, FileInterface)
FileInterface.addDependency = new_instancemethod(_pythonAPI.FileInterface_addDependency, None, FileInterface)
FileInterface.addMultipleDependencies = new_instancemethod(_pythonAPI.FileInterface_addMultipleDependencies, None, FileInterface)
FileInterface.getExportedNames = new_instancemethod(_pythonAPI.FileInterface_getExportedNames, None, FileInterface)
FileInterface.clearExportedNames = new_instancemethod(_pythonAPI.FileInterface_clearExportedNames, None, FileInterface)
FileInterface.addExportedName = new_instancemethod(_pythonAPI.FileInterface_addExportedName, None, FileInterface)
FileInterface.addMultipleExportedNames = new_instancemethod(_pythonAPI.FileInterface_addMultipleExportedNames, None, FileInterface)
FileInterface.getImageTypes = new_instancemethod(_pythonAPI.FileInterface_getImageTypes, None, FileInterface)
FileInterface.clearImageTypes = new_instancemethod(_pythonAPI.FileInterface_clearImageTypes, None, FileInterface)
FileInterface.addImageType = new_instancemethod(_pythonAPI.FileInterface_addImageType, None, FileInterface)
FileInterface.addMultipleImageTypes = new_instancemethod(_pythonAPI.FileInterface_addMultipleImageTypes, None, FileInterface)
FileInterface.getFileTypes = new_instancemethod(_pythonAPI.FileInterface_getFileTypes, None, FileInterface)
FileInterface.getBuildCommandText = new_instancemethod(_pythonAPI.FileInterface_getBuildCommandText, None, FileInterface)
FileInterface.setBuildCommand = new_instancemethod(_pythonAPI.FileInterface_setBuildCommand, None, FileInterface)
FileInterface.getBuildCommandFlags = new_instancemethod(_pythonAPI.FileInterface_getBuildCommandFlags, None, FileInterface)
FileInterface.setBuildCommandFlags = new_instancemethod(_pythonAPI.FileInterface_setBuildCommandFlags, None, FileInterface)
FileInterface.getBuildCommandReplaceDefaultFlagsValue = new_instancemethod(_pythonAPI.FileInterface_getBuildCommandReplaceDefaultFlagsValue, None, FileInterface)
FileInterface.getBuildCommandReplaceDefaultFlagsFormattedExpression = new_instancemethod(_pythonAPI.FileInterface_getBuildCommandReplaceDefaultFlagsFormattedExpression, None, FileInterface)
FileInterface.getBuildCommandReplaceDefaultFlagsExpression = new_instancemethod(_pythonAPI.FileInterface_getBuildCommandReplaceDefaultFlagsExpression, None, FileInterface)
FileInterface.setbuildCommandReplaceDefaultFlags = new_instancemethod(_pythonAPI.FileInterface_setbuildCommandReplaceDefaultFlags, None, FileInterface)
FileInterface.getBuildCommandTarget = new_instancemethod(_pythonAPI.FileInterface_getBuildCommandTarget, None, FileInterface)
FileInterface.setBuildCommandTarget = new_instancemethod(_pythonAPI.FileInterface_setBuildCommandTarget, None, FileInterface)
FileInterface_swigregister = _pythonAPI.FileInterface_swigregister
FileInterface_swigregister(FileInterface)

class FileBuilderInterface(ParameterizableInterface, CommonInterface):
    """Proxy of C++ FileBuilderInterface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, expressionParser, expressionFormatter):
        """
        __init__(FileBuilderInterface self, QSharedPointer< ExpressionParser > expressionParser, QSharedPointer< ExpressionFormatter > expressionFormatter) -> FileBuilderInterface

        Parameters
        ----------
        expressionParser: QSharedPointer< ExpressionParser >
        expressionFormatter: QSharedPointer< ExpressionFormatter >

        """
        _pythonAPI.FileBuilderInterface_swiginit(self, _pythonAPI.new_FileBuilderInterface(expressionParser, expressionFormatter))
    __swig_destroy__ = _pythonAPI.delete_FileBuilderInterface

    def setFileBuilders(self, newFileBuilders):
        """
        setFileBuilders(FileBuilderInterface self, QSharedPointer< QList< QSharedPointer< FileBuilder > > > newFileBuilders)

        Parameters
        ----------
        newFileBuilders: QSharedPointer< QList< QSharedPointer< FileBuilder > > >

        """
        return _pythonAPI.FileBuilderInterface_setFileBuilders(self, newFileBuilders)


    def getExpressionsInSelectedFileBuilders(self, fileBuilderNames):
        """
        getExpressionsInSelectedFileBuilders(FileBuilderInterface self, stringVector fileBuilderNames) -> stringVector

        Parameters
        ----------
        fileBuilderNames: std::vector< std::string,std::allocator< std::string > >

        """
        return _pythonAPI.FileBuilderInterface_getExpressionsInSelectedFileBuilders(self, fileBuilderNames)


    def addFileBuilder(self, *args):
        """
        addFileBuilder(FileBuilderInterface self, int const & row, std::string const & newFileBuilderName)

        Parameters
        ----------
        row: int const &
        newFileBuilderName: std::string const &

        addFileBuilder(FileBuilderInterface self, int const & row)

        Parameters
        ----------
        row: int const &

        """
        return _pythonAPI.FileBuilderInterface_addFileBuilder(self, *args)


    def removeFileBuilder(self, fileBuilderName):
        """
        removeFileBuilder(FileBuilderInterface self, std::string const & fileBuilderName) -> bool

        Parameters
        ----------
        fileBuilderName: std::string const &

        """
        return _pythonAPI.FileBuilderInterface_removeFileBuilder(self, fileBuilderName)


    def getIndexedFileType(self, itemIndex):
        """
        getIndexedFileType(FileBuilderInterface self, int const & itemIndex) -> std::string

        Parameters
        ----------
        itemIndex: int const &

        """
        return _pythonAPI.FileBuilderInterface_getIndexedFileType(self, itemIndex)


    def setFileType(self, currentFileType, newFileType):
        """
        setFileType(FileBuilderInterface self, std::string const & currentFileType, std::string const & newFileType) -> bool

        Parameters
        ----------
        currentFileType: std::string const &
        newFileType: std::string const &

        """
        return _pythonAPI.FileBuilderInterface_setFileType(self, currentFileType, newFileType)


    def getCommand(self, fileType):
        """
        getCommand(FileBuilderInterface self, std::string const & fileType) -> std::string

        Parameters
        ----------
        fileType: std::string const &

        """
        return _pythonAPI.FileBuilderInterface_getCommand(self, fileType)


    def setCommand(self, fileType, newCommand):
        """
        setCommand(FileBuilderInterface self, std::string const & fileType, std::string const & newCommand) -> bool

        Parameters
        ----------
        fileType: std::string const &
        newCommand: std::string const &

        """
        return _pythonAPI.FileBuilderInterface_setCommand(self, fileType, newCommand)


    def getFlags(self, fileType):
        """
        getFlags(FileBuilderInterface self, std::string const & fileType) -> std::string

        Parameters
        ----------
        fileType: std::string const &

        """
        return _pythonAPI.FileBuilderInterface_getFlags(self, fileType)


    def setFlags(self, fileType, newFlags):
        """
        setFlags(FileBuilderInterface self, std::string const & fileType, std::string const & newFlags) -> bool

        Parameters
        ----------
        fileType: std::string const &
        newFlags: std::string const &

        """
        return _pythonAPI.FileBuilderInterface_setFlags(self, fileType, newFlags)


    def getReplaceDefaultFlagsValue(self, fileType, baseNumber=0):
        """
        getReplaceDefaultFlagsValue(FileBuilderInterface self, std::string const & fileType, int const & baseNumber=0) -> std::string

        Parameters
        ----------
        fileType: std::string const &
        baseNumber: int const &

        getReplaceDefaultFlagsValue(FileBuilderInterface self, std::string const & fileType) -> std::string

        Parameters
        ----------
        fileType: std::string const &

        """
        return _pythonAPI.FileBuilderInterface_getReplaceDefaultFlagsValue(self, fileType, baseNumber)


    def getReplaceDefaultFlagsFormattedExpression(self, fileType):
        """
        getReplaceDefaultFlagsFormattedExpression(FileBuilderInterface self, std::string const & fileType) -> std::string

        Parameters
        ----------
        fileType: std::string const &

        """
        return _pythonAPI.FileBuilderInterface_getReplaceDefaultFlagsFormattedExpression(self, fileType)


    def getReplaceDefaultFlagsExpression(self, fileType):
        """
        getReplaceDefaultFlagsExpression(FileBuilderInterface self, std::string const & fileType) -> std::string

        Parameters
        ----------
        fileType: std::string const &

        """
        return _pythonAPI.FileBuilderInterface_getReplaceDefaultFlagsExpression(self, fileType)


    def setReplaceDefaultFlags(self, filetype, newReplaceDefaultFlags):
        """
        setReplaceDefaultFlags(FileBuilderInterface self, std::string const & filetype, std::string const & newReplaceDefaultFlags) -> bool

        Parameters
        ----------
        filetype: std::string const &
        newReplaceDefaultFlags: std::string const &

        """
        return _pythonAPI.FileBuilderInterface_setReplaceDefaultFlags(self, filetype, newReplaceDefaultFlags)

FileBuilderInterface.setFileBuilders = new_instancemethod(_pythonAPI.FileBuilderInterface_setFileBuilders, None, FileBuilderInterface)
FileBuilderInterface.getExpressionsInSelectedFileBuilders = new_instancemethod(_pythonAPI.FileBuilderInterface_getExpressionsInSelectedFileBuilders, None, FileBuilderInterface)
FileBuilderInterface.addFileBuilder = new_instancemethod(_pythonAPI.FileBuilderInterface_addFileBuilder, None, FileBuilderInterface)
FileBuilderInterface.removeFileBuilder = new_instancemethod(_pythonAPI.FileBuilderInterface_removeFileBuilder, None, FileBuilderInterface)
FileBuilderInterface.getIndexedFileType = new_instancemethod(_pythonAPI.FileBuilderInterface_getIndexedFileType, None, FileBuilderInterface)
FileBuilderInterface.setFileType = new_instancemethod(_pythonAPI.FileBuilderInterface_setFileType, None, FileBuilderInterface)
FileBuilderInterface.getCommand = new_instancemethod(_pythonAPI.FileBuilderInterface_getCommand, None, FileBuilderInterface)
FileBuilderInterface.setCommand = new_instancemethod(_pythonAPI.FileBuilderInterface_setCommand, None, FileBuilderInterface)
FileBuilderInterface.getFlags = new_instancemethod(_pythonAPI.FileBuilderInterface_getFlags, None, FileBuilderInterface)
FileBuilderInterface.setFlags = new_instancemethod(_pythonAPI.FileBuilderInterface_setFlags, None, FileBuilderInterface)
FileBuilderInterface.getReplaceDefaultFlagsValue = new_instancemethod(_pythonAPI.FileBuilderInterface_getReplaceDefaultFlagsValue, None, FileBuilderInterface)
FileBuilderInterface.getReplaceDefaultFlagsFormattedExpression = new_instancemethod(_pythonAPI.FileBuilderInterface_getReplaceDefaultFlagsFormattedExpression, None, FileBuilderInterface)
FileBuilderInterface.getReplaceDefaultFlagsExpression = new_instancemethod(_pythonAPI.FileBuilderInterface_getReplaceDefaultFlagsExpression, None, FileBuilderInterface)
FileBuilderInterface.setReplaceDefaultFlags = new_instancemethod(_pythonAPI.FileBuilderInterface_setReplaceDefaultFlags, None, FileBuilderInterface)
FileBuilderInterface_swigregister = _pythonAPI.FileBuilderInterface_swigregister
FileBuilderInterface_swigregister(FileBuilderInterface)



