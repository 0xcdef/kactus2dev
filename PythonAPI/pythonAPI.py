# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pythonAPI
else:
    import _pythonAPI

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pythonAPI.delete_SwigPyIterator

    def value(self):
        return _pythonAPI.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pythonAPI.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pythonAPI.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pythonAPI.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pythonAPI.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pythonAPI.SwigPyIterator_copy(self)

    def next(self):
        return _pythonAPI.SwigPyIterator_next(self)

    def __next__(self):
        return _pythonAPI.SwigPyIterator___next__(self)

    def previous(self):
        return _pythonAPI.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pythonAPI.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pythonAPI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pythonAPI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pythonAPI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pythonAPI.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pythonAPI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pythonAPI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pythonAPI:
_pythonAPI.SwigPyIterator_swigregister(SwigPyIterator)

class QString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromStdString(s):
        return _pythonAPI.QString_fromStdString(s)

    def toStdString(self):
        return _pythonAPI.QString_toStdString(self)

    def size(self):
        return _pythonAPI.QString_size(self)

    def count(self):
        return _pythonAPI.QString_count(self)

    def length(self):
        return _pythonAPI.QString_length(self)

    def isEmpty(self):
        return _pythonAPI.QString_isEmpty(self)

    def __init__(self):
        _pythonAPI.QString_swiginit(self, _pythonAPI.new_QString())
    __swig_destroy__ = _pythonAPI.delete_QString

# Register QString in _pythonAPI:
_pythonAPI.QString_swigregister(QString)

def QString_fromStdString(s):
    return _pythonAPI.QString_fromStdString(s)

class NameGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pythonAPI.NameGroup_swiginit(self, _pythonAPI.new_NameGroup(*args))
    __swig_destroy__ = _pythonAPI.delete_NameGroup

    def name(self):
        return _pythonAPI.NameGroup_name(self)

    def displayName(self):
        return _pythonAPI.NameGroup_displayName(self)

    def description(self):
        return _pythonAPI.NameGroup_description(self)

# Register NameGroup in _pythonAPI:
_pythonAPI.NameGroup_swigregister(NameGroup)

class portsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pythonAPI.portsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pythonAPI.portsVector___nonzero__(self)

    def __bool__(self):
        return _pythonAPI.portsVector___bool__(self)

    def __len__(self):
        return _pythonAPI.portsVector___len__(self)

    def __getslice__(self, i, j):
        return _pythonAPI.portsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pythonAPI.portsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pythonAPI.portsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pythonAPI.portsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pythonAPI.portsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pythonAPI.portsVector___setitem__(self, *args)

    def pop(self):
        return _pythonAPI.portsVector_pop(self)

    def append(self, x):
        return _pythonAPI.portsVector_append(self, x)

    def empty(self):
        return _pythonAPI.portsVector_empty(self)

    def size(self):
        return _pythonAPI.portsVector_size(self)

    def swap(self, v):
        return _pythonAPI.portsVector_swap(self, v)

    def begin(self):
        return _pythonAPI.portsVector_begin(self)

    def end(self):
        return _pythonAPI.portsVector_end(self)

    def rbegin(self):
        return _pythonAPI.portsVector_rbegin(self)

    def rend(self):
        return _pythonAPI.portsVector_rend(self)

    def clear(self):
        return _pythonAPI.portsVector_clear(self)

    def get_allocator(self):
        return _pythonAPI.portsVector_get_allocator(self)

    def pop_back(self):
        return _pythonAPI.portsVector_pop_back(self)

    def erase(self, *args):
        return _pythonAPI.portsVector_erase(self, *args)

    def __init__(self, *args):
        _pythonAPI.portsVector_swiginit(self, _pythonAPI.new_portsVector(*args))

    def push_back(self, x):
        return _pythonAPI.portsVector_push_back(self, x)

    def front(self):
        return _pythonAPI.portsVector_front(self)

    def back(self):
        return _pythonAPI.portsVector_back(self)

    def assign(self, n, x):
        return _pythonAPI.portsVector_assign(self, n, x)

    def resize(self, *args):
        return _pythonAPI.portsVector_resize(self, *args)

    def insert(self, *args):
        return _pythonAPI.portsVector_insert(self, *args)

    def reserve(self, n):
        return _pythonAPI.portsVector_reserve(self, n)

    def capacity(self):
        return _pythonAPI.portsVector_capacity(self)
    __swig_destroy__ = _pythonAPI.delete_portsVector

# Register portsVector in _pythonAPI:
_pythonAPI.portsVector_swigregister(portsVector)

class PythonAPI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pythonAPI.PythonAPI_swiginit(self, _pythonAPI.new_PythonAPI())
    __swig_destroy__ = _pythonAPI.delete_PythonAPI

    def setupLibrary(self, settingsFile):
        return _pythonAPI.PythonAPI_setupLibrary(self, settingsFile)

    def getFileCount(self):
        return _pythonAPI.PythonAPI_getFileCount(self)

    def listVLNVs(self, *args):
        return _pythonAPI.PythonAPI_listVLNVs(self, *args)

    def listComponentVLNVs(self):
        return _pythonAPI.PythonAPI_listComponentVLNVs(self)

    def openComponent(self, componentVLNV):
        return _pythonAPI.PythonAPI_openComponent(self, componentVLNV)

    def closeOpenComponent(self):
        return _pythonAPI.PythonAPI_closeOpenComponent(self)

    def getComponentName(self):
        return _pythonAPI.PythonAPI_getComponentName(self)

    def getComponentDescription(self):
        return _pythonAPI.PythonAPI_getComponentDescription(self)

    def saveComponent(self):
        return _pythonAPI.PythonAPI_saveComponent(self)

    def listComponentPorts(self):
        return _pythonAPI.PythonAPI_listComponentPorts(self)

    def setPortName(self, currentPortName, newPortName):
        return _pythonAPI.PythonAPI_setPortName(self, currentPortName, newPortName)

    def createSimplePortsForComponent(self):
        return _pythonAPI.PythonAPI_createSimplePortsForComponent(self)

# Register PythonAPI in _pythonAPI:
_pythonAPI.PythonAPI_swigregister(PythonAPI)

class SimpleNameGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, description):
        _pythonAPI.SimpleNameGroup_swiginit(self, _pythonAPI.new_SimpleNameGroup(name, description))
    __swig_destroy__ = _pythonAPI.delete_SimpleNameGroup

    def getName(self):
        return _pythonAPI.SimpleNameGroup_getName(self)

    def getDescription(self):
        return _pythonAPI.SimpleNameGroup_getDescription(self)

# Register SimpleNameGroup in _pythonAPI:
_pythonAPI.SimpleNameGroup_swigregister(SimpleNameGroup)

class SimplePort(SimpleNameGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pythonAPI.SimplePort_swiginit(self, _pythonAPI.new_SimplePort(*args))
    __swig_destroy__ = _pythonAPI.delete_SimplePort

    def getDataType(self):
        return _pythonAPI.SimplePort_getDataType(self)

    def getBitWidth(self):
        return _pythonAPI.SimplePort_getBitWidth(self)

    def getDirection(self):
        return _pythonAPI.SimplePort_getDirection(self)

# Register SimplePort in _pythonAPI:
_pythonAPI.SimplePort_swigregister(SimplePort)



